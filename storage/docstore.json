{"docstore/metadata": {"abefcd14-4f0e-4481-ae18-3ed3a5649ee5": {"doc_hash": "7defc127940803f6a7ddde713e44d3afc1e8d39a549fd1d8f0c4c44cdc67230b"}, "0621f6db-62c4-4ee2-93c2-5a2f61ea2cdc": {"doc_hash": "957a606675f3c68d593aa0d8943f362936248fbcb0d493641a2dccf2892e18cd"}, "24034607-b07a-4843-8bcc-d164e05ac876": {"doc_hash": "a63d54212a8db3f76d199f6450e5b9ef4981cabb587210058441fa9935a21cb5"}, "57c9a8ad-e3a5-40cf-8c94-26448ab499d7": {"doc_hash": "4adb8f18f2f291226adc94d893f4bf255bc2b9f5abd0412057834df64c31b635"}, "34efe4bc-c057-460d-a4c8-7a3d286c062a": {"doc_hash": "68b74e8e1bfa9f6b1e91c8f976044ff246562b2d89bf7f50378e3b931c2ce05e"}, "37a0a963-8428-43a8-ab00-8e9ecabe34d9": {"doc_hash": "952cd164450cbb1aacc630f0fd447b0c31e0add1cea64095e027a1ba3ee739e5"}, "b385ede5-7310-4432-8cd2-3fd5357b51da": {"doc_hash": "64335dfc3d8cb986bc50adc81c1932138f2b4b39302acb61f8d2a35dedcd3540"}, "86d9f2df-6f80-4203-95e3-3a929ac9d6d9": {"doc_hash": "d5f91634b10880b6df15283e16aec0cf6b3997aee2a07234f02c90c90eacaae7"}, "e08fd715-cc2e-4356-95b4-45b2414c29b1": {"doc_hash": "94c9e1de88e990d1a4bde7ffa6de2b15f9e2d91e857f3bf1939751d719e0896a"}, "7ece5be9-5a87-41e9-aaff-b63970861352": {"doc_hash": "4f15284f2ec2378868d9cdb5eb9957ef9c6ff52c9d5fc113589a33bdbda60362"}, "14004861-d15b-4f7f-a989-c0106154541d": {"doc_hash": "210ab133bfbd51cea53036b662d9e9e55716323192fd3c16771d88427d10e8ae"}, "5e802b9b-48b2-482d-a8cc-e7821507ca8c": {"doc_hash": "8aa08383ae9c3c4294c51142e245c0726c828a2e37469171d28622ca216303cb"}, "7ef3c18d-f0ee-4041-9cc1-31a825a56ad6": {"doc_hash": "ef0c39a9b82cf1a8d6eb3997831de11b7b2b2302af1040c49e486cbf81667ce4"}, "8bda120f-0c8f-4b6b-9795-06c3c2ce3ad2": {"doc_hash": "b2d8d8bfb99be0cf72d7da35b382409426010e398ed5f3bcd242a16b4ca3abf3"}, "1c633116-1c28-4d4d-97f0-1549351d46b3": {"doc_hash": "8524c8277e24ea2e419640d1d9a94d4a1e1a55fcf74c3200f4731010a9b89940"}, "5e1f3a31-5f21-45a3-9889-9d816158e34f": {"doc_hash": "dd3017157b68abf1ae98e33e400445726c5fe5c181e121b5a3c3c3d31b3c6bf2"}, "9719379b-cbb1-4e00-931d-6a4198cb1a30": {"doc_hash": "efc8dcf5d28b65c53d8bbfb24475b43579584e825b0ca843565595f9798c89bf"}, "63f0cf37-7115-4b60-afb2-5c5deeab00cd": {"doc_hash": "2626b47ceda46326a5c5f5812f5c3142d7e000ee50fa86f095e4a69453fdd01c"}, "3c7da462-df5c-48a6-b6c6-98bbf1743376": {"doc_hash": "229afab7f21ad72af84e6155471f3e2fe39a62741003fe40453b4aa21577e636"}, "aec073d2-15e7-48a2-947b-cc1aecff05eb": {"doc_hash": "e901445f53c3cbed4c8014cf398b547259af2d41f629bab371725c3f52a5b7f8"}, "fa515f9a-cf2b-4727-9815-3fddcd2b10cc": {"doc_hash": "f80695c20d04528f9cc1d68c6210b233dca7287a5481f1315f886ce75ad675e1"}, "15d2c7fa-2928-42cc-986e-417f2bf37390": {"doc_hash": "54e59b6bc692f19c15e7a5b766e6438851885ba18caf0a78c0785a75d6dc3f47"}, "929b1115-7cfa-48f9-9092-9cb46741535e": {"doc_hash": "5106880ee005fc95e2a4a77507af6aaabdb64fbc9686eebcebb6a71077753cfb"}, "b6841699-dcbc-4648-83bd-5f7be325a64c": {"doc_hash": "15791145e919a7d51881f03f07d4c7eed3597cce1e3686e667094ba946da591e"}, "ea5db368-90e2-4118-aff3-fad913ee8fc3": {"doc_hash": "26a3e18ad4b5c47da49cc859547a33f883be2f8119839baa3817449c3be7cb6a"}, "bd5d51a3-749a-4ec4-8a69-454319a98074": {"doc_hash": "de24de046b1897adcf1e218fd3d27fc236550137a51881be7acce11ff3f788ef"}, "4cf41afc-92cd-4374-8cb5-d790681ffaa0": {"doc_hash": "c991791d4c915f19a732c3788afd64236314ba7e6aefed44de7b8435b3af8c6b"}, "2d9d018c-b3ec-4b0d-b97f-55e63a1d7ae7": {"doc_hash": "d09b5ee815cfac1808317ffe847393d357e6d559e4ddc6b95163e0f1a4c45c1d"}, "86a577b0-38d1-4ee0-b7fa-75f301920f22": {"doc_hash": "550839ec9b4d4e9ec6370cdc56c22ab4646c5ff57698db7c5817727220ae5f86"}, "a24e778b-dc93-4c2e-9eca-3f374743dc10": {"doc_hash": "feefc787c6ee1f692c69a44cb2dc156551124c36a62acff87680f3978621e55f"}, "b0257f49-e112-4861-bfb8-474fb390fad4": {"doc_hash": "2be1d023dfc2a0b7a0cef883b3fcb9fb8859bfb2b61f4cb80db5392050c40fa0"}, "a044a92f-441f-428f-9f91-f2da5313204f": {"doc_hash": "e788e0b6c5c322107a66da1f14bd2512bfdee6de501273394757fd6b5ccf91a5"}, "56d519f2-7c7e-490f-ad44-54a26fe746a4": {"doc_hash": "010e27d31681091798de3af2a0840871e36d3af7535aa551edaaa4e96eb6a2f4"}, "d55f7abd-d443-44cb-803f-5a68e2f6e73b": {"doc_hash": "f8f89029b312edd6b250a72bce2c5bfe7ddc5a54e03279de6424fe032bac82d8"}, "90ea49db-900a-4824-aef7-c67a8c34707c": {"doc_hash": "fdf8d154c3fe80b49b0f0598d9d3caae603b84aee19c8160b8138c7fae715f26"}, "cb868661-fd11-4c68-a340-4363e90367a1": {"doc_hash": "a25bce6b19526809c69638ae3d1a723c01942af465a73dd6899099be543a4ae0"}, "84c33698-b790-4977-8f95-6eaee7854d3f": {"doc_hash": "d90ef74340bd210c433d6024d2cbb3f0b500068272dd685ca97e0a190dc6a900"}, "05b3e958-994b-41da-8ef5-f29003b413bf": {"doc_hash": "824526809efc1d15db26bd393e548389a4721fc5822b46212836663a8f67c7eb"}, "5596d08c-7bde-4e05-8c6a-8da290e67b7a": {"doc_hash": "7a9cf93e9baa8579a36cdc4b28b69cb734c8f3b3f6fc188385d2e23d0b59bd6b"}, "4743f1da-433f-4c34-9421-1cf7c3948fa0": {"doc_hash": "2454f8b97d90afc05d8ce323b571c87031966ac5daffa9d684951900a5be329d"}, "0f21494e-088e-46a1-9c3f-a6029caee0ff": {"doc_hash": "f2ff79c2a77a10d8d074a4d716a44869ac62eea2addfe942e6c3b34038a5446c"}, "4317750e-55c1-4905-9ee3-d570e0e22ee7": {"doc_hash": "c9e7da20da1fb57c7b11b49202749fd13aa8964deace8c9c1364199fdd02970d"}, "9ba135d8-e951-4715-95b9-b467c002e44b": {"doc_hash": "b856ce567ffa170ee77197c53c3c999903ac3a83ea26a75f9f136dcf156126b8"}, "827766e5-4f50-4930-92be-2629414d5325": {"doc_hash": "0a47b472d61f1a59fc5ecd7222a5a468ae9ce64fd6dbad68d986c9ef2d2a5856"}, "48de5a68-99fd-4110-b7a0-48cb3cba695d": {"doc_hash": "8bcfe4e66a14e8942d84a791339a47d4d0db3e0ba4b08ce979e6d8df5d16f29d"}, "da0c0f2c-5bd3-433e-aa19-674781f651bc": {"doc_hash": "1c181ae09d3cc17b8018a01e54aa60bbd15ea69a80e83a32047c48428066d466"}, "c372b535-fcd1-448e-abd2-a09dfb229797": {"doc_hash": "9930bffbd1a81dc3ad603aecb79255cdc9a440818872312217c1dc422ad15c11"}, "76a4bbe3-94c5-4050-a476-9388ccc8ff90": {"doc_hash": "7c03c3503a40e2e4a65d8afe4c02871b52c423adb169178757c45eca0dd6bc7f"}, "5f8ffbd8-6012-401a-aa72-42b96b933cef": {"doc_hash": "87fbb48f0dcf8471ce6195161cb53058f630324ce20df913c721a98ed6c02e59"}, "c8226cc3-0a64-4e0a-b868-5237714438a2": {"doc_hash": "bda47c969b2c9c417003dea63780cb8ca3108bc70603d358a817af0a74f1e072"}, "22d13e0a-9f7b-4712-a400-737f3bfaf4be": {"doc_hash": "1ccdcdc398a0a7ae8a144cabebe7fee593bde208ccb887e23c3ce2cb0015acfc"}, "25b4ef3e-71cc-4b7a-be67-5abbeeee9005": {"doc_hash": "b6a6a5484a9a19bb4e7554190f1d3f6cb73b7b33aa9a83cac8798aaf680103ed"}, "f4b7b610-7ef4-4e02-8fca-2470625ba5bc": {"doc_hash": "a837635da398437fdb018ad151e1ab196f1609d171c0e1b4f8bdd7182cda2158"}, "c04e1875-a8cf-4d86-a82a-2647e13a4176": {"doc_hash": "2af8e583e60351efa7059687fc43462d7855ac05ea176cf7aad65fce1a936a05"}, "d541a4a7-5460-4a1d-8249-0db167b6d95c": {"doc_hash": "9283ae547f12cb2fc463451860e7ccffe8a38ee4f8b0951539f2f3b3ac53207c"}, "2644d1c7-6ce9-4d01-af17-ac7b191cd05c": {"doc_hash": "985feb1be9ed7d4447191749e077aebbbc83869ae323a545562eaaa5be63b612"}, "9917d25f-43a0-4ee1-b5c3-d477d9136d5f": {"doc_hash": "96a42b04b6de28171e2a7f4dc75b9c6cbbb4a76444e6dfcfbb8fd829a5fb30ae"}, "a13d9783-402d-4078-b816-4831a1f153f4": {"doc_hash": "e561770012b21a8d2da40a7f98097192fc0f481b2409cf1aee578d89b2a79725"}, "f619c683-4114-4e2b-9b27-ca2f455ba6d3": {"doc_hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260"}, "cec080e9-c8d0-431f-989d-23ec9ea0ae1d": {"doc_hash": "609d24f62f3e40925354507e320a71ca9b3f735fb49c54dada32df9ef3ad6d1e"}, "0e40ed3c-0e3f-420c-b119-ff19a9e72377": {"doc_hash": "7340f362d17246fc6e26e0e6381b9a3572dea5799ec27136bd399dfd9ad5ac89"}, "d14c07be-ee62-4563-b788-17ba9ca74f16": {"doc_hash": "7e197a63fb9e899827ccafe96b4f70da8af29a49981b07b267ae390739f924b0"}, "05385150-776b-41cc-a760-dfd3b7cc310a": {"doc_hash": "8f444e3b3a91d79b0dcd31326ed774e46fd69a054a2d8eea77f68f453dbe06bc"}, "aedef508-28e9-438e-aab5-99be37412391": {"doc_hash": "48ec553844513a05590515df110ef1767922e393ffcfda35b89e19a62ae141d8"}, "0d53d26f-547d-42c8-b117-299aa9143461": {"doc_hash": "cebeb3d4890627c9f183ac5a3cf49461051b8505130fb823c1c2561fa6fa6c1c"}, "708a68d5-984e-4496-8dd0-da43c444d52c": {"doc_hash": "d743cce0d34ffb1cdea93667fe7be6aba06c0c4b297e44a11029ba080c0ae6eb"}, "9a8d09c3-d561-43b9-b6ab-34c2160444d9": {"doc_hash": "4b7011344ec262aa544190ba48b81a66f773f14768a9093817b1860da53615e8"}, "dc2be6b3-8f35-41c8-8b35-befeae7756cb": {"doc_hash": "42ebe779ddf735bafe0d2f4f1b084d681cc1ddedfc92e0629e121643a6bc82ff"}, "c2993c21-3fed-4de7-afbd-9be511e534f3": {"doc_hash": "044b084cc5e08a75d583fb6678f91e2395e778098a2bbda23d3bbb15d5b0f76f"}, "6a6142c5-8131-4024-96d3-9863b6c08bec": {"doc_hash": "7b8654bcde70d17289d3fbefe53a215ed52ce6fcb069049b4065224dfab10e3a"}, "7558e218-47b8-4b1c-9be0-063616ac6348": {"doc_hash": "6fe19822317683036efd5dff93455d1b3aed9c5714f0bc4eaad5a08c3702e2a1"}, "545bba30-3ed3-40f2-ac36-d837fceee1ca": {"doc_hash": "c56c49de49ee63afb9036999d65471497c6801ca0dd704e6c25985228766497b"}, "1ba3d028-7243-44c9-8ef1-bc76a925dbc6": {"doc_hash": "e453f3283078ff69bc5e686fd1d50cabf5aab2008faa9323b992ab2cf3f7212c"}, "a6741340-c853-4b72-a5c4-615aa44aeab9": {"doc_hash": "b99f9c5281df22ec5b266b08ec354c4ca6a99660ef8770cf46b26d571701549c"}, "48a6b96b-effb-488d-a8c5-aa815f49bf05": {"doc_hash": "ceb0a69c044fff6a7c00f736473f34b3ec7660bf245ae2606566e677df8cbde6"}, "0968c81a-248f-4fb2-80b2-81c390661417": {"doc_hash": "c3a515ba1a32fd69e4098ca303ad5f8984a41e1ebce1b96dec8c2d7f61802108"}, "1308f019-4225-42b3-94e9-fe8befbc515e": {"doc_hash": "26bf9a35f0ebaab1fac876c03c362b603ccbf29383cd1c3ea2b27fc846fad7a4"}, "d83aec58-70fe-484f-9049-3aa49a98d006": {"doc_hash": "85642bc537b8fec6015b114793ce7b44416cd68ba571d36fa36c46b4bb5d4ba6"}, "2ff72e13-0574-403d-b81e-57c53a6bc8d9": {"doc_hash": "7eff528fea96e4955fce994757a928845a1d60537f48069f698a1182a4b2a1b4"}, "f8d24fdb-b9f0-43fa-96da-c46220caa262": {"doc_hash": "706de19903219e3169da8fcee775ac75703e8aad90a27facd31d4b6af3f88d11"}, "22747c5f-473f-43ea-ac41-798562f8c1f6": {"doc_hash": "78f656daace0190901c22ee35c862de5bdf69d86a79bd8a3d02014a012ee00a4"}, "cef774c6-9dbb-401c-b1dc-70e11384c6ee": {"doc_hash": "606483e3f0e09ecc3caee04e253ece68c20a440358df95f24a6062d34069542a"}, "bb688433-7af5-49d0-9d1c-6640f858276d": {"doc_hash": "5f8d6d1509ffb56bc727f6487ed2bf161be3c3865e0a0a9bae57aacb0d8814cb"}, "d9b7b290-56c6-4e43-ba15-79cf250330e9": {"doc_hash": "b0a30fde214b969e9d8ba8ee86db0b9deece7a8a47fe4dbaf19afbf1dcaf18ce"}, "207f3aa4-27ec-4b55-b464-7ed2ba286e54": {"doc_hash": "8649bb348e0f591add745487d3ead37fadb854312d9754a23441d8aacfa52ea3"}, "a6861b74-8d75-4938-b604-85765b05dadc": {"doc_hash": "1d5ee42b13112960a9cf764052a149cd4b36af761cbd559a67f1dc2e28299123"}, "30d25159-9824-47a6-a476-2bb144e2c4e1": {"doc_hash": "e3c5796e0374892f873e32f3beb93770963e3ce9d1733bfb6479c06cf0d520a6"}, "ad5005c6-81de-491b-8089-80871a922190": {"doc_hash": "7c96de35731f8ce0e331111109e2a32901fef3a7afbba6efa79addacd1ae78cf"}, "17e7120b-3188-4f13-841f-7ec72f8998bd": {"doc_hash": "705584bb3b12c768f4e4518cad7c14ba9cf604318d5cbc317bad94f0c1efe4be"}, "7f05c25d-af1d-48b6-acf4-e43e8faa6455": {"doc_hash": "f1c70cbf2047afdf04dcb03dc0933cdf7a13e0491fd07f0fabcfb50d8cf2efa8"}, "513524c6-b3eb-4f9e-bab1-a867015a1e4b": {"doc_hash": "0524e239b7ba42141a295869b926421f64dfc23c060bdc4c08e0a7fe3f352d15"}, "70343630-4b8c-437b-85f7-4757c6558ab3": {"doc_hash": "a52262117db9f7697ca839cda6abe4e44da693f843ba23f9fded567afebc6d01"}, "8d6220e4-1b04-43ea-981c-9f9d2c15cf4e": {"doc_hash": "48e95d91c23f6cdcfe19c923702bc56df46ab8c177b41ceb1d98ef2f78a8617b"}, "90347410-a2c1-450b-aeef-77213ccc017e": {"doc_hash": "b56aaab595a4b0c8cdf96e6ad3ffc8271a9e31379412ebf67e3526d2488bb979"}, "241cb01c-8235-45f6-b1b6-d04048f7e7e9": {"doc_hash": "a85b62419f535b3da6afc1d2a5df84125361b0a4abcaf2cd391224603d8fa7d8"}, "16789de3-0647-404f-962a-4c8fc64b3d2e": {"doc_hash": "90054f29da7fbdcc22d9e4d425c22038da83dc3012efcb3bf991ecf636819bb8", "ref_doc_id": "abefcd14-4f0e-4481-ae18-3ed3a5649ee5"}, "55484d02-0725-4420-b96d-5d160c4b938a": {"doc_hash": "8bd452f9ade2c7b6f0bff21bf3ec3cd039764a45e0025fec8f0e6d4cbf5f1f08", "ref_doc_id": "0621f6db-62c4-4ee2-93c2-5a2f61ea2cdc"}, "71816b07-5115-4f82-a7fb-7a1b996d40e4": {"doc_hash": "e99400ce528d077ea681d4bc5adf76ab95f7fe390e9d754b39905ce2ed4b6742", "ref_doc_id": "24034607-b07a-4843-8bcc-d164e05ac876"}, "5d26632c-ab8c-4f87-9549-ce91a69fde2c": {"doc_hash": "8c7f43b0b015fcf283eb660f57126a6023751210201c30c5c5474033b21c8d00", "ref_doc_id": "57c9a8ad-e3a5-40cf-8c94-26448ab499d7"}, "5f3fdb99-7c0e-4077-8b97-78a2ee2093d6": {"doc_hash": "66e5a77ceb6f69aafcb000f900b3c4cad890a475652c0da21a16e7f8f367392d", "ref_doc_id": "34efe4bc-c057-460d-a4c8-7a3d286c062a"}, "61fc863a-cdf0-4dba-acaf-7bfd0d7887e8": {"doc_hash": "e78b5b76f0d0ed3f202063dca06cd620a889bdf1b639d281d75a1978052cf7d1", "ref_doc_id": "37a0a963-8428-43a8-ab00-8e9ecabe34d9"}, "0d21569e-bb02-4029-8a82-b1a01ac6bbd9": {"doc_hash": "4ae1f0b952e65494af9f80c4ea1a7490710077d551726b6f86bfdc890ffe7639", "ref_doc_id": "b385ede5-7310-4432-8cd2-3fd5357b51da"}, "d979e5eb-ab3f-4f92-a53b-a77ca8008469": {"doc_hash": "1666ffb8a962b3f7e10e743b330b78f2a2f2c1f456547f2e2698fbebdf3c76f6", "ref_doc_id": "b385ede5-7310-4432-8cd2-3fd5357b51da"}, "a8a5729b-503c-4c1f-84e6-7ea719a05ffc": {"doc_hash": "974a3987150f170999431f7d68e1fe2361cad5d91ee680df5cb84fa8bf07aa3c", "ref_doc_id": "b385ede5-7310-4432-8cd2-3fd5357b51da"}, "4373fa74-bf9c-4083-8313-5beaa19fac5a": {"doc_hash": "4c521fafb185d40d5f03fc68a3427a472be1d989d5d90205a8612a7e2f2b887c", "ref_doc_id": "86d9f2df-6f80-4203-95e3-3a929ac9d6d9"}, "a14fac7f-d818-48e7-875f-973b7fc22ac9": {"doc_hash": "41c6bbb95937e0025c4a9c074b858b7c911654014fd8ec92338bc5a4c056e21d", "ref_doc_id": "e08fd715-cc2e-4356-95b4-45b2414c29b1"}, "8f4d0576-5183-4feb-94a6-05f4bead1184": {"doc_hash": "a719baf262c319f7b5644be93a2d692f2f842566b64021180bfee389b3de3c85", "ref_doc_id": "e08fd715-cc2e-4356-95b4-45b2414c29b1"}, "c7670d9f-a2e0-4910-91ee-a9d50c9a1b79": {"doc_hash": "c13b7a50fdbf4db20eeb9526263bee5655ea75a79fd3c30260b28826302de51c", "ref_doc_id": "e08fd715-cc2e-4356-95b4-45b2414c29b1"}, "cc4882fd-d54f-440d-8484-9a297b917950": {"doc_hash": "78e7f8bcae7e925866d2c7a0d4246ecfcd70a0e23dbb218a2a46bf682d1bf11c", "ref_doc_id": "7ece5be9-5a87-41e9-aaff-b63970861352"}, "3a6678b0-3124-4e63-be67-8fb101664b0e": {"doc_hash": "a022b61b5fc7d9d25e7db485284cc1c5c5c39e4810b8b0933f5002a66d7a21e4", "ref_doc_id": "14004861-d15b-4f7f-a989-c0106154541d"}, "f432e2a7-a0b6-42da-9f97-d240dbaf87d2": {"doc_hash": "e4853724b1562de2c0351e24af65ff79673d1406f2e2f02b9f2c3466bdae70f9", "ref_doc_id": "14004861-d15b-4f7f-a989-c0106154541d"}, "eafbe1c5-c27e-4c78-8a6b-da30ad9f0acd": {"doc_hash": "224ef96951aed40f67b5339ad1ceceafcb6e5479d5497cbaaed60a7852818de8", "ref_doc_id": "14004861-d15b-4f7f-a989-c0106154541d"}, "61ea78ee-85e8-4893-bfd2-857d27567282": {"doc_hash": "b163fa616982e2a75fa6cc6b29542de26baa9cf16f82a55373df34b6de5723ca", "ref_doc_id": "14004861-d15b-4f7f-a989-c0106154541d"}, "3bc13870-13a0-4624-b07f-6806c65a2c94": {"doc_hash": "5a2b46a75e251863afb78aa91e197705b99ffc19555ba7f5088cdb60acfd6748", "ref_doc_id": "14004861-d15b-4f7f-a989-c0106154541d"}, "da12869c-857c-492a-b66a-b6ca39df483c": {"doc_hash": "b51aabd5e81a0a8817f0bb4926894c4a47ef5595109f86a9f59992c6dad5c427", "ref_doc_id": "14004861-d15b-4f7f-a989-c0106154541d"}, "702c7f10-5c02-49c1-b0a1-60d4ceebf3ae": {"doc_hash": "4b506ebdfa2e326704c822a0523ce00062755e833e2053cf0700405d6abdf589", "ref_doc_id": "14004861-d15b-4f7f-a989-c0106154541d"}, "a1b1197d-9204-46f3-9858-ed402e594c49": {"doc_hash": "460e05c4d40b5f25bfe0715d29ee20fe03269fcd5dd9f8c9368facc37b6ed5eb", "ref_doc_id": "5e802b9b-48b2-482d-a8cc-e7821507ca8c"}, "e27b859d-dbb3-4ed0-aa8d-bf41536ca016": {"doc_hash": "a22bdc4c61f39de5c94f62712533ef999af1d7eac846425a80b953110139eccf", "ref_doc_id": "5e802b9b-48b2-482d-a8cc-e7821507ca8c"}, "c24a5fa7-9cd7-4ef7-b3d4-8b761ce52eac": {"doc_hash": "74973ba9206ee52238c519b19df9e2b3cbefc1b6d5988fde952c7ba1c83fca57", "ref_doc_id": "5e802b9b-48b2-482d-a8cc-e7821507ca8c"}, "65bbe3e1-f38f-4faf-9a33-2b7c35e6bb30": {"doc_hash": "bf04ef0f02b47e906de85a4d4cf0789f710414ff671b77d81298350034b82a54", "ref_doc_id": "7ef3c18d-f0ee-4041-9cc1-31a825a56ad6"}, "ed0ff1f6-8137-42d3-b75e-efb98c908794": {"doc_hash": "273f5961fc68c5aee79e8008e3dd394445e1001824d73408d0b73b28d7268e6b", "ref_doc_id": "8bda120f-0c8f-4b6b-9795-06c3c2ce3ad2"}, "52c03147-aded-4f13-8a12-035cfc3029b9": {"doc_hash": "887ef0e3b9b8c76c1c99f7ff4e5fb8ab4762b7a520487b262dd13f088b917c36", "ref_doc_id": "1c633116-1c28-4d4d-97f0-1549351d46b3"}, "07fb0c9f-7fd5-46a3-9416-d6a1fe6c3ba6": {"doc_hash": "40fe10cf3c48129cd2632ff2a1afab195d0308295439c4ad7bcb9b3cc386731f", "ref_doc_id": "5e1f3a31-5f21-45a3-9889-9d816158e34f"}, "48fde40a-dfe3-4dfd-8f1a-b20fed1adf9b": {"doc_hash": "e341c8760eb071d48d2414d7e40266ee48528e6f77499cefdd10a020cf5259f1", "ref_doc_id": "9719379b-cbb1-4e00-931d-6a4198cb1a30"}, "c1f7ff5a-b704-4858-b31c-0f69791f65d4": {"doc_hash": "f15e3f427d03faa904d00c56446dc63e75a2e2508cf6f9f2be0ad360f8bb4b28", "ref_doc_id": "9719379b-cbb1-4e00-931d-6a4198cb1a30"}, "ae002899-5245-4f66-b28c-e76b3972000c": {"doc_hash": "2b1303c443227ae53023269885bc7f2da07db8c4283b1698ea5572f604a78f1c", "ref_doc_id": "63f0cf37-7115-4b60-afb2-5c5deeab00cd"}, "a583f4c9-91a9-4c41-adf9-125c60c8e8d3": {"doc_hash": "9cfd41331bf4b9d42551a5fc0c9ddd55f15780e0fbb7a100f39a8ceb1027d5de", "ref_doc_id": "3c7da462-df5c-48a6-b6c6-98bbf1743376"}, "502cb41c-dbfd-4bfd-9bce-cd2484905a45": {"doc_hash": "071796008c47e17fb6892d638dd7abf9d672651b560eac11a33c747a5fe93b46", "ref_doc_id": "3c7da462-df5c-48a6-b6c6-98bbf1743376"}, "7acab5f8-3529-4536-8fb5-6bd4e662ff7d": {"doc_hash": "f57fbdaffbbaefb6a38123c61c6ba883f92440fbb28e9c6d488f302a5680a960", "ref_doc_id": "aec073d2-15e7-48a2-947b-cc1aecff05eb"}, "cd4cde87-775d-48d2-b2bf-b381e0c0beec": {"doc_hash": "f92d6a294fe12b265f7773b464361fb24952b166f12b4012674ca26bf7330184", "ref_doc_id": "fa515f9a-cf2b-4727-9815-3fddcd2b10cc"}, "87c55966-30b9-4467-bc80-fd5cef708234": {"doc_hash": "ca53a715154b67642bddfa1c2226f8e66da4128cc84144b30d35b85c87493bf2", "ref_doc_id": "15d2c7fa-2928-42cc-986e-417f2bf37390"}, "ad257be9-cfca-4717-8db6-b7a35617d3ca": {"doc_hash": "e4798e74288961a6b4d560357268db4002a0b98c85da87e1c26e790bb14e2036", "ref_doc_id": "15d2c7fa-2928-42cc-986e-417f2bf37390"}, "a1de2f1c-5ab4-4b03-8df1-56e87a1ca11e": {"doc_hash": "57c406c4ab5d37594619a2d4ac1e9f7bb7285abb8f752b00574d5144685593f5", "ref_doc_id": "15d2c7fa-2928-42cc-986e-417f2bf37390"}, "1557032b-322c-4703-9ffe-a2a8a1c8e14b": {"doc_hash": "02fd007540979f4c9b972cfdb7e046f64a447cd1ec7fc9fa6dcb9792c7ac180d", "ref_doc_id": "15d2c7fa-2928-42cc-986e-417f2bf37390"}, "e3c59fbc-1cdb-449a-8d31-1b87fe17a814": {"doc_hash": "31e44f865fba279d7299ec7e58ea5410ddd9013d476b9c091ecb21c949d55e3a", "ref_doc_id": "15d2c7fa-2928-42cc-986e-417f2bf37390"}, "979ea745-271b-4c2c-b7b0-58e4291da2d2": {"doc_hash": "f87649a94f06312828cafbfbdafa9426346434cee50482d53a69869a0a392cf1", "ref_doc_id": "15d2c7fa-2928-42cc-986e-417f2bf37390"}, "fe09973b-2728-4007-aecc-79ec13e6e9a5": {"doc_hash": "e5015d644cdc44eeb06c1cc68f03b7a05017231eee5b59362fe088a2363698d5", "ref_doc_id": "929b1115-7cfa-48f9-9092-9cb46741535e"}, "870aebf5-e064-4a38-bfc5-038dad6663f2": {"doc_hash": "15b02959776cdaf12426a00fa8340f3914e0191daf2f694f73aace2582f87c6b", "ref_doc_id": "b6841699-dcbc-4648-83bd-5f7be325a64c"}, "b3790dd6-3f71-4d08-9623-ec1a43c653f2": {"doc_hash": "2e44b396c208c9ac0d3f2ecd54dbacf144bc2c60c0a043c64d6b6a1133fb27be", "ref_doc_id": "ea5db368-90e2-4118-aff3-fad913ee8fc3"}, "5ee2ac89-49ee-49c6-8338-0cf108b8e882": {"doc_hash": "161d981cb0d1611ebe6d74aad78a4f756a90c3e82b7965c58d61066662b84026", "ref_doc_id": "bd5d51a3-749a-4ec4-8a69-454319a98074"}, "7c6ac0d3-930d-496f-bc25-530f6d475980": {"doc_hash": "29c8fa70bb3dea605c2965e808c10b644603203e48c98c978d3f905384384a52", "ref_doc_id": "4cf41afc-92cd-4374-8cb5-d790681ffaa0"}, "f5db5fe6-fbb5-468e-8fa9-aed6c898ef2f": {"doc_hash": "40d686847cf196d0f1bc1179fb49b17edc087720664e276f50b845e494e9e4e7", "ref_doc_id": "4cf41afc-92cd-4374-8cb5-d790681ffaa0"}, "b19c4805-bda2-4fa7-b071-85162985e9f5": {"doc_hash": "a34f788af68b7fefd6626e09fd0afd889949d80f99168e45549bae4df69fd35c", "ref_doc_id": "4cf41afc-92cd-4374-8cb5-d790681ffaa0"}, "68aa8df5-fe97-4e72-a8e0-229761a38438": {"doc_hash": "ccdf6a8863f2126595c325cf7f7465b09672b4c32993dce00e03b35b1b0b266a", "ref_doc_id": "4cf41afc-92cd-4374-8cb5-d790681ffaa0"}, "2b274951-e74c-4816-916d-1ea733c4339a": {"doc_hash": "710e6efb00e2b437a36206e2bceb88291ff06bf6f2c00436bc948e716c771c4f", "ref_doc_id": "2d9d018c-b3ec-4b0d-b97f-55e63a1d7ae7"}, "1df33c61-5fe7-4989-9065-b78623dbd533": {"doc_hash": "2614a58f6daecd09fe6ccaa4e7169d17564bab2fa11a0e1ad8e8590f8aad7323", "ref_doc_id": "86a577b0-38d1-4ee0-b7fa-75f301920f22"}, "5189ff9c-8102-46a0-af66-4f35600d78c4": {"doc_hash": "21e4eee6b0afce774198f12d0b2b991a800ff39b69bbd471e27cc7cbce6b780c", "ref_doc_id": "86a577b0-38d1-4ee0-b7fa-75f301920f22"}, "ba56f1f5-682a-44ff-b6b8-0d476913f944": {"doc_hash": "83ca8703c792efc45a2b2d3d739e8cbfa43687c56623df41b9f4ad2c2c8f8ecd", "ref_doc_id": "a24e778b-dc93-4c2e-9eca-3f374743dc10"}, "8babec5a-d8e9-44e1-b6ee-cdd6c71b00b6": {"doc_hash": "49a6b978548bce77ed5c227966b3962f8dac8addccb8826ba51dc7a3ab103230", "ref_doc_id": "b0257f49-e112-4861-bfb8-474fb390fad4"}, "f18ddc0a-a133-4b41-a170-33f5587c1171": {"doc_hash": "47c285542bc898f1eae08eaa1c120a6ceca218882b85d2cc09663fde416ceb10", "ref_doc_id": "b0257f49-e112-4861-bfb8-474fb390fad4"}, "29914d3f-acf0-460b-98ab-6d6289165fc8": {"doc_hash": "9c490b36e4a0bc7d0aab24a08f7c07e7d57dbf961205706e309d481e7e50b7a7", "ref_doc_id": "a044a92f-441f-428f-9f91-f2da5313204f"}, "e11e4038-8737-4dea-ba7d-281a545652d2": {"doc_hash": "a69cf7be2db293c2feb7051bf28e92303ef52491c98d80c3d2e0d682e49d2a94", "ref_doc_id": "56d519f2-7c7e-490f-ad44-54a26fe746a4"}, "b2c9e4f1-74af-4476-934f-2bbcf383d9cf": {"doc_hash": "4eeec2ec78f6a597780bfdeb8fe098dd9d67e08e9c3673021ce8166cf443995d", "ref_doc_id": "d55f7abd-d443-44cb-803f-5a68e2f6e73b"}, "f1f3c0cf-7927-4a75-9a00-83bc4a36e540": {"doc_hash": "5a5e7f858e6c26584c21654ce951fb3fb9d2b638d3ddd6af66fc11755a243983", "ref_doc_id": "90ea49db-900a-4824-aef7-c67a8c34707c"}, "7258546d-4e12-450c-b444-4675cc0f79db": {"doc_hash": "bbee5ee651aaf4916fec7d59c0cbe47572e394daba3b63740f681b5777e7d466", "ref_doc_id": "cb868661-fd11-4c68-a340-4363e90367a1"}, "e10437fb-efb5-4524-ad2a-2811bfd84c92": {"doc_hash": "0c1ee64cd53c9209470ea47097853f61b1aa49fe28b3a6aaf7d50b01034f6804", "ref_doc_id": "84c33698-b790-4977-8f95-6eaee7854d3f"}, "f98b20cb-c04d-4194-a6bf-dae807cd2f4a": {"doc_hash": "2519e2fd00f6cd124fd3eacf7748c8e4d0109a1ee2ba26d8ed0b063daa331525", "ref_doc_id": "05b3e958-994b-41da-8ef5-f29003b413bf"}, "ce64fd7a-4074-4a8b-b9d1-ed8eb88143d9": {"doc_hash": "d395caf754addd9ad93cedbdb33801cad2c94c958ff77107824451fb6cb4e2ba", "ref_doc_id": "5596d08c-7bde-4e05-8c6a-8da290e67b7a"}, "2b0186c8-0f93-4824-99cc-14b51bac3cd2": {"doc_hash": "8f9d7961baf3de31d550d5fbb24317d8e7faee8cf08d7dc34331dd0b5a744fd8", "ref_doc_id": "4743f1da-433f-4c34-9421-1cf7c3948fa0"}, "f36338a7-f6f4-483f-b26a-d555d66df974": {"doc_hash": "ec28690ba453d58335005c313bad4b85ddc48f899a1f0ea03532eef416cee0b6", "ref_doc_id": "0f21494e-088e-46a1-9c3f-a6029caee0ff"}, "27680958-bed1-453d-86d8-073b86cb3433": {"doc_hash": "bd76244342729cb48c6d7d81d94e15c68a003929551354837f4b55e975ef609a", "ref_doc_id": "4317750e-55c1-4905-9ee3-d570e0e22ee7"}, "95aaf8d7-cbc2-475d-b4f8-407b54a5f66f": {"doc_hash": "560bb318197b81eaa9326e8f9f3b64b75596a1c4f302b0f818179019382f7e81", "ref_doc_id": "9ba135d8-e951-4715-95b9-b467c002e44b"}, "1be2740c-26fd-4d2d-b00c-45c6294a5a19": {"doc_hash": "dc83110defe13df8ffcd7a2e5e2eacc2b72ec49066a9e78bf6f796581a596eeb", "ref_doc_id": "827766e5-4f50-4930-92be-2629414d5325"}, "f74e0455-a4c5-4466-abe0-58ecff1466c6": {"doc_hash": "f9175c28684afee6ef281d1bb44a3c9f285b2f68cdf1548d1d5d4ed150a8f87d", "ref_doc_id": "48de5a68-99fd-4110-b7a0-48cb3cba695d"}, "911ba0a3-8f01-4363-ae31-1265450030f4": {"doc_hash": "3f05e3810d3bbf416280605754360397a2ba29c7a5ff8e6cf99780edcd06c577", "ref_doc_id": "da0c0f2c-5bd3-433e-aa19-674781f651bc"}, "a2a1b654-143d-4635-b0cb-9b59bbe2de5c": {"doc_hash": "df58adb8ae583c07c30892263583e2e97cca01782e2614e845d08415515642f4", "ref_doc_id": "c372b535-fcd1-448e-abd2-a09dfb229797"}, "8f469e2d-460a-418e-8ef7-7f9bcc480a1c": {"doc_hash": "f0e415f2cc4bc01bf270e061c1c3e8365a1bc4e19cb5756d5d21594f43697947", "ref_doc_id": "76a4bbe3-94c5-4050-a476-9388ccc8ff90"}, "9fdfa0bd-fa34-410a-8504-1cdf1a01d8a0": {"doc_hash": "70511432cedfc806a7609e26b2d9afe41bbc6fc973b7b2647c227a506849ca75", "ref_doc_id": "5f8ffbd8-6012-401a-aa72-42b96b933cef"}, "42aef016-adcd-42e2-a5ad-48445154a001": {"doc_hash": "759b339af324ef24b3cf10de6428f1a89d040a0023e0e98118a742c4084f3039", "ref_doc_id": "c8226cc3-0a64-4e0a-b868-5237714438a2"}, "36778d58-2ea3-4205-bf8b-8326a7e38971": {"doc_hash": "65dc996fc30c52bb21eba201b263c2c0f77e7f0e47404d6058dfed19efdc0815", "ref_doc_id": "c8226cc3-0a64-4e0a-b868-5237714438a2"}, "df18c2f1-f89f-4ad3-b743-2b5933503c4e": {"doc_hash": "ed75f0054d79f5a19051fd16dc7727aba158bb30ef99cb547fc5dc6abf3d8e74", "ref_doc_id": "c8226cc3-0a64-4e0a-b868-5237714438a2"}, "79343434-edd8-4bf0-8f20-b77f4ba8fa30": {"doc_hash": "14a869157b12b416745eb6b415121f870a8690a636eedec894eaa1ab98759df6", "ref_doc_id": "22d13e0a-9f7b-4712-a400-737f3bfaf4be"}, "728850a6-1410-4556-8417-9476e8bc99fe": {"doc_hash": "8f82097ceecca0873f06d69bcbb69f95d926e0f27189ac0536c05103e8fc7828", "ref_doc_id": "25b4ef3e-71cc-4b7a-be67-5abbeeee9005"}, "f6d92174-0bf4-46e1-bb36-5cbc1fe82507": {"doc_hash": "d8624cbd9b0a5b20bcffc83e2f181f3f0e4ff6c1b14a923c784fa969b3bffdd8", "ref_doc_id": "25b4ef3e-71cc-4b7a-be67-5abbeeee9005"}, "804a0f55-e85d-427f-a7a3-4ed40fa0cabd": {"doc_hash": "1245bc467ee51e38e327298c6d507f212a34e535c6831defbd68dc0450293143", "ref_doc_id": "25b4ef3e-71cc-4b7a-be67-5abbeeee9005"}, "983c9aa1-4fa6-4cfd-8d60-5869e01d4ae1": {"doc_hash": "6232352d73fc7048d94c1d7969609054d0efeedf6cc4aa7098a03694089a264a", "ref_doc_id": "25b4ef3e-71cc-4b7a-be67-5abbeeee9005"}, "9f12b27d-29be-4a77-a48b-82ece5eb8816": {"doc_hash": "0d62266bc458172c4b312422b1f23f450f17328b312036b2838024258d9346f2", "ref_doc_id": "f4b7b610-7ef4-4e02-8fca-2470625ba5bc"}, "6fa5e994-9f8d-4ca1-8ce9-1a02e18b1033": {"doc_hash": "f09867691ae4c801f827a4ccdaa435754acdf9bd07100dea69aedb9b573e22a2", "ref_doc_id": "c04e1875-a8cf-4d86-a82a-2647e13a4176"}, "77f89aae-4eba-4bf7-8f78-ae7614f409a6": {"doc_hash": "8050e7b2266f0a163e93242e389cf6c2fee516b8f73288e7426893e68b4955c1", "ref_doc_id": "d541a4a7-5460-4a1d-8249-0db167b6d95c"}, "e5ecbf67-9aae-45f4-a070-012d4e1f310e": {"doc_hash": "d59fda35c5b79d912838ea67bccdd4f0911a640c46e910255e2f26f9179b1ff6", "ref_doc_id": "d541a4a7-5460-4a1d-8249-0db167b6d95c"}, "54c2468c-d9e6-41b6-a8ad-28f50fa0e174": {"doc_hash": "61c14c3e30daa9308e195053be668d298b4911641d485f09251d59b8b3f94ee0", "ref_doc_id": "d541a4a7-5460-4a1d-8249-0db167b6d95c"}, "429e9770-629d-40d0-909a-8972c203b513": {"doc_hash": "0d576db48ef0e4d1111f6e22ce4abf464fe76045a4c8a6d7d5d00b51f80f1b3e", "ref_doc_id": "d541a4a7-5460-4a1d-8249-0db167b6d95c"}, "69328b41-9b3e-47f1-9a56-9cc09ad20c9a": {"doc_hash": "5268f07be3f9a547f8055e5d218a95ab7ed928da72a93a3da79949aca1d7c33a", "ref_doc_id": "2644d1c7-6ce9-4d01-af17-ac7b191cd05c"}, "2db521f5-9178-4502-b2db-92681232d208": {"doc_hash": "3e645086cca2211043de838b7198e8f40e988953abab26b840927efdd97f6634", "ref_doc_id": "2644d1c7-6ce9-4d01-af17-ac7b191cd05c"}, "31ab483f-0dae-4cf7-885b-2d69876692eb": {"doc_hash": "4a2b9a66ef833b96d671d2c175a49b4561d2159a62f2a94c89e820d7da53e204", "ref_doc_id": "2644d1c7-6ce9-4d01-af17-ac7b191cd05c"}, "3c190d5b-e6ab-48ee-97e0-a6d3428f47cd": {"doc_hash": "7275e17815fce7b72eb5745e3868cfd40f3ce955b4d90fa6a8ac9e5cbcf829ec", "ref_doc_id": "2644d1c7-6ce9-4d01-af17-ac7b191cd05c"}, "0f1477e7-cadb-4519-ad12-0bc603f243f2": {"doc_hash": "c58dbde16eda973367df3525882474d5980d3f2a01c3721ec95feb99f1d140be", "ref_doc_id": "9917d25f-43a0-4ee1-b5c3-d477d9136d5f"}, "ec03a0ec-828d-45de-a39a-d847e02b62dd": {"doc_hash": "584d8ac8cf88cb0fed7d6431da43c27f83fc3a95299941a4f5ce50ec30c8cba9", "ref_doc_id": "9917d25f-43a0-4ee1-b5c3-d477d9136d5f"}, "398579eb-45ed-449f-8b59-204ac95071bc": {"doc_hash": "9c99a019f0dc4f3f32fcf20645e3ebe88d3c17840e8399e50c7b70f47f02bc07", "ref_doc_id": "9917d25f-43a0-4ee1-b5c3-d477d9136d5f"}, "c856149a-cc64-4488-beb9-2ee5385dc28e": {"doc_hash": "495293da6e3258c84701daa27b031b1332032bd5b297b70613ad8946de32c1c2", "ref_doc_id": "a13d9783-402d-4078-b816-4831a1f153f4"}, "b07ded90-5e37-4e46-8b62-8ab6c0c94c2e": {"doc_hash": "80d538db42bf30420dd7a6853097d6ac64ba3c60398e1256cba31d86350ddf4a", "ref_doc_id": "a13d9783-402d-4078-b816-4831a1f153f4"}, "16397f06-5adc-48f1-9ef3-878611fc17cf": {"doc_hash": "94ba5ffc9b446384be4dfae6d8879aa3c0a1255b3132088732982e3be04f5971", "ref_doc_id": "a13d9783-402d-4078-b816-4831a1f153f4"}, "21efd7ab-4966-41c2-8e23-e538f89d41ab": {"doc_hash": "3af901e7b0f0a9c8938aecebf0210b9e8f593112f7e0585d3e843acc5d02d1a6", "ref_doc_id": "a13d9783-402d-4078-b816-4831a1f153f4"}, "27ccbc56-b304-4c15-a30f-4735a76b7cfd": {"doc_hash": "49aa91abe2cc93e777475dfa3181e73c96e366fd5c788f7a638c28c83b13cbee", "ref_doc_id": "a13d9783-402d-4078-b816-4831a1f153f4"}, "7f5f96e5-bdf5-4b56-bbd8-65578e23e465": {"doc_hash": "8c6dad057694db5478aa45c8db4251c199a22be45b56d24e314640866aa6f7d8", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "b43ef22e-9919-49b8-b6b1-a9619b9903ef": {"doc_hash": "a4f80237a9fb74575d4adcc50a48b703c295b038c8de6609047d8769a0e0cd9b", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "503878b1-b78c-4526-bb82-614d22931bf6": {"doc_hash": "c8dbbd146aadd2cff3ef6ea1ad233258f509e6e3cf3455b8e61bcadc3920891a", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "c6f21701-8d6f-426c-9372-10a3d4ce54b1": {"doc_hash": "09a37322444ee9d3a80ea24c102355b37f0d63ab43a1a7eab1ef8dd052406cf6", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "08a916ae-e944-47e5-9cf5-2919b7cca590": {"doc_hash": "8e0f21c926bc6160320a572e1133f162e5f00fb8d2fdda98976d791ead0ce734", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "a0359406-e71f-429c-bb71-1df0cb80e22f": {"doc_hash": "2415dcf12e81a1ebbef33e58076e4fe056667420db2908e108d4a3051396ccd3", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "f43da00c-d2e2-4c1b-a778-629c8833e404": {"doc_hash": "f3c2522442f9b602d3365e91b57dc15fa0e1ea1a9d543b43689302ecfff2d92e", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "2698cf39-50a1-4f80-9795-c1ef1d225c15": {"doc_hash": "8f63ac28fe504d94f80e6a93e336cb0208925a31e16e8a33cc5845a314a54978", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "329a9921-9647-4add-8b58-1993b961d2d4": {"doc_hash": "28a9388afc57afcbdfeb8e95c535b03217b0ea152c03268452bf5b30c5bbeb0c", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "48247c5b-3f98-4ccf-9982-828858b0daca": {"doc_hash": "0e59d965779bf4cf629dc6df7a6b97719c97468cc7e25e246216b2976da8d910", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "052410bf-11cf-413d-9350-45e100493458": {"doc_hash": "2219a3ac585cc851706027ea7772fdb9bdcd38506b3388c4c2a6d5ba8e5c4671", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "a0c8717c-5f4a-458e-aa18-bdd230ac377d": {"doc_hash": "dd25f8f4004dcd0cc9c9bcaa13fd2293d1c6e9767c818f30dac503bcf9bd4d41", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "6ff1fc9b-3f26-4966-894b-77dc7310bf83": {"doc_hash": "83267438c343ad4e9a68a481958c8d4e66c59e4ca9ba935a6da95824414361ec", "ref_doc_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3"}, "a710c582-a75f-4342-b692-691992df3047": {"doc_hash": "506d01855d155eff200afb0c48e0c8d07459c2afe0c149e50b567de0f3bb9e87", "ref_doc_id": "cec080e9-c8d0-431f-989d-23ec9ea0ae1d"}, "32e5b683-29ff-4c58-8b18-4558097b8c5a": {"doc_hash": "0c3744ccfd1b63a3704411c63ab2d60653c874e14fadeeb29f8dff6fdb890036", "ref_doc_id": "cec080e9-c8d0-431f-989d-23ec9ea0ae1d"}, "47df42bf-63f7-432e-b008-b125aa668eef": {"doc_hash": "03b954d1d9ac1533036b38d31e216c9d2066d91f70f82679b21f7389241449d4", "ref_doc_id": "cec080e9-c8d0-431f-989d-23ec9ea0ae1d"}, "cd661251-9ee7-4a68-88dc-869d86da1bdd": {"doc_hash": "a8027dfaca3cecca994eb3525e55ed61f7792a15a98f38e961094e32c2661475", "ref_doc_id": "0e40ed3c-0e3f-420c-b119-ff19a9e72377"}, "d192b257-7629-451c-b9df-8923c88e1d2b": {"doc_hash": "9772179310cf792e8a53b367267702c078a6708a80b421c44b34fdcc21fac442", "ref_doc_id": "d14c07be-ee62-4563-b788-17ba9ca74f16"}, "34663da8-a83e-4308-88d0-2424f92ac408": {"doc_hash": "5abb1074a9941383d8683396fe8df7f176b905920dd59a539165fff0b79082c4", "ref_doc_id": "05385150-776b-41cc-a760-dfd3b7cc310a"}, "751fe680-414f-4359-a8a5-41bd1fd2b263": {"doc_hash": "81a049d727cb411843ce93208cba96d38a29692df67329e40adf73c1b723eb94", "ref_doc_id": "aedef508-28e9-438e-aab5-99be37412391"}, "0f764df7-ac71-4cf7-91e4-470b6bf3a09e": {"doc_hash": "652e254006c2b6c1ca319906a3a0bd23c59481b4f6f013ee0700a9402fbdd1f3", "ref_doc_id": "0d53d26f-547d-42c8-b117-299aa9143461"}, "84ce6ea1-7dad-49cc-94f2-3f6800416163": {"doc_hash": "5fbbabe525bbdda2c73ee1c713ad97e1518832e9e237bef48157ee4d5602c68d", "ref_doc_id": "708a68d5-984e-4496-8dd0-da43c444d52c"}, "8e644406-189b-4f4f-9a47-7ab1b064095e": {"doc_hash": "a4f9ac8341188767ccc2daf8312c3457fc82c8304bbceae658a8892c079c364e", "ref_doc_id": "9a8d09c3-d561-43b9-b6ab-34c2160444d9"}, "66a12722-8bfc-4a7d-b824-a0c23537a9ef": {"doc_hash": "998333c946e3c5379cd96a68ce5710bb8333ab0117e0c376313a1ed90f2bcec7", "ref_doc_id": "dc2be6b3-8f35-41c8-8b35-befeae7756cb"}, "fb5a13dd-d377-4665-bbe7-e63fd9b9dd9e": {"doc_hash": "20edeb18cb7c8fe4c8f1a073d8c3adf4241623a2b8f63aff75016d3c9542aa3b", "ref_doc_id": "c2993c21-3fed-4de7-afbd-9be511e534f3"}, "004ce44d-48f6-415b-8471-dca9012ad218": {"doc_hash": "1d9f2397320d8903a44a8df84ac6c278c28f3e92740109d6dfde27333d546d3b", "ref_doc_id": "6a6142c5-8131-4024-96d3-9863b6c08bec"}, "2f6dc7f4-9eeb-4876-a3e3-3c8cd1a63e1b": {"doc_hash": "c28d7c091ed709352b0961aaddc64ae4b27bd3d92e35b987e913c801b9aa46a8", "ref_doc_id": "7558e218-47b8-4b1c-9be0-063616ac6348"}, "d006e5a2-bf4e-494f-9ffc-7275ef0dabbf": {"doc_hash": "fdcda437d7a4dede9593b88fde8df24235735391ac6b2d0c6cb5f7176051f6a7", "ref_doc_id": "545bba30-3ed3-40f2-ac36-d837fceee1ca"}, "1a29c0eb-034d-458d-acc3-cf4b93ce6ffc": {"doc_hash": "4541bff4b808b9f44dd9147c607eed7573aacbadbd8c743b7488414680024816", "ref_doc_id": "1ba3d028-7243-44c9-8ef1-bc76a925dbc6"}, "018c3522-e01b-42c5-9dd3-218365b34b45": {"doc_hash": "7cd5a47a2af1fde4090311c580e00e57374e87b63f4caa4d82ab9464fad297bb", "ref_doc_id": "a6741340-c853-4b72-a5c4-615aa44aeab9"}, "a0b21ae6-3417-4087-9eb4-69857c3ffb99": {"doc_hash": "3ac4d1fce74c5e31d183365a7883bb9c69304c928da250e35aa7c42f0b7646e6", "ref_doc_id": "48a6b96b-effb-488d-a8c5-aa815f49bf05"}, "929e9223-f8b6-4e7d-a90a-39809cbcb8c0": {"doc_hash": "0a6ecb7268d6d58d9f55fa44451fc3740cf36b87db54ff52ead49aab01fef475", "ref_doc_id": "0968c81a-248f-4fb2-80b2-81c390661417"}, "361829a8-9266-42ea-b01a-984eea873335": {"doc_hash": "2b498874cf99e0637bfcc61854428e819cda97e25b88c525909dd6873ba7406f", "ref_doc_id": "1308f019-4225-42b3-94e9-fe8befbc515e"}, "7f65a7b1-8fad-40b3-a99b-42652e0e1c01": {"doc_hash": "09827a56a2c732c1d571826e87657a1c34cc8674a374920ffc0d061b9304cf73", "ref_doc_id": "d83aec58-70fe-484f-9049-3aa49a98d006"}, "986d4480-1a8f-4340-8ae9-a5145a94393e": {"doc_hash": "8ba8fcff38a17faead48ad0f49b02e8f6c0c555472917d6aebf46ca92b99fea6", "ref_doc_id": "2ff72e13-0574-403d-b81e-57c53a6bc8d9"}, "505fb363-ff87-4d6d-94bf-8f37176971d0": {"doc_hash": "b8d5170e26c8eccfb6ca83e50c25e371d8fdf22fbfd8fbab089eea8e3ad4e07c", "ref_doc_id": "f8d24fdb-b9f0-43fa-96da-c46220caa262"}, "6c4ac433-49f0-4ffd-b82d-e2ae73782dac": {"doc_hash": "9941409528856170617cf26f776faa6409607f5f17e81d23f31c3c633f4ebb11", "ref_doc_id": "22747c5f-473f-43ea-ac41-798562f8c1f6"}, "71b70b28-f0f0-4a20-889b-358a60e4b72b": {"doc_hash": "440fda9bf12d4373b2df26cc71971bf82ea489702ae8c7c7da7964880229876f", "ref_doc_id": "cef774c6-9dbb-401c-b1dc-70e11384c6ee"}, "1dbf06d6-2242-47ed-9c20-5196541d4836": {"doc_hash": "203ab683a864a82eede61ad07140fc8850073a7b45ee211098d4b09eae7c66cc", "ref_doc_id": "bb688433-7af5-49d0-9d1c-6640f858276d"}, "33f5f24f-6565-403f-a297-e8a94fb2e7f6": {"doc_hash": "45b0548b79d02e91a709d41847418deb7801b913d379b4a5edd076882a89ad42", "ref_doc_id": "d9b7b290-56c6-4e43-ba15-79cf250330e9"}, "d494ef34-867e-44a8-9eed-9e46a386c43a": {"doc_hash": "b0595ffd4820b8d5b5b9a95ee6c9a50c5e948699aa78d005f387ddea05618ec4", "ref_doc_id": "207f3aa4-27ec-4b55-b464-7ed2ba286e54"}, "3f16f1da-16eb-4941-9aae-76c6d831ba07": {"doc_hash": "82ea0f5ec4166b44a6aabb2abdb2e1259e650b82980a3d1d64d7dbfb902b236c", "ref_doc_id": "a6861b74-8d75-4938-b604-85765b05dadc"}, "b5d4400f-1565-4d01-922f-68c062f3b99b": {"doc_hash": "2b9aab2aa9c7a5c75ecf480c7e151924b46c8ca49a532027c6805c5da081e5b8", "ref_doc_id": "30d25159-9824-47a6-a476-2bb144e2c4e1"}, "399126e7-3009-4c3f-8483-ade3941ab380": {"doc_hash": "37d8f46028f48ca5e16801467173f11ceef5379b1cba3d519e624af7f3728cec", "ref_doc_id": "ad5005c6-81de-491b-8089-80871a922190"}, "88f88d54-a619-4822-a9f2-26a904a003d7": {"doc_hash": "eca75dd7686741797cdd9fea39bf423e9fca90edc07e643973b37b9ea937b743", "ref_doc_id": "17e7120b-3188-4f13-841f-7ec72f8998bd"}, "db4232db-ed30-45e9-a035-ec03a92f959e": {"doc_hash": "7d3f955cb8d004e8d33dd9e3d3dee9930e7b57a0585f15b21e299b347769057f", "ref_doc_id": "7f05c25d-af1d-48b6-acf4-e43e8faa6455"}, "7a7968a1-7cb4-4111-aef1-8fc69df0ce71": {"doc_hash": "d65d3ee8f5a950a498a21c4bde3e0cbf92a9a683e18bebe3b1bf5a27b4050f36", "ref_doc_id": "513524c6-b3eb-4f9e-bab1-a867015a1e4b"}, "db36f4a8-5d7a-47d2-96af-8a339152268b": {"doc_hash": "3638dad337964c215183aa424c76141ad90f721462dad9fae7f53c35f8050ccb", "ref_doc_id": "70343630-4b8c-437b-85f7-4757c6558ab3"}, "ed044614-7a10-40a5-9155-c4b9c90f1e80": {"doc_hash": "d62c7ebdee25c4533885139f50437998c5d0ea5a5bd8d98a47b6ea78ac3eaed4", "ref_doc_id": "70343630-4b8c-437b-85f7-4757c6558ab3"}, "8421860d-d9a1-4c9d-ac33-71d8ab0e01ac": {"doc_hash": "b858da99b8db977d909e3ec857f86b38a16f8b024cda255f313e069261a663f2", "ref_doc_id": "8d6220e4-1b04-43ea-981c-9f9d2c15cf4e"}, "516ec679-13fd-4a3d-a85e-e92fa0b80136": {"doc_hash": "b1d0bb6e6dce6b78610f1e272f69197457bb38629be3588e343ded5ccc97ca13", "ref_doc_id": "90347410-a2c1-450b-aeef-77213ccc017e"}, "ffd0d2c2-bac6-43e0-bdf7-b566b5c723bf": {"doc_hash": "32a27f6aec074769e04da1b58e5365250be65afc5585f63e9e6e739299c37b75", "ref_doc_id": "241cb01c-8235-45f6-b1b6-d04048f7e7e9"}}, "docstore/data": {"16789de3-0647-404f-962a-4c8fc64b3d2e": {"__data__": {"id_": "16789de3-0647-404f-962a-4c8fc64b3d2e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/01-overview.md", "file_name": "01-overview.md", "file_size": 968, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abefcd14-4f0e-4481-ae18-3ed3a5649ee5", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/01-overview.md", "file_name": "01-overview.md", "file_size": 968, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "7defc127940803f6a7ddde713e44d3afc1e8d39a549fd1d8f0c4c44cdc67230b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Overview\n---\n\nSvelte is a framework for building user interfaces on the web. It uses a compiler to turn declarative components written in HTML, CSS and JavaScript...\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tfunction greet() {\n\t\talert('Welcome to Svelte!');\n\t}\n</script>\n\n<button onclick={greet}>click me</button>\n\n<style>\n\tbutton {\n\t\tfont-size: 2em;\n\t}\n</style>\n```\n\n...into lean, tightly optimized JavaScript.\n\nYou can use it to build anything on the web, from standalone components to ambitious full stack apps (using Svelte's companion application framework, [SvelteKit](../kit)) and everything in between.\n\nThese pages serve as reference documentation. If you're new to Svelte, we recommend starting with the [interactive tutorial](/tutorial) and coming back here when you have questions.\n\nYou can also try Svelte online in the [playground](/playground) or, if you need a more fully-featured environment, on [StackBlitz](https://sveltekit.new).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 967, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55484d02-0725-4420-b96d-5d160c4b938a": {"__data__": {"id_": "55484d02-0725-4420-b96d-5d160c4b938a", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/02-getting-started.md", "file_name": "02-getting-started.md", "file_size": 1582, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0621f6db-62c4-4ee2-93c2-5a2f61ea2cdc", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/02-getting-started.md", "file_name": "02-getting-started.md", "file_size": 1582, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "957a606675f3c68d593aa0d8943f362936248fbcb0d493641a2dccf2892e18cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Getting started\n---\n\nWe recommend using [SvelteKit](../kit), the official application framework from the Svelte team powered by [Vite](https://vite.dev/):\n\n```bash\nnpx sv create myapp\ncd myapp\nnpm install\nnpm run dev\n```\n\nDon't worry if you don't know Svelte yet! You can ignore all the nice features SvelteKit brings on top for now and dive into it later.\n\n## Alternatives to SvelteKit\n\nYou can also use Svelte directly with Vite by running `npm create vite@latest` and selecting the `svelte` option. With this, `npm run build` will generate HTML, JS and CSS files inside the `dist` directory using [vite-plugin-svelte](https://github.com/sveltejs/vite-plugin-svelte). In most cases, you will probably need to [choose a routing library](faq#Is-there-a-router) as well.\n\nThere are also plugins for [Rollup](https://github.com/sveltejs/rollup-plugin-svelte), [Webpack](https://github.com/sveltejs/svelte-loader) [and a few others](https://sveltesociety.dev/packages?category=build-plugins), but we recommend Vite.\n\n## Editor tooling\n\nThe Svelte team maintains a [VS Code extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode), and there are integrations with various other [editors](https://sveltesociety.dev/resources#editor-support) and tools as well.\n\nYou can also check your code from the command line using [sv check](https://github.com/sveltejs/cli).\n\n## Getting help\n\nDon't be shy about asking for help in the [Discord chatroom](/chat)! You can also find answers on [Stack Overflow](https://stackoverflow.com/questions/tagged/svelte).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1581, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "71816b07-5115-4f82-a7fb-7a1b996d40e4": {"__data__": {"id_": "71816b07-5115-4f82-a7fb-7a1b996d40e4", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/03-svelte-files.md", "file_name": "03-svelte-files.md", "file_size": 2289, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "24034607-b07a-4843-8bcc-d164e05ac876", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/03-svelte-files.md", "file_name": "03-svelte-files.md", "file_size": 2289, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a63d54212a8db3f76d199f6450e5b9ef4981cabb587210058441fa9935a21cb5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: .svelte files\n---\n\nComponents are the building blocks of Svelte applications. They are written into `.svelte` files, using a superset of HTML.\n\nAll three sections \u2014 script, styles and markup \u2014 are optional.\n\n<!-- prettier-ignore -->\n```svelte\n/// file: MyComponent.svelte\n<script module>\n\t// module-level logic goes here\n\t// (you will rarely use this)\n</script>\n\n<script>\n\t// instance-level logic goes here\n</script>\n\n<!-- markup (zero or more items) goes here -->\n\n<style>\n\t/* styles go here */\n</style>\n```\n\n## `<script>`\n\nA `<script>` block contains JavaScript (or TypeScript, when adding the `lang=\"ts\"` attribute) that runs when a component instance is created. Variables declared (or imported) at the top level can be referenced in the component's markup.\n\nIn addition to normal JavaScript, you can use _runes_ to declare [component props]($props) and add reactivity to your component. Runes are covered in the next section.\n\n<!-- TODO describe behaviour of `export` -->\n\n## `<script module>`\n\nA `<script>` tag with a `module` attribute runs once when the module first evaluates, rather than for each component instance. Variables declared in this block can be referenced elsewhere in the component, but not vice versa.\n\n```svelte\n<script module>\n\tlet total = 0;\n</script>\n\n<script>\n\ttotal += 1;\n\tconsole.log(`instantiated ${total} times`);\n</script>\n```\n\nYou can `export` bindings from this block, and they will become exports of the compiled module. You cannot `export default`, since the default export is the component itself.\n\n> [!NOTE] If you are using TypeScript and import such exports from a `module` block into a `.ts` file, make sure to have your editor setup so that TypeScript knows about them. This is the case for our VS Code extension and the IntelliJ plugin, but in other cases you might need to setup our [TypeScript editor plugin](https://www.npmjs.com/package/typescript-svelte-plugin).\n\n> [!LEGACY]\n> In Svelte 4, this script tag was created using `<script context=\"module\">`\n\n## `<style>`\n\nCSS inside a `<style>` block will be scoped to that component.\n\n```svelte\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\nFor more information, head to the section on [styling](scoped-styles).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2284, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5d26632c-ab8c-4f87-9549-ce91a69fde2c": {"__data__": {"id_": "5d26632c-ab8c-4f87-9549-ce91a69fde2c", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/04-svelte-js-files.md", "file_name": "04-svelte-js-files.md", "file_size": 382, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57c9a8ad-e3a5-40cf-8c94-26448ab499d7", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/04-svelte-js-files.md", "file_name": "04-svelte-js-files.md", "file_size": 382, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "4adb8f18f2f291226adc94d893f4bf255bc2b9f5abd0412057834df64c31b635", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: .svelte.js and .svelte.ts files\n---\n\nBesides `.svelte` files, Svelte also operates on `.svelte.js` and `.svelte.ts` files.\n\nThese behave like any other `.js` or `.ts` module, except that you can use runes. This is useful for creating reusable reactive logic, or sharing reactive state across your app.\n\n> [!LEGACY]\n> This is a concept that didn't exist prior to Svelte 5", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 381, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f3fdb99-7c0e-4077-8b97-78a2ee2093d6": {"__data__": {"id_": "5f3fdb99-7c0e-4077-8b97-78a2ee2093d6", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/index.md", "file_name": "index.md", "file_size": 28, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "34efe4bc-c057-460d-a4c8-7a3d286c062a", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/index.md", "file_name": "index.md", "file_size": 28, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "68b74e8e1bfa9f6b1e91c8f976044ff246562b2d89bf7f50378e3b931c2ce05e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Introduction\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 27, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "61fc863a-cdf0-4dba-acaf-7bfd0d7887e8": {"__data__": {"id_": "61fc863a-cdf0-4dba-acaf-7bfd0d7887e8", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-props.md", "file_name": "xx-props.md", "file_size": 3267, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37a0a963-8428-43a8-ab00-8e9ecabe34d9", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-props.md", "file_name": "xx-props.md", "file_size": 3267, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "952cd164450cbb1aacc630f0fd447b0c31e0add1cea64095e027a1ba3ee739e5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Public API of a component\n---\n\n### Public API of a component\n\nSvelte uses the `$props` rune to declare _properties_ or _props_, which means describing the public interface of the component which becomes accessible to consumers of the component.\n\n> [!NOTE] `$props` is one of several runes, which are special hints for Svelte's compiler to make things reactive.\n\n```svelte\n<script>\n\tlet { foo, bar, baz } = $props();\n\n\t// Values that are passed in as props\n\t// are immediately available\n\tconsole.log({ foo, bar, baz });\n</script>\n```\n\nYou can specify a fallback value for a prop. It will be used if the component's consumer doesn't specify the prop on the component when instantiating the component, or if the passed value is `undefined` at some point.\n\n```svelte\n<script>\n\tlet { foo = 'optional default initial value' } = $props();\n</script>\n```\n\nTo get all properties, use rest syntax:\n\n```svelte\n<script>\n\tlet { a, b, c, ...everythingElse } = $props();\n</script>\n```\n\nYou can use reserved words as prop names.\n\n```svelte\n<script>\n\t// creates a `class` property, even\n\t// though it is a reserved word\n\tlet { class: className } = $props();\n</script>\n```\n\nIf you're using TypeScript, you can declare the prop types:\n\n```svelte\n<script lang=\"ts\">\n\tinterface Props {\n\t\trequired: string;\n\t\toptional?: number;\n\t\t[key: string]: unknown;\n\t}\n\n\tlet { required, optional, ...everythingElse }: Props = $props();\n</script>\n```\n\nIf you're using JavaScript, you can declare the prop types using JSDoc:\n\n```svelte\n<script>\n\t/** @type {{ x: string }} */\n\tlet { x } = $props();\n\n\t// or use @typedef if you want to document the properties:\n\n\t/**\n\t * @typedef {Object} MyProps\n\t * @property {string} y Some documentation\n\t */\n\n\t/** @type {MyProps} */\n\tlet { y } = $props();\n</script>\n```\n\nIf you export a `const`, `class` or `function`, it is readonly from outside the component.\n\n```svelte\n<script>\n\texport const thisIs = 'readonly';\n\n\texport function greet(name) {\n\t\talert(`hello ${name}!`);\n\t}\n</script>\n```\n\nReadonly props can be accessed as properties on the element, tied to the component using [`bind:this` syntax](bindings#bind:this).\n\n### Reactive variables\n\nTo change component state and trigger a re-render, just assign to a locally declared variable that was declared using the `$state` rune.\n\nUpdate expressions (`count += 1`) and property assignments (`obj.x = y`) have the same effect.\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\tfunction handleClick() {\n\t\t// calling this function will trigger an\n\t\t// update if the markup references `count`\n\t\tcount = count + 1;\n\t}\n</script>\n```\n\nSvelte's `<script>` blocks are run only when the component is created, so assignments within a `<script>` block are not automatically run again when a prop updates.\n\n```svelte\n<script>\n\tlet { person } = $props();\n\t// this will only set `name` on component creation\n\t// it will not update when `person` does\n\tlet { name } = person;\n</script>\n```\n\nIf you'd like to react to changes to a prop, use the `$derived` or `$effect` runes instead.\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\tlet double = $derived(count * 2);\n\n\t$effect(() => {\n\t\tif (count > 10) {\n\t\t\talert('Too high!');\n\t\t}\n\t});\n</script>\n```\n\nFor more information on reactivity, read the documentation around runes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3266, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0d21569e-bb02-4029-8a82-b1a01ac6bbd9": {"__data__": {"id_": "0d21569e-bb02-4029-8a82-b1a01ac6bbd9", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b385ede5-7310-4432-8cd2-3fd5357b51da", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "64335dfc3d8cb986bc50adc81c1932138f2b4b39302acb61f8d2a35dedcd3540", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d979e5eb-ab3f-4f92-a53b-a77ca8008469", "node_type": "1", "metadata": {}, "hash": "6b669715a77dc72dd1314dc01af77b87559e4fa8816b9b620fae7f3026211f76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Reactivity fundamentals\n---\n\nReactivity is at the heart of interactive UIs. When you click a button, you expect some kind of response. It's your job as a developer to make this happen. It's Svelte's job to make your job as intuitive as possible, by providing a good API to express reactive systems.\n\n## Runes\n\nSvelte 5 uses _runes_, a powerful set of primitives for controlling reactivity inside your Svelte components and inside `.svelte.js` and `.svelte.ts` modules.\n\nRunes are function-like symbols that provide instructions to the Svelte compiler. You don't need to import them from anywhere \u2014 when you use Svelte, they're part of the language.\n\nThe following sections introduce the most important runes for declare state, derived state and side effects at a high level. For more details refer to the later sections on [state](state) and [side effects](side-effects).\n\n## `$state`\n\nReactive state is declared with the `$state` rune:\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count}\n</button>\n```\n\nYou can also use `$state` in class fields (whether public or private):\n\n```js\n// @errors: 7006 2554\nclass Todo {\n\tdone = $state(false);\n\ttext = $state();\n\n\tconstructor(text) {\n\t\tthis.text = text;\n\t}\n}\n```\n\n> [!LEGACY]\n> In Svelte 4, state was implicitly reactive if the variable was declared at the top level\n>\n> ```svelte\n> <script>\n> \tlet count = 0;\n> </script>\n>\n> <button on:click={() => count++}>\n> \tclicks: {count}\n> </button>\n> ```\n\n## `$derived`\n\nDerived state is declared with the `$derived` rune:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n\n<button onclick={() => count++}>\n\t{doubled}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\nThe expression inside `$derived(...)` should be free of side-effects. Svelte will disallow state changes (e.g. `count++`) inside derived expressions.\n\nAs with `$state`, you can mark class fields as `$derived`.\n\n> [!LEGACY]\n> In Svelte 4, you could use reactive statements for this.\n>\n> ```svelte\n> <script>\n> \tlet count = 0;\n> \t$: doubled = count * 2;\n> </script>\n>\n> <button on:click={() => count++}>\n> \t{doubled}\n> </button>\n>\n> <p>{count} doubled is {doubled}</p>\n> ```\n>\n> This only worked at the top level of a component.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2288, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d979e5eb-ab3f-4f92-a53b-a77ca8008469": {"__data__": {"id_": "d979e5eb-ab3f-4f92-a53b-a77ca8008469", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b385ede5-7310-4432-8cd2-3fd5357b51da", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "64335dfc3d8cb986bc50adc81c1932138f2b4b39302acb61f8d2a35dedcd3540", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d21569e-bb02-4029-8a82-b1a01ac6bbd9", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "4ae1f0b952e65494af9f80c4ea1a7490710077d551726b6f86bfdc890ffe7639", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a8a5729b-503c-4c1f-84e6-7ea719a05ffc", "node_type": "1", "metadata": {}, "hash": "577ab5d3dc2f411119e112676c987557305be9a32109de7155ee4e82d463d62f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Svelte will disallow state changes (e.g. `count++`) inside derived expressions.\n\nAs with `$state`, you can mark class fields as `$derived`.\n\n> [!LEGACY]\n> In Svelte 4, you could use reactive statements for this.\n>\n> ```svelte\n> <script>\n> \tlet count = 0;\n> \t$: doubled = count * 2;\n> </script>\n>\n> <button on:click={() => count++}>\n> \t{doubled}\n> </button>\n>\n> <p>{count} doubled is {doubled}</p>\n> ```\n>\n> This only worked at the top level of a component.\n\n## `$effect`\n\nTo run _side-effects_ when the component is mounted to the DOM, and when values change, we can use the `$effect` rune ([demo](/playground/untitled#H4sIAAAAAAAAE31T24rbMBD9lUG7kAQ2sbdlX7xOYNk_aB_rQhRpbAsU2UiTW0P-vbrYubSlYGzmzMzROTPymdVKo2PFjzMzfIusYB99z14YnfoQuD1qQh-7bmdFQEonrOppVZmKNBI49QthCc-OOOH0LZ-9jxnR6c7eUpOnuv6KeT5JFdcqbvbcBcgDz1jXKGg6ncFyBedYR6IzLrAZwiN5vtSxaJA-EzadfJEjKw11C6GR22-BLH8B_wxdByWpvUYtqqal2XB6RVkG1CoHB6U1WJzbnYFDiwb3aGEdDa3Bm1oH12sQLTcNPp7r56m_00mHocSG97_zd7ICUXonA5fwKbPbkE2ZtMJGGVkEdctzQi4QzSwr9prnFYNk5hpmqVuqPQjNnfOJoMF22lUsrq_UfIN6lfSVyvQ7grB3X2mjMZYO3XO9w-U5iLx42qg29md3BP_ni5P4gy9ikTBlHxjLzAtPDlyYZmRdjAbGq7HprEQ7p64v4LU_guu0kvAkhBim3nMplWl8FreQD-CW20aZR0wq12t-KqDWeBywhvexKC3memmDwlHAv9q4Vo2ZK8KtK0CgX7u9J8wXbzdKv-nRnfF_2baTqlYoWUF2h5efl9-n0O6koAMAAA==)):\n\n```svelte\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// this will re-run whenever `color` or `size` change\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\" />\n```\n\nThe function passed to `$effect` will run when the component mounts, and will re-run after any changes to the values it reads that were declared with `$state` or `$derived` (including those passed in with `$props`). Re-runs are batched (i.e. changing `color` and `size` in the same moment won't cause two separate runs), and happen after any DOM updates have been applied.\n\n> [!LEGACY]\n> In Svelte 4, you could use reactive statements for this.", "mimetype": "text/plain", "start_char_idx": 1832, "end_char_idx": 3942, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a8a5729b-503c-4c1f-84e6-7ea719a05ffc": {"__data__": {"id_": "a8a5729b-503c-4c1f-84e6-7ea719a05ffc", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b385ede5-7310-4432-8cd2-3fd5357b51da", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "64335dfc3d8cb986bc50adc81c1932138f2b4b39302acb61f8d2a35dedcd3540", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d979e5eb-ab3f-4f92-a53b-a77ca8008469", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "1666ffb8a962b3f7e10e743b330b78f2a2f2c1f456547f2e2698fbebdf3c76f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Re-runs are batched (i.e. changing `color` and `size` in the same moment won't cause two separate runs), and happen after any DOM updates have been applied.\n\n> [!LEGACY]\n> In Svelte 4, you could use reactive statements for this.\n>\n> ```svelte\n> <script>\n> \tlet size = 50;\n> \tlet color = '#ff3e00';\n>\n> \tlet canvas;\n>\n> \t$: {\n> \t\tconst context = canvas.getContext('2d');\n> \t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n>\n> \t\t// this will re-run whenever `color` or `size` change\n> \t\tcontext.fillStyle = color;\n> \t\tcontext.fillRect(0, 0, size, size);\n> \t}\n> </script>\n>\n> <canvas bind:this={canvas} width=\"100\" height=\"100\" />\n> ```\n>\n> This only worked at the top level of a component.", "mimetype": "text/plain", "start_char_idx": 3714, "end_char_idx": 4408, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4373fa74-bf9c-4083-8313-5beaa19fac5a": {"__data__": {"id_": "4373fa74-bf9c-4083-8313-5beaa19fac5a", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/01-what-are-runes.md", "file_name": "01-what-are-runes.md", "file_size": 854, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86d9f2df-6f80-4203-95e3-3a929ac9d6d9", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/01-what-are-runes.md", "file_name": "01-what-are-runes.md", "file_size": 854, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "d5f91634b10880b6df15283e16aec0cf6b3997aee2a07234f02c90c90eacaae7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: What are runes?\n---\n\n> [!NOTE] **rune** /ro\u035eon/ _noun_\n>\n> A letter or mark used as a mystical or magic symbol.\n\nRunes are symbols that you use in `.svelte` and `.svelte.js`/`.svelte.ts` files to control the Svelte compiler. If you think of Svelte as a language, runes are part of the syntax \u2014 they are _keywords_.\n\nRunes have a `$` prefix and look like functions:\n\n```js\nlet message = $state('hello');\n```\n\nThey differ from normal JavaScript functions in important ways, however:\n\n- You don't need to import them \u2014 they are part of the language\n- They're not values \u2014 you can't assign them to a variable or pass them as arguments to a function\n- Just like JavaScript keywords, they are only valid in certain positions (the compiler will help you if you put them in the wrong place)\n\n> [!LEGACY]\n> Runes didn't exist prior to Svelte 5.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 846, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a14fac7f-d818-48e7-875f-973b7fc22ac9": {"__data__": {"id_": "a14fac7f-d818-48e7-875f-973b7fc22ac9", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e08fd715-cc2e-4356-95b4-45b2414c29b1", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "94c9e1de88e990d1a4bde7ffa6de2b15f9e2d91e857f3bf1939751d719e0896a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f4d0576-5183-4feb-94a6-05f4bead1184", "node_type": "1", "metadata": {}, "hash": "bdb0ce57c879b11cb29bde6942727fabf48f8b0ad065b473a867d6a1f7a80e19", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $state\n---\n\nThe `$state` rune allows you to create _reactive state_, which means that your UI _reacts_ when it changes.\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count}\n</button>\n```\n\nUnlike other frameworks you may have encountered, there is no API for interacting with state \u2014 `count` is just a number, rather than an object or a function, and you can update it like you would update any other variable.\n\n### Deep state\n\nIf `$state` is used with an array or a simple object, the result is a deeply reactive _state proxy_. [Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) allow Svelte to run code when you read or write properties, including via methods like `array.push(...)`, triggering granular updates.\n\n> [!NOTE] Classes like `Set` and `Map` will not be proxied, but Svelte provides reactive implementations for various built-ins like these that can be imported from [`svelte/reactivity`](./svelte-reactivity).\n\nState is proxified recursively until Svelte finds something other than an array or simple object. In a case like this...\n\n```js\nlet todos = $state([\n\t{\n\t\tdone: false,\n\t\ttext: 'add more todos'\n\t}\n]);\n```\n\n...modifying an individual todo's property will trigger updates to anything in your UI that depends on that specific property:\n\n```js\nlet todos = [{ done: false, text: 'add more todos' }];\n// ---cut---\ntodos[0].done = !todos[0].done;\n```\n\nIf you push a new object to the array, it will also be proxified:\n\n```js\nlet todos = [{ done: false, text: 'add more todos' }];\n// ---cut---\ntodos.push({\n\tdone: false,\n\ttext: 'eat lunch'\n});\n```\n\n> [!NOTE] When you update properties of proxies, the original object is _not_ mutated.\n\nNote that if you destructure a reactive value, the references are not reactive \u2014 as in normal JavaScript, they are evaluated at the point of destructuring:\n\n```js\nlet todos = [{ done: false, text: 'add more todos' }];\n// ---cut---\nlet { done, text } = todos[0];\n\n// this will not affect the value of `done`\ntodos[0].done = !todos[0].done;\n```\n\n### Classes\n\nYou can also use `$state` in class fields (whether public or private):\n\n```js\n// @errors: 7006 2554\nclass Todo {\n\tdone = $state(false);\n\ttext = $state();\n\n\tconstructor(text) {\n\t\tthis.text = text;\n\t}\n\n\treset() {\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n> [!NOTE] The compiler transforms `done` and `text` into `get`/`set` methods on the class prototype referencing private fields. This means the properties are not enumerable.\n\nWhen calling methods in JavaScript, the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) matters. This won't work, because `this` inside the `reset` method will be the `<button>` rather than the `Todo`:\n\n```svelte\n<button onclick={todo.reset}>\n\treset\n</button>\n```\n\nYou can either use an inline function...\n\n```svelte\n<button onclick=+++{() => todo.reset()}>+++\n\treset\n</button>\n```\n\n...or use an arrow function in the class definition:\n\n```js\n// @errors: 7006 2554\nclass Todo {\n\tdone = $state(false);\n\ttext = $state();\n\n\tconstructor(text) {\n\t\tthis.text = text;\n\t}\n\n\t+++reset = () => {+++\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n## `$state.raw`\n\nIn cases where you don't want objects and arrays to be deeply reactive you can use `$state.raw`.\n\nState declared with `$state.raw` cannot be mutated; it can only be _reassigned_.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3437, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8f4d0576-5183-4feb-94a6-05f4bead1184": {"__data__": {"id_": "8f4d0576-5183-4feb-94a6-05f4bead1184", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e08fd715-cc2e-4356-95b4-45b2414c29b1", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "94c9e1de88e990d1a4bde7ffa6de2b15f9e2d91e857f3bf1939751d719e0896a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a14fac7f-d818-48e7-875f-973b7fc22ac9", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "41c6bbb95937e0025c4a9c074b858b7c911654014fd8ec92338bc5a4c056e21d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7670d9f-a2e0-4910-91ee-a9d50c9a1b79", "node_type": "1", "metadata": {}, "hash": "3dfeddbfcf0c247e8f08751ead4ab45fef7e32aa62201fab38d1d50e3da43468", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This won't work, because `this` inside the `reset` method will be the `<button>` rather than the `Todo`:\n\n```svelte\n<button onclick={todo.reset}>\n\treset\n</button>\n```\n\nYou can either use an inline function...\n\n```svelte\n<button onclick=+++{() => todo.reset()}>+++\n\treset\n</button>\n```\n\n...or use an arrow function in the class definition:\n\n```js\n// @errors: 7006 2554\nclass Todo {\n\tdone = $state(false);\n\ttext = $state();\n\n\tconstructor(text) {\n\t\tthis.text = text;\n\t}\n\n\t+++reset = () => {+++\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n## `$state.raw`\n\nIn cases where you don't want objects and arrays to be deeply reactive you can use `$state.raw`.\n\nState declared with `$state.raw` cannot be mutated; it can only be _reassigned_. In other words, rather than assigning to a property of an object, or using an array method like `push`, replace the object or array altogether if you'd like to update it:\n\n```js\nlet person = $state.raw({\n\tname: 'Heraclitus',\n\tage: 49\n});\n\n// this will have no effect\nperson.age += 1;\n\n// this will work, because we're creating a new person\nperson = {\n\tname: 'Heraclitus',\n\tage: 50\n};\n```\n\nThis can improve performance with large arrays and objects that you weren't planning to mutate anyway, since it avoids the cost of making them reactive. Note that raw state can _contain_ reactive state (for example, a raw array of reactive objects).\n\n## `$state.snapshot`\n\nTo take a static snapshot of a deeply reactive `$state` proxy, use `$state.snapshot`:\n\n```svelte\n<script>\n\tlet counter = $state({ count: 0 });\n\n\tfunction onclick() {\n\t\t// Will log `{ count: ... }` rather than `Proxy { ... }`\n\t\tconsole.log($state.snapshot(counter));\n\t}\n</script>\n```\n\nThis is handy when you want to pass some state to an external library or API that doesn't expect a proxy, such as `structuredClone`.\n\n## Passing state into functions\n\nJavaScript is a _pass-by-value_ language \u2014 when you call a function, the arguments are the _values_ rather than the _variables_. In other words:\n\n```js\n/// file: index.js\n// @filename: index.js\n// ---cut---\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction add(a, b) {\n\treturn a + b;\n}\n\nlet a = 1;\nlet b = 2;\nlet total = add(a, b);\nconsole.log(total); // 3\n\na = 3;\nb = 4;\nconsole.log(total); // still 3!\n```\n\nIf `add` wanted to have access to the _current_ values of `a` and `b`, and to return the current `total` value, you would need to use functions instead:\n\n```js\n/// file: index.js\n// @filename: index.js\n// ---cut---\n/**\n * @param {() => number} getA\n * @param {() => number} getB\n */\nfunction add(+++getA, getB+++) {\n\treturn +++() => getA() + getB()+++;\n}\n\nlet a = 1;\nlet b = 2;\nlet total = add+++(() => a, () => b)+++;\nconsole.log(+++total()+++); // 3\n\na = 3;\nb = 4;\nconsole.log(+++total()+++); // 7\n```\n\nState in Svelte is no different \u2014 when you reference something declared with the `$state` rune...\n\n```js\nlet a = +++$state(1)+++;\nlet b = +++$state(2)+++;\n```\n\n...you're accessing its _current value_.", "mimetype": "text/plain", "start_char_idx": 2702, "end_char_idx": 5674, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c7670d9f-a2e0-4910-91ee-a9d50c9a1b79": {"__data__": {"id_": "c7670d9f-a2e0-4910-91ee-a9d50c9a1b79", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e08fd715-cc2e-4356-95b4-45b2414c29b1", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "94c9e1de88e990d1a4bde7ffa6de2b15f9e2d91e857f3bf1939751d719e0896a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f4d0576-5183-4feb-94a6-05f4bead1184", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a719baf262c319f7b5644be93a2d692f2f842566b64021180bfee389b3de3c85", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Note that 'functions' is broad \u2014\u00a0it encompasses properties of proxies and [`get`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)/[`set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) properties...\n\n```js\n/// file: index.js\n// @filename: index.js\n// ---cut---\n/**\n * @param {{ a: number, b: number }} input\n */\nfunction add(input) {\n\treturn {\n\t\tget value() {\n\t\t\treturn input.a + input.b;\n\t\t}\n\t};\n}\n\nlet input = $state({ a: 1, b: 2 });\nlet total = add(input);\nconsole.log(total.value); // 3\n\ninput.a = 3;\ninput.b = 4;\nconsole.log(total.value); // 7\n```\n\n...though if you find yourself writing code like that, consider using [classes](#Classes) instead.", "mimetype": "text/plain", "start_char_idx": 5676, "end_char_idx": 6395, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cc4882fd-d54f-440d-8484-9a297b917950": {"__data__": {"id_": "cc4882fd-d54f-440d-8484-9a297b917950", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/03-$derived.md", "file_name": "03-$derived.md", "file_size": 2316, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ece5be9-5a87-41e9-aaff-b63970861352", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/03-$derived.md", "file_name": "03-$derived.md", "file_size": 2316, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "4f15284f2ec2378868d9cdb5eb9957ef9c6ff52c9d5fc113589a33bdbda60362", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $derived\n---\n\nDerived state is declared with the `$derived` rune:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n\n<button onclick={() => count++}>\n\t{doubled}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\nThe expression inside `$derived(...)` should be free of side-effects. Svelte will disallow state changes (e.g. `count++`) inside derived expressions.\n\nAs with `$state`, you can mark class fields as `$derived`.\n\n> [!NOTE] Code in Svelte components is only executed once at creation. Without the `$derived` rune, `doubled` would maintain its original value even when `count` changes.\n\n## `$derived.by`\n\nSometimes you need to create complex derivations that don't fit inside a short expression. In these cases, you can use `$derived.by` which accepts a function as its argument.\n\n```svelte\n<script>\n\tlet numbers = $state([1, 2, 3]);\n\tlet total = $derived.by(() => {\n\t\tlet total = 0;\n\t\tfor (const n of numbers) {\n\t\t\ttotal += n;\n\t\t}\n\t\treturn total;\n\t});\n</script>\n\n<button onclick={() => numbers.push(numbers.length + 1)}>\n\t{numbers.join(' + ')} = {total}\n</button>\n```\n\nIn essence, `$derived(expression)` is equivalent to `$derived.by(() => expression)`.\n\n## Understanding dependencies\n\nAnything read synchronously inside the `$derived` expression (or `$derived.by` function body) is considered a _dependency_ of the derived state. When the state changes, the derived will be marked as _dirty_ and recalculated when it is next read.\n\nTo exempt a piece of state from being treated as a dependency, use [`untrack`](svelte#untrack).\n\n## Update propagation\n\nSvelte uses something called _push-pull reactivity_ \u2014 when state is updated, everything that depends on the state (whether directly or indirectly) is immediately notified of the change (the 'push'), but derived values are not re-evaluated until they are actually read (the 'pull').\n\nIf the new value of a derived is referentially identical to its previous value, downstream updates will be skipped. In other words, Svelte will only update the text inside the button when `large` changes, not when `count` changes, even though `large` depends on `count`:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet large = $derived(count > 10);\n</script>\n\n<button onclick={() => count++}>\n\t{large}\n</button>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2313, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3a6678b0-3124-4e63-be67-8fb101664b0e": {"__data__": {"id_": "3a6678b0-3124-4e63-be67-8fb101664b0e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14004861-d15b-4f7f-a989-c0106154541d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "210ab133bfbd51cea53036b662d9e9e55716323192fd3c16771d88427d10e8ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f432e2a7-a0b6-42da-9f97-d240dbaf87d2", "node_type": "1", "metadata": {}, "hash": "a26d6209ac498e9a2515c4645ae59f39cbc9d9d22b2990d1c3756f2cba184d5b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $effect\n---\n\nEffects are what make your application _do things_. When Svelte runs an effect function, it tracks which pieces of state (and derived state) are accessed (unless accessed inside [`untrack`](svelte#untrack)), and re-runs the function when that state later changes.\n\nMost of the effects in a Svelte app are created by Svelte itself \u2014 they're the bits that update the text in `<h1>hello {name}!</h1>` when `name` changes, for example.\n\nBut you can also create your own effects with the `$effect` rune, which is useful when you need to synchronize an external system (whether that's a library, or a `<canvas>` element, or something across a network) with state inside your Svelte app.\n\n> [!NOTE] Avoid overusing `$effect`! When you do too much work in effects, code often becomes difficult to understand and maintain. See [when not to use `$effect`](#When-not-to-use-$effect) to learn about alternative approaches.\n\nYour effects run after the component has been mounted to the DOM, and in a [microtask](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide) after state changes ([demo](/playground/untitled#H4sIAAAAAAAAE31S246bMBD9lZF3pSRSAqTVvrCAVPUP2sdSKY4ZwJJjkD0hSVH-vbINuWxXfQH5zMyZc2ZmZLVUaFn6a2R06ZGlHmBrpvnBvb71fWQHVOSwPbf4GS46TajJspRlVhjZU1HqkhQSWPkHIYdXS5xw-Zas3ueI6FRn7qHFS11_xSRZhIxbFtcDtw7SJb1iXaOg5XIFeQGjzyPRaevYNOGZIJ8qogbpe8CWiy_VzEpTXiQUcvPDkSVrSNZz1UlW1N5eLcqmpdXUvaQ4BmqlhZNUCgxuzFHDqUWNAxrYeUM76AzsnOsdiJbrBp_71lKpn3RRbii-4P3f-IMsRxS-wcDV_bL4PmSdBa2wl7pKnbp8DMgVvJm8ZNskKRkEM_OzyOKQFkgqOYBQ3Nq89Ns0nbIl81vMFN-jKoLMTOr-SOBOJS-Z8f5Y6D1wdcR8dFqvEBdetK-PHwj-z-cH8oHPY54wRJ8Ys7iSQ3Bg3VA9azQbmC9k35kKzYa6PoVtfwbbKVnBixBiGn7Pq0rqJoUtHiCZwAM3jdTPWCVtr_glhVrhecIa3vuksJ_b7TqFs4DPyriSjd5IwoNNQaAmNI-ESfR2p8zimzvN1swdCkvJHPH6-_oX8o1SgcIDAAA=)):\n\n```svelte\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// this will re-run whenever `color` or `size` change\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\" />\n```\n\nRe-runs are batched (i.e. changing `color` and `size` in the same moment won't cause two separate runs), and happen after any DOM updates have been applied.\n\nYou can place `$effect` anywhere, not just at the top level of a component, as long as it is called during component initialization (or while a parent effect is active). It is then tied to the lifecycle of the component (or parent effect) and will therefore destroy itself when the component unmounts (or the parent effect is destroyed).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2701, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f432e2a7-a0b6-42da-9f97-d240dbaf87d2": {"__data__": {"id_": "f432e2a7-a0b6-42da-9f97-d240dbaf87d2", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14004861-d15b-4f7f-a989-c0106154541d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "210ab133bfbd51cea53036b662d9e9e55716323192fd3c16771d88427d10e8ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3a6678b0-3124-4e63-be67-8fb101664b0e", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a022b61b5fc7d9d25e7db485284cc1c5c5c39e4810b8b0933f5002a66d7a21e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eafbe1c5-c27e-4c78-8a6b-da30ad9f0acd", "node_type": "1", "metadata": {}, "hash": "7ed0f978521d59574dc278af7c97479f19e467c6edcc5194c92599c38ad67c4c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "changing `color` and `size` in the same moment won't cause two separate runs), and happen after any DOM updates have been applied.\n\nYou can place `$effect` anywhere, not just at the top level of a component, as long as it is called during component initialization (or while a parent effect is active). It is then tied to the lifecycle of the component (or parent effect) and will therefore destroy itself when the component unmounts (or the parent effect is destroyed).\n\nYou can return a function from `$effect`, which will run immediately before the effect re-runs, and before it is destroyed ([demo](/playground/untitled#H4sIAAAAAAAAE42RQY-bMBCF_8rI2kPopiXpMQtIPfbeW6m0xjyKtWaM7CFphPjvFVB2k2oPe7LmzXzyezOjaqxDVKefo5JrD3VaBLVXrLu5-tb3X-IZTmat0hHv6cazgCWqk8qiCbaXouRSHISMH1gop4coWrA7JE9bp7PO2QjjuY5vA8fDYZ3hUh7QNDCy2yWUFzTOUilpSj9aG-linaMKFGACtKCmSwvGGYGeLQvCWbtnMq3m34grajxHoa1JOUXI93_V_Sfz7Oz7Mafj0ypN-zvHm8dSAmQITP_xaUq2IU1GO1dp80I2Uh_82dao92Rl9R8GvgF0QrbrUFstcFeq0PgAkha0LoICPoeB4w1SJUvsZcj4rvcMlvmvGlGCv6J-DeSgw2vabQnJlm55p7nM0rcTctYei3HZxZSl7XHVqkHEM3k2zpqXfFyj393zU05fpyI6f0HI0hUoPoamC9roKDeo2ivBH1EnCQOmX9NfYw2GHrgCAAA=)).\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet milliseconds = $state(1000);\n\n\t$effect(() => {\n\t\t// This will be recreated whenever `milliseconds` changes\n\t\tconst interval = setInterval(() => {\n\t\t\tcount += 1;\n\t\t}, milliseconds);\n\n\t\treturn () => {\n\t\t\t// if a callback is provided, it will run\n\t\t\t// a) immediately before the effect re-runs\n\t\t\t// b) when the component is destroyed\n\t\t\tclearInterval(interval);\n\t\t};\n\t});\n</script>\n\n<h1>{count}</h1>\n\n<button onclick={() => (milliseconds *= 2)}>slower</button>\n<button onclick={() => (milliseconds /= 2)}>faster</button>\n```\n\n### Understanding dependencies\n\n`$effect` automatically picks up any reactive values (`$state`, `$derived`, `$props`) that are _synchronously_ read inside its function body (including indirectly, via function calls) and registers them as dependencies. When those dependencies change, the `$effect` schedules a rerun.\n\nValues that are read _asynchronously_ \u2014 after an `await` or inside a `setTimeout`, for example \u2014 will not be tracked.", "mimetype": "text/plain", "start_char_idx": 2232, "end_char_idx": 4371, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eafbe1c5-c27e-4c78-8a6b-da30ad9f0acd": {"__data__": {"id_": "eafbe1c5-c27e-4c78-8a6b-da30ad9f0acd", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14004861-d15b-4f7f-a989-c0106154541d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "210ab133bfbd51cea53036b662d9e9e55716323192fd3c16771d88427d10e8ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f432e2a7-a0b6-42da-9f97-d240dbaf87d2", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e4853724b1562de2c0351e24af65ff79673d1406f2e2f02b9f2c3466bdae70f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61ea78ee-85e8-4893-bfd2-857d27567282", "node_type": "1", "metadata": {}, "hash": "06a7f3dfa3122b442d44de2ae499f3ea5604578eeb2293ab07b3b9b50812dd0b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "When those dependencies change, the `$effect` schedules a rerun.\n\nValues that are read _asynchronously_ \u2014 after an `await` or inside a `setTimeout`, for example \u2014 will not be tracked. Here, the canvas will be repainted when `color` changes, but not when `size` changes ([demo](/playground/untitled#H4sIAAAAAAAAE31T246bMBD9lZF3pWSlBEirfaEQqdo_2PatVIpjBrDkGGQPJGnEv1e2IZfVal-wfHzmzJyZ4cIqqdCy9M-F0blDlnqArZjmB3f72XWRHVCRw_bc4me4aDWhJstSlllhZEfbQhekkMDKfwg5PFvihMvX5OXH_CJa1Zrb0-Kpqr5jkiwC48rieuDWQbqgZ6wqFLRcvkC-hYvnkWi1dWqa8ESQTxFRjfQWsOXiWzmr0sSLhEJu3p1YsoJkNUcdZUnN9dagrBu6FVRQHAM10sJRKgUG16bXcGxQ44AGdt7SDkTDdY02iqLHnJVU6hedlWuIp94JW6Tf8oBt_8GdTxlF0b4n0C35ZLBzXb3mmYn3ae6cOW74zj0YVzDNYXRHFt9mprNgHfZSl6mzml8CMoLvTV6wTZIUDEJv5us2iwMtiJRyAKG4tXnhl8O0yhbML0Wm-B7VNlSSSd31BG7z8oIZZ6dgIffAVY_5xdU9Qrz1Bnx8fCfwtZ7v8Qc9j3nB8PqgmMWlHIID6-bkVaPZwDySfWtKNGtquxQ23Qlsq2QJT0KIqb8dL0up6xQ2eIBkAg_c1FI_YqW0neLnFCqFpwmreedJYT7XX8FVOBfwWRhXstZrSXiwKQjUhOZeMIleb5JZfHWn2Yq5pWEpmR7Hv-N_wEqT8hEEAAA=)):\n\n```ts\n// @filename: index.ts\ndeclare let canvas: {\n\twidth: number;\n\theight: number;\n\tgetContext(type: '2d', options?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D;\n};\ndeclare let color: string;\ndeclare let size: number;\n\n// ---cut---\n$effect(() => {\n\tconst context = canvas.getContext('2d');\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t// this will re-run whenever `color` changes...\n\tcontext.fillStyle = color;\n\n\tsetTimeout(() => {\n\t\t// ...but not when `size` changes\n\t\tcontext.fillRect(0, 0, size, size);\n\t}, 0);\n});\n```\n\nAn effect only reruns when the object it reads changes, not when a property inside it changes. (If you want to observe changes _inside_ an object at dev time, you can use [`$inspect`]($inspect).)\n\n```svelte\n<script>\n\tlet state = $state({ value: 0 });\n\tlet derived = $derived({ value: state.value * 2 });\n\n\t// this will run once, because `state` is never reassigned (only mutated)\n\t$effect(() => {\n\t\tstate;\n\t});\n\n\t// this will run whenever `state.value` changes...\n\t$effect(() => {\n\t\tstate.value;\n\t});\n\n\t// ...and so will this, because `derived` is a new object each time\n\t$effect(() => {\n\t\tderived;\n\t});\n</script>\n\n<button onclick={() => (state.value += 1)}>\n\t{state.value}\n</button>\n\n<p>{state.value} doubled is {derived.value}</p>\n```\n\nAn effect only depends on the values that it read the last time it ran. This has interesting implications for effects that have conditional code.\n\nFor instance, if `a` is `true` in the code snippet below, the code inside the `if` block will run and `b` will be evaluated.", "mimetype": "text/plain", "start_char_idx": 4188, "end_char_idx": 6736, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "61ea78ee-85e8-4893-bfd2-857d27567282": {"__data__": {"id_": "61ea78ee-85e8-4893-bfd2-857d27567282", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14004861-d15b-4f7f-a989-c0106154541d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "210ab133bfbd51cea53036b662d9e9e55716323192fd3c16771d88427d10e8ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eafbe1c5-c27e-4c78-8a6b-da30ad9f0acd", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "224ef96951aed40f67b5339ad1ceceafcb6e5479d5497cbaaed60a7852818de8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3bc13870-13a0-4624-b07f-6806c65a2c94", "node_type": "1", "metadata": {}, "hash": "94e70a2a3169b1544ffccbc397af01079b4e1fa2737bc0b3e8f8c2586e62db72", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This has interesting implications for effects that have conditional code.\n\nFor instance, if `a` is `true` in the code snippet below, the code inside the `if` block will run and `b` will be evaluated. As such, changes to either `a` or `b` [will cause the effect to re-run](/playground/untitled#H4sIAAAAAAAAE3VQzWrDMAx-FdUU4kBp71li6EPstOxge0ox8-QQK2PD-N1nLy2F0Z2Evj9_chKkP1B04pnYscc3cRCT8xhF95IEf8-Vq0DBr8rzPB_jJ3qumNERH-E2ECNxiRF9tIubWY00lgcYNAywj6wZJS8rtk83wjwgCrXHaULLUrYwKEgVGrnkx-Dx6MNFNstK5OjSbFGbwE0gdXuT_zGYrjmAuco515Hr1p_uXak3K3MgCGS9s-9D2grU-judlQYXIencnzad-tdR79qZrMyvw9wd5Z8Yv1h09dz8mn8AkM7Pfo0BAAA=).\n\nConversely, if `a` is `false`, `b` will not be evaluated, and the effect will _only_ re-run when `a` changes.\n\n```ts\nlet a = false;\nlet b = false;\n// ---cut---\n$effect(() => {\n\tconsole.log('running');\n\n\tif (a) {\n\t\tconsole.log('b:', b);\n\t}\n});\n```\n\n## `$effect.pre`\n\nIn rare cases, you may need to run code _before_ the DOM updates. For this we can use the `$effect.pre` rune:\n\n```svelte\n<script>\n\timport { tick } from 'svelte';\n\n\tlet div = $state();\n\tlet messages = $state([]);\n\n\t// ...\n\n\t$effect.pre(() => {\n\t\tif (!div) return; // not yet mounted\n\n\t\t// reference `messages` array length so that this code re-runs whenever it changes\n\t\tmessages.length;\n\n\t\t// autoscroll when new messages are added\n\t\tif (div.offsetHeight + div.scrollTop > div.scrollHeight - 20) {\n\t\t\ttick().then(() => {\n\t\t\t\tdiv.scrollTo(0, div.scrollHeight);\n\t\t\t});\n\t\t}\n\t});\n</script>\n\n<div bind:this={div}>\n\t{#each messages as message}\n\t\t<p>{message}</p>\n\t{/each}\n</div>\n```\n\nApart from the timing, `$effect.pre` works exactly like `$effect`.\n\n## `$effect.tracking`\n\nThe `$effect.tracking` rune is an advanced feature that tells you whether or not the code is running inside a tracking context, such as an effect or inside your template ([demo](/playground/untitled#H4sIAAAAAAAACn3PwYrCMBDG8VeZDYIt2PYeY8Dn2HrIhqkU08nQjItS-u6buAt7UDzmz8ePyaKGMWBS-nNRcmdU-hHUTpGbyuvI3KZvDFLal0v4qvtIgiSZUSb5eWSxPfWSc4oB2xDP1XYk8HHiSHkICeXKeruDDQ4Demlldv4y0rmq6z10HQwuJMxGVv4mVVXDwcJS0jP9u3knynwtoKz1vifT_Z9Jhm0WBCcOTlDD8kyspmML5qNpHg40jc3fFryJ0iWsp_UHgz3180oBAAA=)):\n\n```svelte\n<script>\n\tconsole.log('in component setup:', $effect.tracking()); // false\n\n\t$effect(() => {\n\t\tconsole.log('in effect:', $effect.tracking()); // true\n\t});\n</script>\n\n<p>in template: {$effect.tracking()}</p> <!-- true -->\n```\n\nIt is used to implement abstractions like [`createSubscriber`](/docs/svelte/svelte-reactivity#createSubscriber), which will create listeners to update reactive values but _only_ if those values are being tracked (rather than, for example, read inside an event handler).\n\n## `$effect.root`\n\nThe `$effect.root` rune is an advanced feature that creates a non-tracked scope that doesn't auto-cleanup.", "mimetype": "text/plain", "start_char_idx": 6537, "end_char_idx": 9301, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3bc13870-13a0-4624-b07f-6806c65a2c94": {"__data__": {"id_": "3bc13870-13a0-4624-b07f-6806c65a2c94", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14004861-d15b-4f7f-a989-c0106154541d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "210ab133bfbd51cea53036b662d9e9e55716323192fd3c16771d88427d10e8ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61ea78ee-85e8-4893-bfd2-857d27567282", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b163fa616982e2a75fa6cc6b29542de26baa9cf16f82a55373df34b6de5723ca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da12869c-857c-492a-b66a-b6ca39df483c", "node_type": "1", "metadata": {}, "hash": "0c634cbe77dd6240323090f092a1cc293a115e55cb404f8a2e59e54a3003bda9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "## `$effect.root`\n\nThe `$effect.root` rune is an advanced feature that creates a non-tracked scope that doesn't auto-cleanup. This is useful for nested effects that you want to manually control. This rune also allows for the creation of effects outside of the component initialisation phase.\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\tconst cleanup = $effect.root(() => {\n\t\t$effect(() => {\n\t\t\tconsole.log(count);\n\t\t});\n\n\t\treturn () => {\n\t\t\tconsole.log('effect root cleanup');\n\t\t};\n\t});\n</script>\n```\n\n## When not to use `$effect`\n\nIn general, `$effect` is best considered something of an escape hatch \u2014 useful for things like analytics and direct DOM manipulation \u2014 rather than a tool you should use frequently. In particular, avoid using it to synchronise state. Instead of this...\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $state();\n\n\t// don't do this!\n\t$effect(() => {\n\t\tdoubled = count * 2;\n\t});\n</script>\n```\n\n...do this:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n```\n\n> [!NOTE] For things that are more complicated than a simple expression like `count * 2`, you can also use `$derived.by`.\n\nYou might be tempted to do something convoluted with effects to link one value to another. The following example shows two inputs for \"money spent\" and \"money left\" that are connected to each other. If you update one, the other should update accordingly. Don't use effects for this ([demo](/playground/untitled#H4sIAAAAAAAACpVRy26DMBD8FcvKgUhtoIdeHBwp31F6MGSJkBbHwksEQvx77aWQqooq9bgzOzP7mGTdIHipPiZJowOpGJAv0po2VmfnDv4OSBErjYdneHWzBJaCjcx91TWOToUtCIEE3cig0OIty44r5l1oDtjOkyFIsv3GINQ_CNYyGegd1DVUlCR7oU9iilDUcP8S8roYs9n8p2wdYNVFm4csTx872BxNCcjr5I11fdgonEkXsjP2CoUUZWMv6m6wBz2x7yxaM-iJvWeRsvSbSVeUy5i0uf8vKA78NIeJLSZWv1I8jQjLdyK4XuTSeIdmVKJGGI4LdjVOiezwDu1yG74My8PLCQaSiroe5s_5C2PHrkVGAgAA)):\n\n```svelte\n<script>\n\tlet total = 100;\n\tlet spent = $state(0);\n\tlet left = $state(total);\n\n\t$effect(() => {\n\t\tleft = total - spent;\n\t});\n\n\t$effect(() => {\n\t\tspent = total - left;\n\t});\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={spent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" bind:value={left} max={total} />\n\t{left}/{total} left\n</label>\n```\n\nInstead,", "mimetype": "text/plain", "start_char_idx": 9176, "end_char_idx": 11427, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da12869c-857c-492a-b66a-b6ca39df483c": {"__data__": {"id_": "da12869c-857c-492a-b66a-b6ca39df483c", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14004861-d15b-4f7f-a989-c0106154541d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "210ab133bfbd51cea53036b662d9e9e55716323192fd3c16771d88427d10e8ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3bc13870-13a0-4624-b07f-6806c65a2c94", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "5a2b46a75e251863afb78aa91e197705b99ffc19555ba7f5088cdb60acfd6748", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "702c7f10-5c02-49c1-b0a1-60d4ceebf3ae", "node_type": "1", "metadata": {}, "hash": "51eaf9618ca1e2883f5764a6d2f43b27dbd40d4c6413e72fc04b97f7673ab111", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "let spent = $state(0);\n\tlet left = $state(total);\n\n\t$effect(() => {\n\t\tleft = total - spent;\n\t});\n\n\t$effect(() => {\n\t\tspent = total - left;\n\t});\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={spent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" bind:value={left} max={total} />\n\t{left}/{total} left\n</label>\n```\n\nInstead, use callbacks where possible ([demo](/playground/untitled#H4sIAAAAAAAACo1SMW6EMBD8imWluFMSIEUaDiKlvy5lSOHjlhOSMRZeTiDkv8deMEEJRcqdmZ1ZjzzxqpZgePo5cRw18JQA_sSVaPz0rnVk7iDRYxdhYA8vW4Wg0NnwzJRdrfGtUAVKQIYtCsly9pIkp4AZ7cQOezAoEA7JcWUkVBuCdol0dNWrEutWsV5fHfnhPQ5wZJMnCwyejxCh6G6A0V3IHk4zu_jOxzzPBxBld83PTr7xXrb3rUNw8PbiYJ3FP22oTIoLSComq5XuXTeu8LzgnVA3KDgj13wiQ8taRaJ82rzXskYM-URRlsXktejjgNLoo9e4fyf70_8EnwncySX1GuunX6kGRwnzR_BgaPNaGy3FmLJKwrCUeBM6ZUn0Cs2mOlp3vwthQJ5i14P9st9vZqQlsQIAAA==)):\n\n```svelte\n<script>\n\tlet total = 100;\n\tlet spent = $state(0);\n\tlet left = $state(total);\n\n\tfunction updateSpent(e) {\n\t\tspent = +e.target.value;\n\t\tleft = total - spent;\n\t}\n\n\tfunction updateLeft(e) {\n\t\tleft = +e.target.value;\n\t\tspent = total - left;\n\t}\n</script>\n\n<label>\n\t<input type=\"range\" value={spent} oninput={updateSpent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" value={left} oninput={updateLeft} max={total} />\n\t{left}/{total} left\n</label>\n```\n\nIf you need to use bindings, for whatever reason (for example when you want some kind of \"writable `$derived`\"), consider using getters and setters to synchronise state ([demo](/playground/untitled#H4sIAAAAAAAACpWRwW6DMBBEf8WyekikFOihFwcq9TvqHkyyQUjGsfCCQMj_XnvBNKpy6Qn2DTOD1wu_tRocF18Lx9kCFwT4iRvVxenT2syNoDGyWjl4xi93g2AwxPDSXfrW4oc0EjUgwzsqzSr2VhTnxJwNHwf24lAhHIpjVDZNwy1KS5wlNoGMSg9wOCYksQccerMlv65p51X0p_Xpdt_4YEy9yTkmV3z4MJT579-bUqsaNB2kbI0dwlnCgirJe2UakJzVrbkKaqkWivasU1O1ULxnOVk3JU-Uxti0p_-vKO4no_enbQ_yXhnZn0aHs4b1jiJMK7q2zmo1C3bTMG3LaZQVrMjeoSPgaUtkDxePMCEX2Ie6b_8D4WyJJEwCAAA=)):\n\n```svelte\n<script>\n\tlet total = 100;\n\tlet spent = $state(0);\n\n\tlet left = {\n\t\tget value() {\n\t\t\treturn total - spent;\n\t\t},\n\t\tset value(v) {\n\t\t\tspent = total - v;\n\t\t}\n\t};", "mimetype": "text/plain", "start_char_idx": 11071, "end_char_idx": 13161, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "702c7f10-5c02-49c1-b0a1-60d4ceebf3ae": {"__data__": {"id_": "702c7f10-5c02-49c1-b0a1-60d4ceebf3ae", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14004861-d15b-4f7f-a989-c0106154541d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "210ab133bfbd51cea53036b662d9e9e55716323192fd3c16771d88427d10e8ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da12869c-857c-492a-b66a-b6ca39df483c", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b51aabd5e81a0a8817f0bb4926894c4a47ef5595109f86a9f59992c6dad5c427", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "let spent = $state(0);\n\n\tlet left = {\n\t\tget value() {\n\t\t\treturn total - spent;\n\t\t},\n\t\tset value(v) {\n\t\t\tspent = total - v;\n\t\t}\n\t};\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={spent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" bind:value={left.value} max={total} />\n\t{left.value}/{total} left\n</label>\n```\n\nIf you absolutely have to update `$state` within an effect and run into an infinite loop because you read and write to the same `$state`, use [untrack](svelte#untrack).", "mimetype": "text/plain", "start_char_idx": 13031, "end_char_idx": 13546, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1b1197d-9204-46f3-9858-ed402e594c49": {"__data__": {"id_": "a1b1197d-9204-46f3-9858-ed402e594c49", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e802b9b-48b2-482d-a8cc-e7821507ca8c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8aa08383ae9c3c4294c51142e245c0726c828a2e37469171d28622ca216303cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e27b859d-dbb3-4ed0-aa8d-bf41536ca016", "node_type": "1", "metadata": {}, "hash": "f2fffc5495db8e45179aba95e7c77c159267bd91be3c67d4c59cd133675228ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $props\n---\n\nThe inputs to a component are referred to as _props_, which is short for _properties_. You pass props to components just like you pass attributes to elements:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport MyComponent from './MyComponent.svelte';\n</script>\n\n<MyComponent adjective=\"cool\" />\n```\n\nOn the other side, inside `MyComponent.svelte`, we can receive props with the `$props` rune...\n\n```svelte\n<!--- file: MyComponent.svelte --->\n<script>\n\tlet props = $props();\n</script>\n\n<p>this component is {props.adjective}</p>\n```\n\n...though more commonly, you'll [_destructure_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) your props:\n\n```svelte\n<!--- file: MyComponent.svelte --->\n<script>\n\tlet +++{ adjective }+++ = $props();\n</script>\n\n<p>this component is {+++adjective+++}</p>\n```\n\n## Fallback values\n\nDestructuring allows us to declare fallback values, which are used if the parent component does not set a given prop:\n\n```js\nlet { adjective = 'happy' } = $props();\n```\n\n> [!NOTE] Fallback values are not turned into reactive state proxies (see [Updating props](#Updating-props) for more info)\n\n## Renaming props\n\nWe can also use the destructuring assignment to rename props, which is necessary if they're invalid identifiers, or a JavaScript keyword like `super`:\n\n```js\nlet { super: trouper = 'lights are gonna find me' } = $props();\n```\n\n## Rest props\n\nFinally, we can use a _rest property_ to get, well, the rest of the props:\n\n```js\nlet { a, b, c, ...others } = $props();\n```\n\n## Updating props\n\nReferences to a prop inside a component update when the prop itself updates \u2014 when `count` changes in `App.svelte`, it will also change inside `Child.svelte`. But the child component is able to temporarily override the prop value, which can be useful for unsaved ephemeral state ([demo](/playground/untitled#H4sIAAAAAAAAE6WQ0WrDMAxFf0WIQR0Wmu3VTQJln7HsIfVcZubIxlbGRvC_DzuBraN92qPula50tODZWB1RPi_IX16jLALWSOOUq6P3-_ihLWftNEZ9TVeOWBNHlNhGFYznfqCBzeRdYHh6M_YVzsFNsNs3pdpGd4eBcqPVDMrNxNDBXeSRtXioDgO1zU8ataeZ2RE4Utao924RFXQ9iHXwvoPHKpW1xY4g_Bg0cSVhKS0p560Za95612ZC02ONrD8ZJYdZp_rGQ37ff_mSP86Np2TWZaNNmdcH56P4P67K66_SXoK9pG-5dF5Z9QEAAA==)):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => (count += 1)}>\n\tclicks (parent): {count}\n</button>\n\n<Child {count} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { count } = $props();\n</script>\n\n<button onclick={() => (count += 1)}>\n\tclicks (child): {count}\n</button>\n```\n\nWhile you can temporarily _reassign_ props, you should not _mutate_ props unless they are [bindable]($bindable).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2727, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e27b859d-dbb3-4ed0-aa8d-bf41536ca016": {"__data__": {"id_": "e27b859d-dbb3-4ed0-aa8d-bf41536ca016", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e802b9b-48b2-482d-a8cc-e7821507ca8c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8aa08383ae9c3c4294c51142e245c0726c828a2e37469171d28622ca216303cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1b1197d-9204-46f3-9858-ed402e594c49", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "460e05c4d40b5f25bfe0715d29ee20fe03269fcd5dd9f8c9368facc37b6ed5eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c24a5fa7-9cd7-4ef7-b3d4-8b761ce52eac", "node_type": "1", "metadata": {}, "hash": "5f2b003e2df3527c53d3eb4ea118499e12edfab5e40b375a72c4c817967be00b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "If the prop is a regular object, the mutation will have no effect ([demo](/playground/untitled#H4sIAAAAAAAAE3WQwU7DMBBEf2W1QmorQgJXk0RC3PkBwiExG9WQrC17U4Es_ztKUkQp9OjxzM7bjcjtSKjwyfKNp1aLORA4b13ADHszUED1HFE-3eyaBcy-Mw_O5eFAg8xa1wb6T9eWhVgCKiyD9sZJ3XAjZnTWCzzuzfAKvbcjbPJieR2jm_uGy-InweXqtd0baaliBG0nFgW3kBIUNWYo9CGoxE-UsgvIpw2_oc9-LmAPJBCPDJCggqvlVtvdH9puErEMlvVg9HsVtzuoaojzkKKAfRuALVDfk5ZZW0fmy05wXcFdwyktlUs-KIinljTXrRVnm7-kL9dYLVbUAQAA)):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n</script>\n\n<Child object={{ count: 0 }} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => {\n\t// has no effect\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\nIf the prop is a reactive state proxy, however, then mutations _will_ have an effect but you will see an [`ownership_invalid_mutation`](runtime-warnings#Client-warnings-ownership_invalid_mutation) warning, because the component is mutating state that does not 'belong' to it ([demo](/playground/untitled#H4sIAAAAAAAAE3WR0U7DMAxFf8VESBuiauG1WycheOEbKA9p67FA6kSNszJV-XeUZhMw2GN8r-1znUmQ7FGU4pn2UqsOes-SlSGRia3S6ET5Mgk-2OiJBZGdOh6szd0eNcdaIx3-V28NMRI7UYq1awdleVNTzaq3ZmB43CndwXYwPSzyYn4dWxermqJRI4Np3rFlqODasWRcTtAaT1zCHYSbVU3r4nsyrdPMKTUFKDYiE4yfLEoePIbsQpqfy3_nOVMuJIqg0wk1RFg7GOuWfwEbz2wIDLVatR_VtLyBagNTHFIUMCqtoZXeIfAOU1JoUJsR2IC3nWTMjt7GM4yKdyBhlAMpesvhydCC0y_i0ZagHByMh26WzUhXUUxKnpbcVnBfUwhznJnNlac7JkuIURL-2VVfwxflyrWcSQIAAA==)):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\n\tlet object = $state({count: 0});\n</script>\n\n<Child {object} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => {\n\t// will cause the count below to update,\n\t// but with a warning. Don't mutate\n\t// objects you don't own!", "mimetype": "text/plain", "start_char_idx": 2729, "end_char_idx": 4607, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c24a5fa7-9cd7-4ef7-b3d4-8b761ce52eac": {"__data__": {"id_": "c24a5fa7-9cd7-4ef7-b3d4-8b761ce52eac", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e802b9b-48b2-482d-a8cc-e7821507ca8c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8aa08383ae9c3c4294c51142e245c0726c828a2e37469171d28622ca216303cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e27b859d-dbb3-4ed0-aa8d-bf41536ca016", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a22bdc4c61f39de5c94f62712533ef999af1d7eac846425a80b953110139eccf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Don't mutate\n\t// objects you don't own!\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\nThe fallback value of a prop not declared with `$bindable` is left untouched \u2014 it is not turned into a reactive state proxy \u2014 meaning mutations will not cause updates ([demo](/playground/untitled#H4sIAAAAAAAAE3WQwU7DMBBEf2VkIbUVoYFraCIh7vwA4eC4G9Wta1vxpgJZ_nfkBEQp9OjxzOzTRGHlkUQlXpy9G0gq1idCL43ppDrAD84HUYheGwqieo2CP3y2Z0EU3-En79fhRIaz1slA_-nKWSbLQVRiE9SgPTetbVkfvRsYzztttugHd8RiXU6vr-jisbWb8idhN7O3bEQhmN5ZVDyMlIorcOddv_Eufq4AGmJEuG5PilEjQrnRcoV7JCTUuJlGWq7-YHYjs7NwVhmtDnVcrlA3iLmzLLGTAdaB-j736h68Oxv-JM1I0AFjoG1OzPfX023c1nhobUoT39QeKsRzS8owM8DFTG_pE6dcVl70AQAA))\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { object = { count: 0 } } = $props();\n</script>\n\n<button onclick={() => {\n\t// has no effect if the fallback value is used\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\nIn summary: don't mutate props. Either use callback props to communicate changes, or \u2014 if parent and child should share the same object \u2014 use the [`$bindable`]($bindable) rune.\n\n## Type safety\n\nYou can add type safety to your components by annotating your props, as you would with any other variable declaration. In TypeScript that might look like this...\n\n```svelte\n<script lang=\"ts\">\n\tlet { adjective }: { adjective: string } = $props();\n</script>\n```\n\n...while in JSDoc you can do this:\n\n```svelte\n<script>\n\t/** @type {{ adjective: string }} */\n\tlet { adjective } = $props();\n</script>\n```\n\nYou can, of course, separate the type declaration from the annotation:\n\n```svelte\n<script lang=\"ts\">\n\tinterface Props {\n\t\tadjective: string;\n\t}\n\n\tlet { adjective }: Props = $props();\n</script>\n```\n\n> [!NOTE] Interfaces for native DOM elements are provided in the `svelte/elements` module (see [Typing wrapper components](typescript#Typing-wrapper-components))\n\nAdding types is recommended, as it ensures that people using your component can easily discover which props they should provide.", "mimetype": "text/plain", "start_char_idx": 4568, "end_char_idx": 6559, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "65bbe3e1-f38f-4faf-9a33-2b7c35e6bb30": {"__data__": {"id_": "65bbe3e1-f38f-4faf-9a33-2b7c35e6bb30", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/06-$bindable.md", "file_name": "06-$bindable.md", "file_size": 1977, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ef3c18d-f0ee-4041-9cc1-31a825a56ad6", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/06-$bindable.md", "file_name": "06-$bindable.md", "file_size": 1977, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "ef0c39a9b82cf1a8d6eb3997831de11b7b2b2302af1040c49e486cbf81667ce4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $bindable\n---\n\nOrdinarily, props go one way, from parent to child. This makes it easy to understand how data flows around your app.\n\nIn Svelte, component props can be _bound_, which means that data can also flow _up_ from child to parent. This isn't something you should do often, but it can simplify your code if used sparingly and carefully.\n\nIt also means that a state proxy can be _mutated_ in the child.\n\n> [!NOTE] Mutation is also possible with normal props, but is strongly discouraged \u2014 Svelte will warn you if it detects that a component is mutating state it does not 'own'.\n\nTo mark a prop as bindable, we use the `$bindable` rune:\n\n<!-- prettier-ignore -->\n```svelte\n/// file: FancyInput.svelte\n<script>\n\tlet { value = $bindable(), ...props } = $props();\n</script>\n\n<input bind:value={value} {...props} />\n\n<style>\n\tinput {\n\t\tfont-family: 'Comic Sans MS';\n\t\tcolor: deeppink;\n\t}\n</style>\n```\n\nNow, a component that uses `<FancyInput>` can add the [`bind:`](bind) directive ([demo](/playground/untitled#H4sIAAAAAAAAE3WQwWrDMBBEf2URBSfg2nfFMZRCoYeecqx6UJx1IyqvhLUONcb_XqSkTUOSk1az7DBvJtEai0HI90nw6FHIJIhckO7i78n7IhzQctS2OuAtvXHESByEFFVoeuO5VqTYdN71DC-amvGV_MDQ9q6DrCjP0skkWymKJxYZOgxBfyKs4SGwZlxke7TWZcuVoqo8-1P1z3lraCcP2g64nk4GM5S1osrXf0JV-lrkgvGbheR-wDm_g30V8JL-1vpOCZFogpQsEsWcemtxscyhKArfOx9gjps0Lq4hzRVfemaYfu-PoIqqwKPFY_XpaIqj4tYRP7a6M3aUkD27zjSw0RTgbZN6Z8WNs66XsEP03tBXUueUJFlelvYx_wCuI3leNwIAAA==)):\n\n<!-- prettier-ignore -->\n```svelte\n/// App.svelte\n<script>\n\timport FancyInput from './FancyInput.svelte';\n\n\tlet message = $state('hello');\n</script>\n\n<FancyInput bind:value={message} />\n<p>{message}</p>\n```\n\nThe parent component doesn't _have_ to use `bind:` \u2014 it can just pass a normal prop. Some parents don't want to listen to what their children have to say.\n\nIn this case, you can specify a fallback value for when no prop is passed at all:\n\n```js\n/// file: FancyInput.svelte\nlet { value = $bindable('fallback'), ...props } = $props();\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1972, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed0ff1f6-8137-42d3-b75e-efb98c908794": {"__data__": {"id_": "ed0ff1f6-8137-42d3-b75e-efb98c908794", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/07-$inspect.md", "file_name": "07-$inspect.md", "file_size": 2573, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8bda120f-0c8f-4b6b-9795-06c3c2ce3ad2", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/07-$inspect.md", "file_name": "07-$inspect.md", "file_size": 2573, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b2d8d8bfb99be0cf72d7da35b382409426010e398ed5f3bcd242a16b4ca3abf3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $inspect\n---\n\n> [!NOTE] `$inspect` only works during development. In a production build it becomes a noop.\n\nThe `$inspect` rune is roughly equivalent to `console.log`, with the exception that it will re-run whenever its argument changes. `$inspect` tracks reactive state deeply, meaning that updating something inside an object or array using fine-grained reactivity will cause it to re-fire ([demo](/playground/untitled#H4sIAAAAAAAACkWQ0YqDQAxFfyUMhSotdZ-tCvu431AXtGOqQ2NmmMm0LOK_r7Utfby5JzeXTOpiCIPKT5PidkSVq2_n1F7Jn3uIcEMSXHSw0evHpAjaGydVzbUQCmgbWaCETZBWMPlKj29nxBDaHj_edkAiu12JhdkYDg61JGvE_s2nR8gyuBuiJZuDJTyQ7eE-IEOzog1YD80Lb0APLfdYc5F9qnFxjiKWwbImo6_llKRQVs-2u91c_bD2OCJLkT3JZasw7KLA2XCX31qKWE6vIzNk1fKE0XbmYrBTufiI8-_8D2cUWBA_AQAA)):\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet message = $state('hello');\n\n\t$inspect(count, message); // will console.log when `count` or `message` change\n</script>\n\n<button onclick={() => count++}>Increment</button>\n<input bind:value={message} />\n```\n\n## $inspect(...).with\n\n`$inspect` returns a property `with`, which you can invoke with a callback, which will then be invoked instead of `console.log`. The first argument to the callback is either `\"init\"` or `\"update\"`; subsequent arguments are the values passed to `$inspect` ([demo](/playground/untitled#H4sIAAAAAAAACkVQ24qDMBD9lSEUqlTqPlsj7ON-w7pQG8c2VCchmVSK-O-bKMs-DefKYRYx6BG9qL4XQd2EohKf1opC8Nsm4F84MkbsTXAqMbVXTltuWmp5RAZlAjFIOHjuGLOP_BKVqB00eYuKs82Qn2fNjyxLtcWeyUE2sCRry3qATQIpJRyD7WPVMf9TW-7xFu53dBcoSzAOrsqQNyOe2XUKr0Xi5kcMvdDB2wSYO-I9vKazplV1-T-d6ltgNgSG1KjVUy7ZtmdbdjqtzRcphxMS1-XubOITJtPrQWMvKnYB15_1F7KKadA_AQAA)):\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\t$inspect(count).with((type, count) => {\n\t\tif (type === 'update') {\n\t\t\tdebugger; // or `console.trace`, or whatever you want\n\t\t}\n\t});\n</script>\n\n<button onclick={() => count++}>Increment</button>\n```\n\nA convenient way to find the origin of some change is to pass `console.trace` to `with`:\n\n```js\n// @errors: 2304\n$inspect(stuff).with(console.trace);\n```\n\n## $inspect.trace(...)\n\nThis rune, added in 5.14, causes the surrounding function to be _traced_ in development. Any time the function re-runs as part of an [effect]($effect) or a [derived]($derived), information will be printed to the console about which pieces of reactive state caused the effect to fire.\n\n```svelte\n<script>\n\timport { doSomeWork } from './elsewhere';\n\n\t$effect(() => {\n\t\t+++$inspect.trace();+++\n\t\tdoSomeWork();\n\t});\n</script>\n```\n\n`$inspect.trace` takes an optional first argument which will be used as the label.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2572, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "52c03147-aded-4f13-8a12-035cfc3029b9": {"__data__": {"id_": "52c03147-aded-4f13-8a12-035cfc3029b9", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/08-$host.md", "file_name": "08-$host.md", "file_size": 1240, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c633116-1c28-4d4d-97f0-1549351d46b3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/08-$host.md", "file_name": "08-$host.md", "file_size": 1240, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8524c8277e24ea2e419640d1d9a94d4a1e1a55fcf74c3200f4731010a9b89940", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $host\n---\n\nWhen compiling a component as a custom element, the `$host` rune provides access to the host element, allowing you to (for example) dispatch custom events ([demo](/playground/untitled#H4sIAAAAAAAAE41Ry2rDMBD8FSECtqkTt1fHFpSSL-ix7sFRNkTEXglrnTYY_3uRlDgxTaEHIfYxs7szA9-rBizPPwZOZwM89wmecqxbF70as7InaMjltrWFR3mpkQDJ8pwXVnbKkKiwItUa3RGLVtk7gTHQXRDR2lXda4CY1D0SK9nCUk0QPyfrCovsRoNFe17aQOAwGncgO2gBqRzihJXiQrEs2csYOhQ-7HgKHaLIbpRhhBG-I2eD_8ciM4KnnOCbeE5dD2P6h0Dz0-Yi_arNhPLJXBtSGi2TvSXdbpqwdsXvjuYsC1veabvvUTog2ylrapKH2G2XsMFLS4uDthQnq2t1cwKkGOGLvYU5PvaQxLsxOkPmsm97Io1Mo2yUPF6VnOZFkw1RMoopKLKAE_9gmGxyDFMwMcwN-Bx_ABXQWmOtAgAA)):\n\n<!-- prettier-ignore -->\n```svelte\n/// file: Stepper.svelte\n<svelte:options customElement=\"my-stepper\" />\n\n<script>\n\tfunction dispatch(type) {\n\t\t+++$host()+++.dispatchEvent(new CustomEvent(type));\n\t}\n</script>\n\n<button onclick={() => dispatch('decrement')}>decrement</button>\n<button onclick={() => dispatch('increment')}>increment</button>\n```\n\n<!-- prettier-ignore -->\n```svelte\n/// file: App.svelte\n<script>\n\timport './Stepper.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<my-stepper\n\tondecrement={() => count -= 1}\n\tonincrement={() => count += 1}\n></my-stepper>\n\n<p>count: {count}</p>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1239, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "07fb0c9f-7fd5-46a3-9416-d6a1fe6c3ba6": {"__data__": {"id_": "07fb0c9f-7fd5-46a3-9416-d6a1fe6c3ba6", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/index.md", "file_name": "index.md", "file_size": 21, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e1f3a31-5f21-45a3-9889-9d816158e34f", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/index.md", "file_name": "index.md", "file_size": 21, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "dd3017157b68abf1ae98e33e400445726c5fe5c181e121b5a3c3c3d31b3c6bf2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Runes\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 20, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48fde40a-dfe3-4dfd-8f1a-b20fed1adf9b": {"__data__": {"id_": "48fde40a-dfe3-4dfd-8f1a-b20fed1adf9b", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/01-basic-markup.md", "file_name": "01-basic-markup.md", "file_size": 7184, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9719379b-cbb1-4e00-931d-6a4198cb1a30", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/01-basic-markup.md", "file_name": "01-basic-markup.md", "file_size": 7184, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "efc8dcf5d28b65c53d8bbfb24475b43579584e825b0ca843565595f9798c89bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1f7ff5a-b704-4858-b31c-0f69791f65d4", "node_type": "1", "metadata": {}, "hash": "eec71f43bae0393a3b64ff3ccb1435392b978833b5a65e216723636674e409b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Basic markup\n---\n\nMarkup inside a Svelte component can be thought of as HTML++.\n\n## Tags\n\nA lowercase tag, like `<div>`, denotes a regular HTML element. A capitalised tag or a tag that uses dot notation, such as `<Widget>` or `<my.stuff>`, indicates a _component_.\n\n```svelte\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<div>\n\t<Widget />\n</div>\n```\n\n## Element attributes\n\nBy default, attributes work exactly like their HTML counterparts.\n\n```svelte\n<div class=\"foo\">\n\t<button disabled>can't touch this</button>\n</div>\n```\n\nAs in HTML, values may be unquoted.\n\n<!-- prettier-ignore -->\n```svelte\n<input type=checkbox />\n```\n\nAttribute values can contain JavaScript expressions.\n\n```svelte\n<a href=\"page/{p}\">page {p}</a>\n```\n\nOr they can _be_ JavaScript expressions.\n\n```svelte\n<button disabled={!clickable}>...</button>\n```\n\nBoolean attributes are included on the element if their value is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) and excluded if it's [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\nAll other attributes are included unless their value is [nullish](https://developer.mozilla.org/en-US/docs/Glossary/Nullish) (`null` or `undefined`).\n\n```svelte\n<input required={false} placeholder=\"This input field is not required\" />\n<div title={null}>This div has no title attribute</div>\n```\n\n> [!NOTE] Quoting a singular expression does not affect how the value is parsed, but in Svelte 6 it will cause the value to be coerced to a string:\n>\n> <!-- prettier-ignore -->\n> ```svelte\n> <button disabled=\"{number !== 42}\">...</button>\n> ```\n\nWhen the attribute name and value match (`name={name}`), they can be replaced with `{name}`.\n\n```svelte\n<button {disabled}>...</button>\n<!-- equivalent to\n<button disabled={disabled}>...</button>\n-->\n```\n\n## Component props\n\nBy convention, values passed to components are referred to as _properties_ or _props_ rather than _attributes_, which are a feature of the DOM.\n\nAs with elements, `name={name}` can be replaced with the `{name}` shorthand.\n\n```svelte\n<Widget foo={bar} answer={42} text=\"hello\" />\n```\n\n_Spread attributes_ allow many attributes or properties to be passed to an element or component at once.\n\nAn element or component can have multiple spread attributes, interspersed with regular ones.\n\n```svelte\n<Widget {...things} />\n```\n\n## Events\n\nListening to DOM events is possible by adding attributes to the element that start with `on`. For example, to listen to the `click` event, add the `onclick` attribute to a button:\n\n```svelte\n<button onclick={() => console.log('clicked')}>click me</button>\n```\n\nEvent attributes are case sensitive. `onclick` listens to the `click` event, `onClick` listens to the `Click` event, which is different. This ensures you can listen to custom events that have uppercase characters in them.\n\nBecause events are just attributes, the same rules as for attributes apply:\n\n- you can use the shorthand form: `<button {onclick}>click me</button>`\n- you can spread them: `<button {...thisSpreadContainsEventAttributes}>click me</button>`\n\nTiming-wise, event attributes always fire after events from bindings (e.g. `oninput` always fires after an update to `bind:value`). Under the hood, some event handlers are attached directly with `addEventListener`, while others are _delegated_.\n\nWhen using `ontouchstart` and `ontouchmove` event attributes, the handlers are [passive](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#using_passive_listeners) for better performance. This greatly improves responsiveness by allowing the browser to scroll the document immediately, rather than waiting to see if the event handler calls `event.preventDefault()`.\n\nIn the very rare cases that you need to prevent these event defaults, you should use [`on`](svelte-events#on) instead (for example inside an action).\n\n### Event delegation\n\nTo reduce memory footprint and increase performance, Svelte uses a technique called event delegation. This means that for certain events \u2014 see the list below \u2014 a single event listener at the application root takes responsibility for running any handlers on the event's path.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4183, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c1f7ff5a-b704-4858-b31c-0f69791f65d4": {"__data__": {"id_": "c1f7ff5a-b704-4858-b31c-0f69791f65d4", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/01-basic-markup.md", "file_name": "01-basic-markup.md", "file_size": 7184, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9719379b-cbb1-4e00-931d-6a4198cb1a30", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/01-basic-markup.md", "file_name": "01-basic-markup.md", "file_size": 7184, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "efc8dcf5d28b65c53d8bbfb24475b43579584e825b0ca843565595f9798c89bf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48fde40a-dfe3-4dfd-8f1a-b20fed1adf9b", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/01-basic-markup.md", "file_name": "01-basic-markup.md", "file_size": 7184, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e341c8760eb071d48d2414d7e40266ee48528e6f77499cefdd10a020cf5259f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Under the hood, some event handlers are attached directly with `addEventListener`, while others are _delegated_.\n\nWhen using `ontouchstart` and `ontouchmove` event attributes, the handlers are [passive](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#using_passive_listeners) for better performance. This greatly improves responsiveness by allowing the browser to scroll the document immediately, rather than waiting to see if the event handler calls `event.preventDefault()`.\n\nIn the very rare cases that you need to prevent these event defaults, you should use [`on`](svelte-events#on) instead (for example inside an action).\n\n### Event delegation\n\nTo reduce memory footprint and increase performance, Svelte uses a technique called event delegation. This means that for certain events \u2014 see the list below \u2014 a single event listener at the application root takes responsibility for running any handlers on the event's path.\n\nThere are a few gotchas to be aware of:\n\n- when you manually dispatch an event with a delegated listener, make sure to set the `{ bubbles: true }` option or it won't reach the application root\n- when using `addEventListener` directly, avoid calling `stopPropagation` or the event won't reach the application root and handlers won't be invoked. Similarly, handlers added manually inside the application root will run _before_ handlers added declaratively deeper in the DOM (with e.g. `onclick={...}`), in both capturing and bubbling phases. For these reasons it's better to use the `on` function imported from `svelte/events` rather than `addEventListener`, as it will ensure that order is preserved and `stopPropagation` is handled correctly.\n\nThe following event handlers are delegated:\n\n- `beforeinput`\n- `click`\n- `change`\n- `dblclick`\n- `contextmenu`\n- `focusin`\n- `focusout`\n- `input`\n- `keydown`\n- `keyup`\n- `mousedown`\n- `mousemove`\n- `mouseout`\n- `mouseover`\n- `mouseup`\n- `pointerdown`\n- `pointermove`\n- `pointerout`\n- `pointerover`\n- `pointerup`\n- `touchend`\n- `touchmove`\n- `touchstart`\n\n## Text expressions\n\nA JavaScript expression can be included as text by surrounding it with curly braces.\n\n```svelte\n{expression}\n```\n\nCurly braces can be included in a Svelte template by using their [HTML entity](https://developer.mozilla.org/docs/Glossary/Entity) strings: `&lbrace;`, `&lcub;`, or `&#123;` for `{` and `&rbrace;`, `&rcub;`, or `&#125;` for `}`.\n\nIf you're using a regular expression (`RegExp`) [literal notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#literal_notation_and_constructor), you'll need to wrap it in parentheses.\n\n<!-- prettier-ignore -->\n```svelte\n<h1>Hello {name}!</h1>\n<p>{a} + {b} = {a + b}.</p>\n\n<div>{(/^[A-Za-z ]+$/).test(value) ? x : y}</div>\n```\n\nThe expression will be stringified and escaped to prevent code injections. If you want to render HTML, use the `{@html}` tag instead.\n\n```svelte\n{@html potentiallyUnsafeHtmlString}\n```\n\n> [!NOTE] Make sure that you either escape the passed string or only populate it with values that are under your control in order to prevent [XSS attacks](https://owasp.org/www-community/attacks/xss/)\n\n## Comments\n\nYou can use HTML comments inside components.\n\n```svelte\n<!-- this is a comment! --><h1>Hello world</h1>\n```\n\nComments beginning with `svelte-ignore` disable warnings for the next block of markup. Usually, these are accessibility warnings; make sure that you're disabling them for a good reason.\n\n```svelte\n<!-- svelte-ignore a11y-autofocus -->\n<input bind:value={name} autofocus />\n```\n\nYou can add a special comment starting with `@component` that will show up when hovering over the component name in other files.\n\n````svelte\n<!--\n@component\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```html\n  <Main name=\"Arethra\">\n  ```\n-->\n<script>\n\tlet { name } = $props();\n</script>\n\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n````", "mimetype": "text/plain", "start_char_idx": 3228, "end_char_idx": 7179, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ae002899-5245-4f66-b28c-e76b3972000c": {"__data__": {"id_": "ae002899-5245-4f66-b28c-e76b3972000c", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/02-if.md", "file_name": "02-if.md", "file_size": 736, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63f0cf37-7115-4b60-afb2-5c5deeab00cd", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/02-if.md", "file_name": "02-if.md", "file_size": 736, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "2626b47ceda46326a5c5f5812f5c3142d7e000ee50fa86f095e4a69453fdd01c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {#if ...}\n---\n\n```svelte\n<!--- copy: false  --->\n{#if expression}...{/if}\n```\n\n```svelte\n<!--- copy: false  --->\n{#if expression}...{:else if expression}...{/if}\n```\n\n```svelte\n<!--- copy: false  --->\n{#if expression}...{:else}...{/if}\n```\n\nContent that is conditionally rendered can be wrapped in an if block.\n\n```svelte\n{#if answer === 42}\n\t<p>what was the question?</p>\n{/if}\n```\n\nAdditional conditions can be added with `{:else if expression}`, optionally ending in an `{:else}` clause.\n\n```svelte\n{#if porridge.temperature > 100}\n\t<p>too hot!</p>\n{:else if 80 > porridge.temperature}\n\t<p>too cold!</p>\n{:else}\n\t<p>just right!</p>\n{/if}\n```\n\n(Blocks don't have to wrap elements, they can also wrap text within elements.)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 735, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a583f4c9-91a9-4c41-adf9-125c60c8e8d3": {"__data__": {"id_": "a583f4c9-91a9-4c41-adf9-125c60c8e8d3", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/03-each.md", "file_name": "03-each.md", "file_size": 3028, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c7da462-df5c-48a6-b6c6-98bbf1743376", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/03-each.md", "file_name": "03-each.md", "file_size": 3028, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "229afab7f21ad72af84e6155471f3e2fe39a62741003fe40453b4aa21577e636", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "502cb41c-dbfd-4bfd-9bce-cd2484905a45", "node_type": "1", "metadata": {}, "hash": "9b13870907d6dd8c14cabbf044e0f1d7ab574b5d634ec3f56f1c1bcab4f2ad16", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {#each ...}\n---\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name, index}...{/each}\n```\n\nIterating over values can be done with an each block. The values in question can be arrays, array-like objects (i.e. anything with a `length` property), or iterables like `Map` and `Set` \u2014 in other words, anything that can be used with `Array.from`.\n\n```svelte\n<h1>Shopping list</h1>\n<ul>\n\t{#each items as item}\n\t\t<li>{item.name} x {item.qty}</li>\n\t{/each}\n</ul>\n```\n\nAn each block can also specify an _index_, equivalent to the second argument in an `array.map(...)` callback:\n\n```svelte\n{#each items as item, i}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\n## Keyed each blocks\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name (key)}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name, index (key)}...{/each}\n```\n\nIf a _key_ expression is provided \u2014 which must uniquely identify each list item \u2014 Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.\n\n```svelte\n{#each items as item (item.id)}\n\t<li>{item.name} x {item.qty}</li>\n{/each}\n\n<!-- or with additional index value -->\n{#each items as item, i (item.id)}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\nYou can freely use destructuring and rest patterns in each blocks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1562, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "502cb41c-dbfd-4bfd-9bce-cd2484905a45": {"__data__": {"id_": "502cb41c-dbfd-4bfd-9bce-cd2484905a45", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/03-each.md", "file_name": "03-each.md", "file_size": 3028, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c7da462-df5c-48a6-b6c6-98bbf1743376", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/03-each.md", "file_name": "03-each.md", "file_size": 3028, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "229afab7f21ad72af84e6155471f3e2fe39a62741003fe40453b4aa21577e636", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a583f4c9-91a9-4c41-adf9-125c60c8e8d3", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/03-each.md", "file_name": "03-each.md", "file_size": 3028, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "9cfd41331bf4b9d42551a5fc0c9ddd55f15780e0fbb7a100f39a8ceb1027d5de", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.\n\n```svelte\n{#each items as item (item.id)}\n\t<li>{item.name} x {item.qty}</li>\n{/each}\n\n<!-- or with additional index value -->\n{#each items as item, i (item.id)}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\nYou can freely use destructuring and rest patterns in each blocks.\n\n```svelte\n{#each items as { id, name, qty }, i (id)}\n\t<li>{i + 1}: {name} x {qty}</li>\n{/each}\n\n{#each objects as { id, ...rest }}\n\t<li><span>{id}</span><MyComponent {...rest} /></li>\n{/each}\n\n{#each items as [id, ...rest]}\n\t<li><span>{id}</span><MyComponent values={rest} /></li>\n{/each}\n```\n\n## Each blocks without an item\n\n```svelte\n<!--- copy: false  --->\n{#each expression}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression, index}...{/each}\n```\n\nIn case you just want to render something `n` times, you can omit the `as` part ([demo](/playground/untitled#H4sIAAAAAAAAE3WR0W7CMAxFf8XKNAk0WsSeUEaRpn3Guoc0MbQiJFHiMlDVf18SOrZJ48259_jaVgZmxBEZZ28thgCNFV6xBdt1GgPj7wOji0t2EqI-wa_OleGEmpLWiID_6dIaQkMxhm1UdwKpRQhVzWSaVORJNdvWpqbhAYVsYQCNZk8thzWMC_DCHMZk3wPSThNQ088I3mghD9UwSwHwlLE5PMIzVFUFq3G7WUZ2OyUvU3JOuZU332wCXTRmtPy1NgzXZtUFp8WFw9536uWqpbIgPEaDsJBW90cTOHh0KGi2XsBq5-cT6-3nPauxXqHnsHJnCFZ3CvJVkyuCQ0mFF9TZyCQ162WGvteLKfG197Y3iv_pz_fmS68Hxt8iPBPj5HscP8YvCNX7uhYCAAA=)):\n\n```svelte\n<div class=\"chess-board\">\n\t{#each { length: 8 }, rank}\n\t\t{#each { length: 8 }, file}\n\t\t\t<div class:black={(rank + file) % 2 === 1}></div>\n\t\t{/each}\n\t{/each}\n</div>\n```\n\n## Else blocks\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name}...{:else}...{/each}\n```\n\nAn each block can also have an `{:else}` clause, which is rendered if the list is empty.\n\n```svelte\n{#each todos as todo}\n\t<p>{todo.text}</p>\n{:else}\n\t<p>No tasks today!</p>\n{/each}\n```", "mimetype": "text/plain", "start_char_idx": 1137, "end_char_idx": 3021, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7acab5f8-3529-4536-8fb5-6bd4e662ff7d": {"__data__": {"id_": "7acab5f8-3529-4536-8fb5-6bd4e662ff7d", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/04-key.md", "file_name": "04-key.md", "file_size": 469, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aec073d2-15e7-48a2-947b-cc1aecff05eb", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/04-key.md", "file_name": "04-key.md", "file_size": 469, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e901445f53c3cbed4c8014cf398b547259af2d41f629bab371725c3f52a5b7f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {#key ...}\n---\n\n```svelte\n<!--- copy: false  --->\n{#key expression}...{/key}\n```\n\nKey blocks destroy and recreate their contents when the value of an expression changes. When used around components, this will cause them to be reinstantiated and reinitialised:\n\n```svelte\n{#key value}\n\t<Component />\n{/key}\n```\n\nIt's also useful if you want a transition to play whenever a value changes:\n\n```svelte\n{#key value}\n\t<div transition:fade>{value}</div>\n{/key}\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 468, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cd4cde87-775d-48d2-b2bf-b381e0c0beec": {"__data__": {"id_": "cd4cde87-775d-48d2-b2bf-b381e0c0beec", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/05-await.md", "file_name": "05-await.md", "file_size": 2023, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa515f9a-cf2b-4727-9815-3fddcd2b10cc", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/05-await.md", "file_name": "05-await.md", "file_size": 2023, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "f80695c20d04528f9cc1d68c6210b233dca7287a5481f1315f886ce75ad675e1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {#await ...}\n---\n\n```svelte\n<!--- copy: false  --->\n{#await expression}...{:then name}...{:catch name}...{/await}\n```\n\n```svelte\n<!--- copy: false  --->\n{#await expression}...{:then name}...{/await}\n```\n\n```svelte\n<!--- copy: false  --->\n{#await expression then name}...{/await}\n```\n\n```svelte\n<!--- copy: false  --->\n{#await expression catch name}...{/await}\n```\n\nAwait blocks allow you to branch on the three possible states of a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) \u2014 pending, fulfilled or rejected.\n\n```svelte\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled or not a Promise -->\n\t<p>The value is {value}</p>\n{:catch error}\n\t<!-- promise was rejected -->\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\n> [!NOTE] During server-side rendering, only the pending branch will be rendered.\n>\n> If the provided expression is not a `Promise`, only the `:then` branch will be rendered, including during server-side rendering.\n\nThe `catch` block can be omitted if you don't need to render anything when the promise rejects (or no error is possible).\n\n```svelte\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled -->\n\t<p>The value is {value}</p>\n{/await}\n```\n\nIf you don't care about the pending state, you can also omit the initial block.\n\n```svelte\n{#await promise then value}\n\t<p>The value is {value}</p>\n{/await}\n```\n\nSimilarly, if you only want to show the error state, you can omit the `then` block.\n\n```svelte\n{#await promise catch error}\n\t<p>The error is {error}</p>\n{/await}\n```\n\n> [!NOTE] You can use `#await` with [`import(...)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) to render components lazily:\n>\n> ```svelte\n> {#await import('./Component.svelte') then { default: Component }}\n> \t<Component />\n> {/await}\n> ```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2019, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "87c55966-30b9-4467-bc80-fd5cef708234": {"__data__": {"id_": "87c55966-30b9-4467-bc80-fd5cef708234", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15d2c7fa-2928-42cc-986e-417f2bf37390", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "54e59b6bc692f19c15e7a5b766e6438851885ba18caf0a78c0785a75d6dc3f47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ad257be9-cfca-4717-8db6-b7a35617d3ca", "node_type": "1", "metadata": {}, "hash": "cf9897df33d1ad04d3b259e32944f841ab2c6f9d865657d958b2bd5e2a5a083e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {#snippet ...}\n---\n\n```svelte\n<!--- copy: false  --->\n{#snippet name()}...{/snippet}\n```\n\n```svelte\n<!--- copy: false  --->\n{#snippet name(param1, param2, paramN)}...{/snippet}\n```\n\nSnippets, and [render tags](@render), are a way to create reusable chunks of markup inside your components. Instead of writing duplicative code like [this](/playground/untitled#H4sIAAAAAAAAE5VUYW-kIBD9K8Tmsm2yXXRzvQ-s3eR-R-0HqqOQKhAZb9sz_vdDkV1t000vRmHewMx7w2AflbIGG7GnPlK8gYhFv42JthG-m9Gwf6BGcLbVXZuPSGrzVho8ZirDGpDIhldgySN5GpEMez9kaNuckY1ANJZRamRuu2ZnhEZt6a84pvs43mzD4pMsUDDi8DMkQFYCGdkvsJwblFq5uCik9bmJ4JZwUkv1eoknWigX2eGNN6aGXa6bjV8ybP-X7sM36T58SVcrIIV2xVIaA41xeD5kKqWXuqpUJEefOqVuOkL9DfBchGrzWfu0vb-RpTd3o-zBR045Ga3HfuE5BmJpKauuhbPtENlUF2sqR9jqpsPSxWsMrlngyj3VJiyYjJXb1-lMa7IWC-iSk2M5Zzh-SJjShe-siq5kpZRPs55BbSGU5YPyte4vVV_VfFXxVb10dSLf17pS2lM5HnpPxw4Zpv6x-F57p0jI3OKlVnhv5V9wPQrNYQQ9D_f6aGHlC89fq1Z3qmDkJCTCweOGF4VUFSPJvD_DhreVdA0eu8ehJJ5x91dBaBkpWm3ureCFPt3uzRv56d4kdp-2euG38XZ6dsnd3ZmPG9yRBCrzRUvi-MccOdwz3qE-fOZ7AwAhlrtTUx3c76vRhSwlFBHDtoPhefgHX3dM0PkEAAA=).\n\n```svelte\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t<figure>\n\t\t\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t\t\t<figcaption>{image.caption}</figcaption>\n\t\t\t</figure>\n\t\t</a>\n\t{:else}\n\t\t<figure>\n\t\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t\t<figcaption>{image.caption}</figcaption>\n\t\t</figure>\n\t{/if}\n{/each}\n```\n\n.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad257be9-cfca-4717-8db6-b7a35617d3ca": {"__data__": {"id_": "ad257be9-cfca-4717-8db6-b7a35617d3ca", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15d2c7fa-2928-42cc-986e-417f2bf37390", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "54e59b6bc692f19c15e7a5b766e6438851885ba18caf0a78c0785a75d6dc3f47", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87c55966-30b9-4467-bc80-fd5cef708234", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "ca53a715154b67642bddfa1c2226f8e66da4128cc84144b30d35b85c87493bf2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1de2f1c-5ab4-4b03-8df1-56e87a1ca11e", "node_type": "1", "metadata": {}, "hash": "18d1a7718cb2ffd583e9ff0e1b451563a1c9f010774cd46110c07148a451d8ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "```svelte\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t<figure>\n\t\t\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t\t\t<figcaption>{image.caption}</figcaption>\n\t\t\t</figure>\n\t\t</a>\n\t{:else}\n\t\t<figure>\n\t\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t\t<figcaption>{image.caption}</figcaption>\n\t\t</figure>\n\t{/if}\n{/each}\n```\n\n.you can write [this](/playground/untitled#H4sIAAAAAAAAE5VUYW-bMBD9KxbRlERKY4jWfSA02n5H6QcXDmwVbMs-lnaI_z6D7TTt1moTAnPvzvfenQ_GpBEd2CS_HxPJekjy5IfWyS7BFz0b9id0CM62ajDVjBS2MkLjqZQldoBE9KwFS-7I_YyUOPqlRGuqnKw5orY5pVpUduj3mitUln5LU3pI0_UuBp9FjTwnDr9AHETLMSeHK6xiGoWSLi9yYT034cwSRjohn17zcQPNFTs8s153sK9Uv_Yh0-5_5d7-o9zbD-UqCaRWrllSYZQxLw_HUhb0ta-y4NnJUxfUvc7QuLJSaO0a3oh2MLBZat8u-wsPnXzKQvTtVVF34xK5d69ThFmHEQ4SpzeVRediTG8rjD5vBSeN3E5JyHh6R1DQK9-iml5kjzQUN_lSgVU8DhYLx7wwjSvRkMDvTjiwF4zM1kXZ7DlF1eN3A7IG85e-zRrYEjjm0FkI4Cc7Ripm0pHOChexhcWXzreeZyRMU6Mk3ljxC9w4QH-cQZ_b3T5pjHxk1VNr1CDrnJy5QDh6XLO6FrLNSRb2l9gz0wo3S6m7HErSgLsPGMHkpDZK31jOanXeHPQz-eruLHUP0z6yTbpbrn223V70uMXNSpQSZjpL0y8hcxxpNqA6_ql3BQAxlxvfpQ_uT9GrWjQC6iRHM8D0MP0GQsIi92QEAAA=):\n\n```svelte\n{#snippet figure(image)}\n\t<figure>\n\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\nLike function declarations, snippets can have an arbitrary number of parameters, which can have default values, and you can destructure each parameter. You cannot use rest parameters, however.\n\n## Snippet scope\n\nSnippets can be declared anywhere inside your component.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1de2f1c-5ab4-4b03-8df1-56e87a1ca11e": {"__data__": {"id_": "a1de2f1c-5ab4-4b03-8df1-56e87a1ca11e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15d2c7fa-2928-42cc-986e-417f2bf37390", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "54e59b6bc692f19c15e7a5b766e6438851885ba18caf0a78c0785a75d6dc3f47", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad257be9-cfca-4717-8db6-b7a35617d3ca", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e4798e74288961a6b4d560357268db4002a0b98c85da87e1c26e790bb14e2036", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1557032b-322c-4703-9ffe-a2a8a1c8e14b", "node_type": "1", "metadata": {}, "hash": "a221a68cbf66751e865391062622b8abdd5a307f013a7edf6c8cdd94fe354bdc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "src} alt={image.caption} width={image.width} height={image.height} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\nLike function declarations, snippets can have an arbitrary number of parameters, which can have default values, and you can destructure each parameter. You cannot use rest parameters, however.\n\n## Snippet scope\n\nSnippets can be declared anywhere inside your component. They can reference values declared outside themselves, for example in the `<script>` tag or in `{#each ...}` blocks ([demo](/playground/untitled#H4sIAAAAAAAAE12P0QrCMAxFfyWrwhSEvc8p-h1OcG5RC10bmkyQ0n-3HQPBx3vCPUmCemiDrOpLULYbUdXqTKR2Sj6UA7_RCKbMbvJ9Jg33XpMcW9uKQYEAIzJ3T4QD3LSUDE-PnYA4YET4uOkGMc3W5B3xZrtvbVP9HDas2GqiZHqhMW6Tr9jGbG_oOCMImcUCwrIpFk1FqRyqpRpn0cmjHdAvnrIzuscyq_4nd3dPPD01ukE_NA6qFj9hvMYvGjJADw8BAAA=))...\n\n```svelte\n<script>\n\tlet { message = `it's great to see you!` } = $props();\n</script>\n\n{#snippet hello(name)}\n\t<p>hello {name}! {message}!</p>\n{/snippet}\n\n{@render hello('alice')}\n{@render hello('bob')}\n```\n\n...and they are 'visible' to everything in the same lexical scope (i.e. siblings, and children of those siblings):\n\n```svelte\n<div>\n\t{#snippet x()}\n\t\t{#snippet y()}...{/snippet}\n\n\t\t<!-- this is fine -->\n\t\t{@render y()}\n\t{/snippet}\n\n\t<!-- this will error, as `y` is not in scope -->\n\t{@render y()}\n</div>\n\n<!-- this will also error, as `x` is not in scope -->\n{@render x()}\n```\n\nSnippets can reference themselves and each other ([demo](/playground/untitled#H4sIAAAAAAAAE2WPTQqDMBCFrxLiRqH1Zysi7TlqF1YnENBJSGJLCYGeo5tesUeosfYH3c2bee_jjaWMd6BpfrAU6x5oTvdS0g01V-mFPkNnYNRaDKrxGxto5FKCIaeu1kYwFkauwsoUWtZYPh_3W5FMY4U2mb3egL9kIwY0rbhgiO-sDTgjSEqSTvIDs-jiOP7i_MHuFGAL6p9BtiSbOTl0GtzCuihqE87cqtyam6WRGz_vRcsZh5bmRg3gju4Fptq_kzQBAAA=)):\n\n```svelte\n{#snippet blastoff()}\n\t<span>\ud83d\ude80</span>\n{/snippet}\n\n{#snippet countdown(n)}\n\t{#if n > 0}\n\t\t<span>{n}...</span>\n\t\t{@render countdown(n - 1)}\n\t{:else}\n\t\t{@render blastoff()}\n\t{/if}\n{/snippet}\n\n{@render countdown(10)}\n```\n\n## Passing snippets to components\n\nWithin the template, snippets are values just like any other.", "mimetype": "text/plain", "start_char_idx": 2296, "end_char_idx": 4536, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1557032b-322c-4703-9ffe-a2a8a1c8e14b": {"__data__": {"id_": "1557032b-322c-4703-9ffe-a2a8a1c8e14b", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15d2c7fa-2928-42cc-986e-417f2bf37390", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "54e59b6bc692f19c15e7a5b766e6438851885ba18caf0a78c0785a75d6dc3f47", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1de2f1c-5ab4-4b03-8df1-56e87a1ca11e", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "57c406c4ab5d37594619a2d4ac1e9f7bb7285abb8f752b00574d5144685593f5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e3c59fbc-1cdb-449a-8d31-1b87fe17a814", "node_type": "1", "metadata": {}, "hash": "6805d3dcc8e24048952e18b93160c555068f52807a75df546b9a6109c237ad4b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "As such, they can be passed to components as props ([demo](/playground/untitled#H4sIAAAAAAAAE3VS247aMBD9lZGpBGwDASRegonaPvQL2qdlH5zYEKvBNvbQLbL875VzAcKyj3PmzJnLGU8UOwqSkd8KJdaCk4TsZS0cyV49wYuJuQiQpGd-N2bu_ooaI1YwJ57hpVYoFDqSEepKKw3mO7VDeTTaIvxiRS1gb_URxvO0ibrS8WanIrHUyiHs7Vmigy28RmyHHmKvDMbMmFq4cQInvGSwTsBYWYoMVhCSB2rBFFPsyl0uruTlR3JZCWvlTXl1Yy_mawiR_rbZKZrellJ-5JQ0RiBUgnFhJ9OGR7HKmwVoilXeIye8DOJGfYCgRlZ3iE876TBsZPX7hPdteO75PC4QaIo8vwNPePmANQ2fMeEFHrLD7rR1jTNkW986E8C3KwfwVr8HSHOSEBT_kGRozyIkn_zQveXDL3rIfPJHtUDwzShJd_Qk3gQCbOGLsdq4yfTRJopRuin3I7nv6kL7ARRjmLdBDG3uv1mhuLA3V2mKtqNEf_oCn8p9aN-WYqH5peP4kWBl1UwJzAEPT9U7K--0fRrrWnPTXpCm1_EVdXjpNmlA8G1hPPyM1fKgMqjFHjctXGjLhZ05w0qpDhksGrybuNEHtJnCalZWsuaTlfq6nPaaBSv_HKw-K57BjzOiVj9ZKQYKzQjZodYFqydYTRN4gPhVzTDO2xnma3HsVWjaLjT8nbfwHy7Q5f2dBAAA)):\n\n```svelte\n<script>\n\timport Table from './Table.svelte';\n\n\tconst fruits = [\n\t\t{ name: 'apples', qty: 5, price: 2 },\n\t\t{ name: 'bananas', qty: 10, price: 1 },\n\t\t{ name: 'cherries', qty: 20, price: 0.5 }\n\t];\n</script>\n\n{#snippet header()}\n\t<th>fruit</th>\n\t<th>qty</th>\n\t<th>price</th>\n\t<th>total</th>\n{/snippet}\n\n{#snippet row(d)}\n\t<td>{d.name}</td>\n\t<td>{d.qty}</td>\n\t<td>{d.price}</td>\n\t<td>{d.qty * d.price}</td>\n{/snippet}\n\n<Table data={fruits} {header} {row} />\n```\n\nThink about it like passing content instead of data to a component. The concept is similar to slots in web components.", "mimetype": "text/plain", "start_char_idx": 4537, "end_char_idx": 5921, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e3c59fbc-1cdb-449a-8d31-1b87fe17a814": {"__data__": {"id_": "e3c59fbc-1cdb-449a-8d31-1b87fe17a814", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15d2c7fa-2928-42cc-986e-417f2bf37390", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "54e59b6bc692f19c15e7a5b766e6438851885ba18caf0a78c0785a75d6dc3f47", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1557032b-322c-4703-9ffe-a2a8a1c8e14b", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "02fd007540979f4c9b972cfdb7e046f64a447cd1ec7fc9fa6dcb9792c7ac180d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "979ea745-271b-4c2c-b7b0-58e4291da2d2", "node_type": "1", "metadata": {}, "hash": "0b42e9973c398bac4af2c8b26047e04935e242dd61f19704b2f0ea19bb5f4f1b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The concept is similar to slots in web components.\n\nAs an authoring convenience, snippets declared directly _inside_ a component implicitly become props _on_ the component ([demo](/playground/untitled#H4sIAAAAAAAAE3VSTa_aMBD8Kyu_SkAbCA-JSzBR20N_QXt6vIMTO8SqsY29tI2s_PcqTiB8vaPHs7MzuxuIZgdBMvJLo0QlOElIJZXwJHsLBBvb_XUASc7Mb9Yu_B-hsMMK5sUzvDQahUZPMkJ96aTFfKd3KA_WOISfrFACKmcOMFmk8TWUTjY73RFLoz1C5U4SPWzhrcN2GKDrlcGEWauEnyRwxCaDdQLWyVJksII2uaMWTDPNLtzX5YX8-kgua-GcHJVXI3u5WEPb0d83O03TMZSmfRzOkG1Db7mNacOL19JagVALxoWbztq-H8U6j0SaYp2P2BGbOyQ2v8PQIFMXLKRDk177pq0zf6d8bMrzwBdd0pamyPMb-IjNEzS2f86Gz_Dwf-2F9nvNSUJQ_EOSoTuJNvngqK5v4Pas7n4-OCwlEEJcQTIMO-nSQwtb-GSdsX46e9gbRoP9yGQ11I0rEuycunu6PHx1QnPhxm3SFN15MOlYEFJZtf0dUywMbwZOeBGsrKNLYB54-1R9WNqVdki7usim6VmQphf7mnpshiQRhNAXdoOfMyX3OgMlKtz0cGEcF27uLSul3mewjPjgOOoDukxjPS9rqfh0pb-8zs6aBSt_7505aZ7B9xOi0T9YKW4UooVsr0zB1BTrWQJ3EL-oWcZ572GxFoezCk37QLe3897-B2i2U62uBAAA)):\n\n```svelte\n<!-- this is semantically the same as the above -->\n<Table data={fruits}>\n\t{#snippet header()}\n\t\t<th>fruit</th>\n\t\t<th>qty</th>\n\t\t<th>price</th>\n\t\t<th>total</th>\n\t{/snippet}\n\n\t{#snippet row(d)}\n\t\t<td>{d.name}</td>\n\t\t<td>{d.qty}</td>\n\t\t<td>{d.price}</td>\n\t\t<td>{d.qty * d.price}</td>\n\t{/snippet}\n</Table>\n```\n\nAny content inside the component tags that is _not_ a snippet declaration implicitly becomes part of the `children` snippet ([demo](/playground/untitled#H4sIAAAAAAAAE3WOQQrCMBBFrzIMggql3ddY1Du4si5sOmIwnYRkFKX07lKqglqX8_7_w2uRDw1hjlsWI5ZqTPBoLEXMdy3K3fdZDzB5Ndfep_FKVnpWHSKNce1YiCVijirqYLwUJQOYxrsgsLmIOIZjcA1M02w4n-PpomSVvTclqyEutDX6DA2pZ7_ABIVugrmEC3XJH92P55_G39GodCmWBFrQJ2PrQAwdLGHig_NxNv9xrQa1dhWIawrv1Wzeqawa8953D-8QOmaEAQAA)):\n\n```svelte\n<!--- file: App.svelte --->\n<Button>click me</Button>\n```\n\n```svelte\n<!--- file: Button.svelte --->\n<script>\n\tlet { children } = $props();\n</script>\n\n<!-- result will be <button>click me</button> -->\n<button>{@render children()}</button>\n```\n\n> [!NOTE] Note that you cannot have a prop called `children` if you also have content inside the component \u2014 for this reason, you should avoid having props with that name\n\nYou can declare snippet props as being optional.", "mimetype": "text/plain", "start_char_idx": 5871, "end_char_idx": 8006, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "979ea745-271b-4c2c-b7b0-58e4291da2d2": {"__data__": {"id_": "979ea745-271b-4c2c-b7b0-58e4291da2d2", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15d2c7fa-2928-42cc-986e-417f2bf37390", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "54e59b6bc692f19c15e7a5b766e6438851885ba18caf0a78c0785a75d6dc3f47", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e3c59fbc-1cdb-449a-8d31-1b87fe17a814", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "31e44f865fba279d7299ec7e58ea5410ddd9013d476b9c091ecb21c949d55e3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "You can either use optional chaining to not render anything if the snippet isn't set...\n\n```svelte\n<script>\n    let { children } = $props();\n</script>\n\n{@render children?.()}\n```\n\n...or use an `#if` block to render fallback content:\n\n```svelte\n<script>\n    let { children } = $props();\n</script>\n\n{#if children}\n    {@render children()}\n{:else}\n    fallback content\n{/if}\n```\n\n## Typing snippets\n\nSnippets implement the `Snippet` interface imported from `'svelte'`:\n\n```svelte\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\tdata: any[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[any]>;\n\t}\n\n\tlet { data, children, row }: Props = $props();\n</script>\n```\n\nWith this change, red squigglies will appear if you try and use the component without providing a `data` prop and a `row` snippet. Notice that the type argument provided to `Snippet` is a tuple, since snippets can have multiple parameters.\n\nWe can tighten things up further by declaring a generic, so that `data` and `row` refer to the same type:\n\n```svelte\n<script lang=\"ts\" generics=\"T\">\n\timport type { Snippet } from 'svelte';\n\n\tlet {\n\t\tdata,\n\t\tchildren,\n\t\trow\n\t}: {\n\t\tdata: T[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[T]>;\n\t} = $props();\n</script>\n```\n\n## Exporting snippets\n\nSnippets declared at the top level of a `.svelte` file can be exported from a `<script module>` for use in other components, provided they don't reference any declarations in a non-module `<script>` (whether directly or indirectly, via other snippets) ([demo](/playground/untitled#H4sIAAAAAAAAE3WPwY7CMAxEf8UyB1hRgdhjl13Bga8gHFJipEqtGyUGFUX5dxJUtEB3b9bYM_MckHVLWOKut50TMuC5tpbEY4GnuiGP5T6gXG0-ykLSB8vW2oW_UCNZq7Snv_Rjx0Kc4kpc-6OrrfwoVlK3uQ4CaGMgwsl1LUwXy0f54J9-KV4vf20cNo7YkMu22aqAz4-oOLUI9YKluDPF4h_at-hX5PFyzA1tZ84N3fGpf8YfUU6GvDumLqDKmEqCjjCHUEX4hqDTWCU5PJ6Or38c4g1cPu9tnAEAAA==)):\n\n```svelte\n<script module>\n\texport { add };\n</script>\n\n{#snippet add(a, b)}\n\t{a} + {b} = {a + b}\n{/snippet}\n```\n\n> [!NOTE]\n> This requires Svelte 5.5.0 or newer\n\n## Programmatic snippets\n\nSnippets can be created programmatically with the [`createRawSnippet`](svelte#createRawSnippet) API. This is intended for advanced use cases.\n\n## Snippets and slots\n\nIn Svelte 4, content can be passed to components using [slots](legacy-slots). Snippets are more powerful and flexible, and as such slots are deprecated in Svelte 5.", "mimetype": "text/plain", "start_char_idx": 8007, "end_char_idx": 10370, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fe09973b-2728-4007-aecc-79ec13e6e9a5": {"__data__": {"id_": "fe09973b-2728-4007-aecc-79ec13e6e9a5", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/07-@render.md", "file_name": "07-@render.md", "file_size": 791, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "929b1115-7cfa-48f9-9092-9cb46741535e", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/07-@render.md", "file_name": "07-@render.md", "file_size": 791, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "5106880ee005fc95e2a4a77507af6aaabdb64fbc9686eebcebb6a71077753cfb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {@render ...}\n---\n\nTo render a [snippet](snippet), use a `{@render ...}` tag.\n\n```svelte\n{#snippet sum(a, b)}\n\t<p>{a} + {b} = {a + b}</p>\n{/snippet}\n\n{@render sum(1, 2)}\n{@render sum(3, 4)}\n{@render sum(5, 6)}\n```\n\nThe expression can be an identifier like `sum`, or an arbitrary JavaScript expression:\n\n```svelte\n{@render (cool ? coolSnippet : lameSnippet)()}\n```\n\n## Optional snippets\n\nIf the snippet is potentially undefined \u2014 for example, because it's an incoming prop \u2014 then you can use optional chaining to only render it when it _is_ defined:\n\n```svelte\n{@render children?.()}\n```\n\nAlternatively, use an [`{#if ...}`](if) block with an `:else` clause to render fallback content:\n\n```svelte\n{#if children}\n\t{@render children()}\n{:else}\n\t<p>fallback content</p>\n{/if}\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 786, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "870aebf5-e064-4a38-bfc5-038dad6663f2": {"__data__": {"id_": "870aebf5-e064-4a38-bfc5-038dad6663f2", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/08-@html.md", "file_name": "08-@html.md", "file_size": 1174, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6841699-dcbc-4648-83bd-5f7be325a64c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/08-@html.md", "file_name": "08-@html.md", "file_size": 1174, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "15791145e919a7d51881f03f07d4c7eed3597cce1e3686e667094ba946da591e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {@html ...}\n---\n\nTo inject raw HTML into your component, use the `{@html ...}` tag:\n\n```svelte\n<article>\n\t{@html content}\n</article>\n```\n\n> [!NOTE] Make sure that you either escape the passed string or only populate it with values that are under your control in order to prevent [XSS attacks](https://owasp.org/www-community/attacks/xss/). Never render unsanitized content.\n\nThe expression should be valid standalone HTML \u2014 this will not work, because `</div>` is not valid HTML:\n\n```svelte\n{@html '<div>'}content{@html '</div>'}\n```\n\nIt also will not compile Svelte code.\n\n## Styling\n\nContent rendered this way is 'invisible' to Svelte and as such will not receive [scoped styles](scoped-styles) \u2014 in other words, this will not work, and the `a` and `img` styles will be regarded as unused:\n\n<!-- prettier-ignore -->\n```svelte\n<article>\n\t{@html content}\n</article>\n\n<style>\n\tarticle {\n\t\ta { color: hotpink }\n\t\timg { width: 100% }\n\t}\n</style>\n```\n\nInstead, use the `:global` modifier to target everything inside the `<article>`:\n\n<!-- prettier-ignore -->\n```svelte\n<style>\n\tarticle +++:global+++ {\n\t\ta { color: hotpink }\n\t\timg { width: 100% }\n\t}\n</style>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1169, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b3790dd6-3f71-4d08-9623-ec1a43c653f2": {"__data__": {"id_": "b3790dd6-3f71-4d08-9623-ec1a43c653f2", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/09-@const.md", "file_name": "09-@const.md", "file_size": 367, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea5db368-90e2-4118-aff3-fad913ee8fc3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/09-@const.md", "file_name": "09-@const.md", "file_size": 367, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "26a3e18ad4b5c47da49cc859547a33f883be2f8119839baa3817449c3be7cb6a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {@const ...}\n---\n\nThe `{@const ...}` tag defines a local constant.\n\n```svelte\n{#each boxes as box}\n\t{@const area = box.width * box.height}\n\t{box.width} * {box.height} = {area}\n{/each}\n```\n\n`{@const}` is only allowed as an immediate child of a block \u2014 `{#if ...}`, `{#each ...}`, `{#snippet ...}` and so on \u2014 a `<Component />` or a `<svelte:boundary>`.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 362, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ee2ac89-49ee-49c6-8338-0cf108b8e882": {"__data__": {"id_": "5ee2ac89-49ee-49c6-8338-0cf108b8e882", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/10-@debug.md", "file_name": "10-@debug.md", "file_size": 810, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd5d51a3-749a-4ec4-8a69-454319a98074", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/10-@debug.md", "file_name": "10-@debug.md", "file_size": 810, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "de24de046b1897adcf1e218fd3d27fc236550137a51881be7acce11ff3f788ef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: {@debug ...}\n---\n\nThe `{@debug ...}` tag offers an alternative to `console.log(...)`. It logs the values of specific variables whenever they change, and pauses code execution if you have devtools open.\n\n```svelte\n<script>\n\tlet user = {\n\t\tfirstname: 'Ada',\n\t\tlastname: 'Lovelace'\n\t};\n</script>\n\n{@debug user}\n\n<h1>Hello {user.firstname}!</h1>\n```\n\n`{@debug ...}` accepts a comma-separated list of variable names (not arbitrary expressions).\n\n```svelte\n<!-- Compiles -->\n{@debug user}\n{@debug user1, user2, user3}\n\n<!-- WON'T compile -->\n{@debug user.firstname}\n{@debug myArray[0]}\n{@debug !isReady}\n{@debug typeof user === 'object'}\n```\n\nThe `{@debug}` tag without any arguments will insert a `debugger` statement that gets triggered when _any_ state changes, as opposed to the specified variables.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 808, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7c6ac0d3-930d-496f-bc25-530f6d475980": {"__data__": {"id_": "7c6ac0d3-930d-496f-bc25-530f6d475980", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4cf41afc-92cd-4374-8cb5-d790681ffaa0", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c991791d4c915f19a732c3788afd64236314ba7e6aefed44de7b8435b3af8c6b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5db5fe6-fbb5-468e-8fa9-aed6c898ef2f", "node_type": "1", "metadata": {}, "hash": "62bc0c22be12a310b4f42e2c8a157a2024cc1106ad53023ceeaffbd614d595d3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\ufeff---\ntitle: bind:\n---\n\nData ordinarily flows down, from parent to child. The `bind:` directive allows data to flow the other way, from child to parent.\n\nThe general syntax is `bind:property={expression}`, where `expression` is an _lvalue_ (i.e. a variable or an object property). When the expression is an identifier with the same name as the property, we can omit the expression \u2014 in other words these are equivalent:\n\n<!-- prettier-ignore -->\n```svelte\n<input bind:value={value} />\n<input bind:value />\n```\n\n\nSvelte creates an event listener that updates the bound value. If an element already has a listener for the same event, that listener will be fired before the bound value is updated.\n\nMost bindings are _two-way_, meaning that changes to the value will affect the element and vice versa. A few bindings are _readonly_, meaning that changing their value will have no effect on the element.\n\n## Function bindings\n\nYou can also use `bind:property={get, set}`, where `get` and `set` are functions, allowing you to perform validation and transformation:\n\n```svelte\n<input bind:value={\n\t() => value,\n\t(v) => value = v.toLowerCase()}\n/>\n```\n\nIn the case of readonly bindings like [dimension bindings](#Dimensions), the `get` value should be `null`:\n\n```svelte\n<div\n\tbind:clientWidth={null, redraw}\n\tbind:clientHeight={null, redraw}\n>...</div>\n```\n\n> [!NOTE]\n> Function bindings are available in Svelte 5.9.0 and newer.\n\n## `<input bind:value>`\n\nA `bind:value` directive on an `<input>` element binds the input's `value` property:\n\n<!-- prettier-ignore -->\n```svelte\n<script>\n\tlet message = $state('hello');\n</script>\n\n<input bind:value={message} />\n<p>{message}</p>\n```\n\nIn the case of a numeric input (`type=\"number\"` or `type=\"range\"`), the value will be coerced to a number ([demo](/playground/untitled#H4sIAAAAAAAAE6WPwYoCMQxAfyWEPeyiOOqx2w74Hds9pBql0IllmhGXYf5dKqwiyILsLXnwwsuI-5i4oPkaUX8yo7kCnKNQV7dNzoty4qSVBSr8jG-Poixa0KAt2z5mbb14TaxA4OCtKCm_rz4-f2m403WltrlrYhMFTtcLNkoeFGqZ8yhDF7j3CCHKzpwoDexGmqCL4jwuPUJHZ-dxVcfmyYGe5MAv-La5pbxYFf5Z9Zf_UJXb-sEMquFgJJhBmGyTW5yj8lnRaD_w9D1dAKSSj7zqAQAA)):\n\n```svelte\n<script>\n\tlet a = $state(1);\n\tlet b = $state(2);\n</script>\n\n<label>\n\t<input type=\"number\" bind:value={a} min=\"0\" max=\"10\" />\n\t<input type=\"range\" bind:value={a} min=\"0\" max=\"10\" />\n</label>\n\n<label>\n\t<input type=\"number\" bind:value={b} min=\"0\" max=\"10\" />\n\t<input type=\"range\" bind:value={b} min=\"0\" max=\"10\" />\n</label>\n\n<p>{a} + {b} = {a + b}</p>\n```\n\nIf the input is empty or invalid (in the case of `type=\"number\"`), the value is `undefined`.\n\nSince 5.6.0, if an `<input>` has a `defaultValue` and is part of a form, it will revert to that value instead of the empty string when the form is reset. Note that for the initial render the value of the binding takes precedence unless it is `null` or `undefined`.\n\n```svelte\n<script>\n\tlet value = $state('');\n</script>\n\n<form>\n\t<input bind:value defaultValue=\"not the empty string\">\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\n> [!NOTE]\n> Use reset buttons sparingly, and ensure that users won't accidentally click them while trying to submit the form.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3118, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f5db5fe6-fbb5-468e-8fa9-aed6c898ef2f": {"__data__": {"id_": "f5db5fe6-fbb5-468e-8fa9-aed6c898ef2f", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4cf41afc-92cd-4374-8cb5-d790681ffaa0", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c991791d4c915f19a732c3788afd64236314ba7e6aefed44de7b8435b3af8c6b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c6ac0d3-930d-496f-bc25-530f6d475980", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "29c8fa70bb3dea605c2965e808c10b644603203e48c98c978d3f905384384a52", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b19c4805-bda2-4fa7-b071-85162985e9f5", "node_type": "1", "metadata": {}, "hash": "25eb87f46b2aba222cfd0470f99f3efd5aa484cd56f1eda77bfedec80ef185d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Since 5.6.0, if an `<input>` has a `defaultValue` and is part of a form, it will revert to that value instead of the empty string when the form is reset. Note that for the initial render the value of the binding takes precedence unless it is `null` or `undefined`.\n\n```svelte\n<script>\n\tlet value = $state('');\n</script>\n\n<form>\n\t<input bind:value defaultValue=\"not the empty string\">\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\n> [!NOTE]\n> Use reset buttons sparingly, and ensure that users won't accidentally click them while trying to submit the form.\n\n## `<input bind:checked>`\n\nCheckbox and radio inputs can be bound with `bind:checked`:\n\n```svelte\n<label>\n\t<input type=\"checkbox\" bind:checked={accepted} />\n\tAccept terms and conditions\n</label>\n```\n\nSince 5.6.0, if an `<input>` has a `defaultChecked` attribute and is part of a form, it will revert to that value instead of `false` when the form is reset. Note that for the initial render the value of the binding takes precedence unless it is `null` or `undefined`.\n\n```svelte\n<script>\n\tlet checked = $state(true);\n</script>\n\n<form>\n\t<input type=\"checkbox\" bind:checked defaultChecked={true}>\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\n## `<input bind:group>`\n\nInputs that work together can use `bind:group`.\n\n```svelte\n<script>\n\tlet tortilla = $state('Plain');\n\n\t/** @type {Array<string>} */\n\tlet fillings = $state([]);\n</script>\n\n<!-- grouped radio inputs are mutually exclusive -->\n<input type=\"radio\" bind:group={tortilla} value=\"Plain\" />\n<input type=\"radio\" bind:group={tortilla} value=\"Whole wheat\" />\n<input type=\"radio\" bind:group={tortilla} value=\"Spinach\" />\n\n<!-- grouped checkbox inputs populate an array -->\n<input type=\"checkbox\" bind:group={fillings} value=\"Rice\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Beans\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Cheese\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Guac (extra)\" />\n```\n\n> [!NOTE] `bind:group` only works if the inputs are in the same Svelte component.\n\n## `<input bind:files>`\n\nOn `<input>` elements with `type=\"file\"`, you can use `bind:files` to get the [`FileList` of selected files](https://developer.mozilla.org/en-US/docs/Web/API/FileList). When you want to update the files programmatically, you always need to use a `FileList` object. Currently `FileList` objects cannot be constructed directly, so you need to create a new [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object and get `files` from there.\n\n```svelte\n<script>\n\tlet files = $state();\n\n\tfunction clear() {\n\t\tfiles = new DataTransfer().files; // null or undefined does not work\n\t}\n</script>\n\n<label for=\"avatar\">Upload a picture:</label>\n<input accept=\"image/png, image/jpeg\" bind:files id=\"avatar\" name=\"avatar\" type=\"file\" />\n<button onclick={clear}>clear</button>\n```\n\n`FileList` objects also cannot be modified, so if you want to e.g. delete a single file from the list, you need to create a new `DataTransfer` object and add the files you want to keep.\n\n> [!NOTE] `DataTransfer` may not be available in server-side JS runtimes. Leaving the state that is bound to `files` uninitialized prevents potential errors if components are server-side rendered.\n\n## `<select bind:value>`\n\nA `<select>` value binding corresponds to the `value` property on the selected `<option>`, which can be any value (not just strings, as is normally the case in the DOM).\n\n```svelte\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b}>b</option>\n\t<option value={c}>c</option>\n</select>\n```\n\nA `<select multiple>` element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the `value` property of each selected `<option>`.", "mimetype": "text/plain", "start_char_idx": 2560, "end_char_idx": 6324, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b19c4805-bda2-4fa7-b071-85162985e9f5": {"__data__": {"id_": "b19c4805-bda2-4fa7-b071-85162985e9f5", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4cf41afc-92cd-4374-8cb5-d790681ffaa0", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c991791d4c915f19a732c3788afd64236314ba7e6aefed44de7b8435b3af8c6b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5db5fe6-fbb5-468e-8fa9-aed6c898ef2f", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "40d686847cf196d0f1bc1179fb49b17edc087720664e276f50b845e494e9e4e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68aa8df5-fe97-4e72-a8e0-229761a38438", "node_type": "1", "metadata": {}, "hash": "77e75cf7f1b5554f9b9c0dcb9e10d67e1f70b553d8ac8c9e0bc7d126324a4f5a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "delete a single file from the list, you need to create a new `DataTransfer` object and add the files you want to keep.\n\n> [!NOTE] `DataTransfer` may not be available in server-side JS runtimes. Leaving the state that is bound to `files` uninitialized prevents potential errors if components are server-side rendered.\n\n## `<select bind:value>`\n\nA `<select>` value binding corresponds to the `value` property on the selected `<option>`, which can be any value (not just strings, as is normally the case in the DOM).\n\n```svelte\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b}>b</option>\n\t<option value={c}>c</option>\n</select>\n```\n\nA `<select multiple>` element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the `value` property of each selected `<option>`.\n\n```svelte\n<select multiple bind:value={fillings}>\n\t<option value=\"Rice\">Rice</option>\n\t<option value=\"Beans\">Beans</option>\n\t<option value=\"Cheese\">Cheese</option>\n\t<option value=\"Guac (extra)\">Guac (extra)</option>\n</select>\n```\n\nWhen the value of an `<option>` matches its text content, the attribute can be omitted.\n\n```svelte\n<select multiple bind:value={fillings}>\n\t<option>Rice</option>\n\t<option>Beans</option>\n\t<option>Cheese</option>\n\t<option>Guac (extra)</option>\n</select>\n```\n\nYou can give the `<select>` a default value by adding a `selected` attribute to the`<option>` (or options, in the case of `<select multiple>`) that should be initially selected. If the `<select>` is part of a form, it will revert to that selection when the form is reset. Note that for the initial render the value of the binding takes precedence if it's not `undefined`.\n\n```svelte\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b} selected>b</option>\n\t<option value={c}>c</option>\n</select>\n```\n\n## `<audio>`\n\n`<audio>` elements have their own set of bindings \u2014 five two-way ones...\n\n- [`currentTime`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime)\n- [`playbackRate`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)\n- [`paused`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused)\n- [`volume`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume)\n- [`muted`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted)\n\n...and six readonly ones:\n\n- [`duration`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration)\n- [`buffered`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered)\n- [`seekable`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable)\n- [`seeking`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event)\n- [`ended`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended)\n- [`readyState`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState)\n\n```svelte\n<audio src={clip} bind:duration bind:currentTime bind:paused></audio>\n```\n\n## `<video>`\n\n`<video>` elements have all the same bindings as [`<audio>`](#audio) elements, plus readonly [`videoWidth`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoWidth) and [`videoHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoHeight) bindings.\n\n## `<img>`\n\n`<img>` elements have two readonly bindings:\n\n- [`naturalWidth`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth)\n- [`naturalHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight)\n\n## `<details bind:open>`\n\n`<details>` elements support binding to the `open` property.", "mimetype": "text/plain", "start_char_idx": 5483, "end_char_idx": 9202, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "68aa8df5-fe97-4e72-a8e0-229761a38438": {"__data__": {"id_": "68aa8df5-fe97-4e72-a8e0-229761a38438", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4cf41afc-92cd-4374-8cb5-d790681ffaa0", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c991791d4c915f19a732c3788afd64236314ba7e6aefed44de7b8435b3af8c6b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b19c4805-bda2-4fa7-b071-85162985e9f5", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a34f788af68b7fefd6626e09fd0afd889949d80f99168e45549bae4df69fd35c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "## `<img>`\n\n`<img>` elements have two readonly bindings:\n\n- [`naturalWidth`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth)\n- [`naturalHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight)\n\n## `<details bind:open>`\n\n`<details>` elements support binding to the `open` property.\n\n```svelte\n<details bind:open={isOpen}>\n\t<summary>How do you comfort a JavaScript bug?</summary>\n\t<p>You console it.</p>\n</details>\n```\n\n## Contenteditable bindings\n\nElements with the `contenteditable` attribute support the following bindings:\n\n- [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n- [`innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)\n- [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n\n> [!NOTE] There are [subtle differences between `innerText` and `textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#differences_from_innertext).\n\n<!-- for some reason puts the comment and html on same line -->\n<!-- prettier-ignore -->\n```svelte\n<div contenteditable=\"true\" bind:innerHTML={html} />\n```\n\n## Dimensions\n\nAll visible elements have the following readonly bindings, measured with a `ResizeObserver`:\n\n- [`clientWidth`](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth)\n- [`clientHeight`](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)\n- [`offsetWidth`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth)\n- [`offsetHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight)\n\n```svelte\n<div bind:offsetWidth={width} bind:offsetHeight={height}>\n\t<Chart {width} {height} />\n</div>\n```\n\n> [!NOTE] `display: inline` elements do not have a width or height (except for elements with 'intrinsic' dimensions, like `<img>` and `<canvas>`), and cannot be observed with a `ResizeObserver`. You will need to change the `display` style of these elements to something else, such as `inline-block`.\n\n## bind:this\n\n```svelte\n<!--- copy: false --->\nbind:this={dom_node}\n```\n\nTo get a reference to a DOM node, use `bind:this`. The value will be `undefined` until the component is mounted \u2014 in other words, you should read it inside an effect or an event handler, but not during component initialisation:\n\n```svelte\n<script>\n\t/** @type {HTMLCanvasElement} */\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst ctx = canvas.getContext('2d');\n\t\tdrawStuff(ctx);\n\t});\n</script>\n\n<canvas bind:this={canvas} />\n```\n\nComponents also support `bind:this`, allowing you to interact with component instances programmatically.\n\n```svelte\n<!--- file: App.svelte --->\n<ShoppingCart bind:this={cart} />\n\n<button onclick={() => cart.empty()}> Empty shopping cart </button>\n```\n\n```svelte\n<!--- file: ShoppingCart.svelte --->\n<script>\n\t// All instance exports are available on the instance object\n\texport function empty() {\n\t\t// ...\n\t}\n</script>\n```\n\n## bind:_property_ for components\n\n```svelte\nbind:property={variable}\n```\n\nYou can bind to component props using the same syntax as for elements.\n\n```svelte\n<Keypad bind:value={pin} />\n```\n\nWhile Svelte props are reactive without binding, that reactivity only flows downward into the component by default. Using `bind:property` allows changes to the property from within the component to flow back up out of the component.\n\nTo mark a property as bindable, use the [`$bindable`]($bindable) rune:\n\n```svelte\n<script>\n\tlet { readonlyProperty, bindableProperty = $bindable() } = $props();\n</script>\n```\n\nDeclaring a property as bindable means it _can_ be used using `bind:`, not that it _must_ be used using `bind:`.\n\nBindable properties can have a fallback value:\n\n```svelte\n<script>\n\tlet { bindableProperty = $bindable('fallback value') } = $props();\n</script>\n```\n\nThis fallback value _only_ applies when the property is _not_ bound. When the property is bound and a fallback value is present, the parent is expected to provide a value other than `undefined`, else a runtime error is thrown. This prevents hard-to-reason-about situations where it's unclear which value should apply.", "mimetype": "text/plain", "start_char_idx": 8857, "end_char_idx": 13020, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2b274951-e74c-4816-916d-1ea733c4339a": {"__data__": {"id_": "2b274951-e74c-4816-916d-1ea733c4339a", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/12-use.md", "file_name": "12-use.md", "file_size": 1880, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d9d018c-b3ec-4b0d-b97f-55e63a1d7ae7", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/12-use.md", "file_name": "12-use.md", "file_size": 1880, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "d09b5ee815cfac1808317ffe847393d357e6d559e4ddc6b95163e0f1a4c45c1d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: use:\n---\n\nActions are functions that are called when an element is mounted. They are added with the `use:` directive, and will typically use an `$effect` so that they can reset any state when the element is unmounted:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node) {\n\t\t// the node has been mounted in the DOM\n\n\t\t$effect(() => {\n\t\t\t// setup goes here\n\n\t\t\treturn () => {\n\t\t\t\t// teardown goes here\n\t\t\t};\n\t\t});\n\t}\n</script>\n\n<div use:myaction>...</div>\n```\n\nAn action can be called with an argument:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node, +++data+++) {\n\t\t// ...\n\t}\n</script>\n\n<div use:myaction={+++data+++}>...</div>\n```\n\nThe action is only called once (but not during server-side rendering) \u2014 it will _not_ run again if the argument changes.\n\n> [!LEGACY]\n> Prior to the `$effect` rune, actions could return an object with `update` and `destroy` methods, where `update` would be called with the latest value of the argument if it changed. Using effects is preferred.\n\n## Typing\n\nThe `Action` interface receives three optional type arguments \u2014 a node type (which can be `Element`, if the action applies to everything), a parameter, and any custom event handlers created by the action:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/**\n\t * @type {import('svelte/action').Action<\n\t * \tHTMLDivElement,\n\t * \tundefined,\n\t * \t{\n\t * \t\tonswiperight: (e: CustomEvent) => void;\n\t * \t\tonswipeleft: (e: CustomEvent) => void;\n\t * \t\t// ...\n\t * \t}\n\t * >}\n\t */\n\tfunction gestures(node) {\n\t\t$effect(() => {\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swipeleft'));\n\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swiperight'));\n\t\t});\n\t}\n</script>\n\n<div\n\tuse:gestures\n\tonswipeleft={next}\n\tonswiperight={prev}\n>...</div>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1875, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1df33c61-5fe7-4989-9065-b78623dbd533": {"__data__": {"id_": "1df33c61-5fe7-4989-9065-b78623dbd533", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/13-transition.md", "file_name": "13-transition.md", "file_size": 5128, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86a577b0-38d1-4ee0-b7fa-75f301920f22", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/13-transition.md", "file_name": "13-transition.md", "file_size": 5128, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "550839ec9b4d4e9ec6370cdc56c22ab4646c5ff57698db7c5817727220ae5f86", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5189ff9c-8102-46a0-af66-4f35600d78c4", "node_type": "1", "metadata": {}, "hash": "b37d241d32fad4d108ee0bcd354110a49cd1b52e53854dc8870430630f78c7ce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: transition:\n---\n\nA _transition_ is triggered by an element entering or leaving the DOM as a result of a state change.\n\nWhen a block (such as an `{#if ...}` block) is transitioning out, all elements inside it, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.\n\nThe `transition:` directive indicates a _bidirectional_ transition, which means it can be smoothly reversed while the transition is in progress.\n\n```svelte\n<script>\n\t+++import { fade } from 'svelte/transition';+++\n\n\tlet visible = $state(false);\n</script>\n\n<button onclick={() => visible = !visible}>toggle</button>\n\n{#if visible}\n\t<div +++transition:fade+++>fades in and out</div>\n{/if}\n```\n\n## Built-in transitions\n\nA selection of built-in transitions can be imported from the [`svelte/transition`](svelte-transition) module.\n\n## Local vs global\n\nTransitions are local by default. Local transitions only play when the block they belong to is created or destroyed, _not_ when parent blocks are created or destroyed.\n\n```svelte\n{#if x}\n\t{#if y}\n\t\t<p transition:fade>fades in and out only when y changes</p>\n\n\t\t<p transition:fade|global>fades in and out when x or y change</p>\n\t{/if}\n{/if}\n```\n\n## Transition parameters\n\nTransitions can have parameters.\n\n(The double `{{curlies}}` aren't a special syntax; this is an object literal inside an expression tag.)\n\n```svelte\n{#if visible}\n\t<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>\n{/if}\n```\n\n## Custom transition functions\n\n```js\n/// copy: false\n// @noErrors\ntransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\nTransitions can use custom functions. If the returned object has a `css` function, Svelte will generate keyframes for a [web animation](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).\n\nThe `t` argument passed to `css` is a value between `0` and `1` after the `easing` function has been applied. _In_ transitions run from `0` to `1`, _out_ transitions run from `1` to `0` \u2014 in other words, `1` is the element's natural state, as though no transition had been applied. The `u` argument is equal to `1 - t`.\n\nThe function is called repeatedly _before_ the transition begins, with different `t` and `u` arguments.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { elasticOut } from 'svelte/easing';\n\n\t/** @type {boolean} */\n\texport let visible;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params\n\t */\n\tfunction whoosh(node, params) {\n\t\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n\t\treturn {\n\t\t\tdelay: params.delay || 0,\n\t\t\tduration: params.duration || 400,\n\t\t\teasing: params.easing || elasticOut,\n\t\t\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<div in:whoosh>whooshes in</div>\n{/if}\n```\n\nA custom transition function can also return a `tick` function, which is called _during_ the transition with the same `t` and `u` arguments.\n\n> [!NOTE] If it's possible to use `css` instead of `tick`, do so \u2014 web animations can run off the main thread, preventing jank on slower devices.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\texport let visible = false;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ speed?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3549, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5189ff9c-8102-46a0-af66-4f35600d78c4": {"__data__": {"id_": "5189ff9c-8102-46a0-af66-4f35600d78c4", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/13-transition.md", "file_name": "13-transition.md", "file_size": 5128, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86a577b0-38d1-4ee0-b7fa-75f301920f22", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/13-transition.md", "file_name": "13-transition.md", "file_size": 5128, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "550839ec9b4d4e9ec6370cdc56c22ab4646c5ff57698db7c5817727220ae5f86", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1df33c61-5fe7-4989-9065-b78623dbd533", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/13-transition.md", "file_name": "13-transition.md", "file_size": 5128, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "2614a58f6daecd09fe6ccaa4e7169d17564bab2fa11a0e1ad8e8590f8aad7323", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "> [!NOTE] If it's possible to use `css` instead of `tick`, do so \u2014 web animations can run off the main thread, preventing jank on slower devices.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\texport let visible = false;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ speed?: number }} params\n\t */\n\tfunction typewriter(node, { speed = 1 }) {\n\t\tconst valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\n\n\t\tif (!valid) {\n\t\t\tthrow new Error(`This transition only works on elements with a single text node child`);\n\t\t}\n\n\t\tconst text = node.textContent;\n\t\tconst duration = text.length / (speed * 0.01);\n\n\t\treturn {\n\t\t\tduration,\n\t\t\ttick: (t) => {\n\t\t\t\tconst i = ~~(text.length * t);\n\t\t\t\tnode.textContent = text.slice(0, i);\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\n{/if}\n```\n\nIf a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making [crossfade effects](/tutorial/deferred-transitions) possible.\n\nTransition functions also receive a third argument, `options`, which contains information about the transition.\n\nAvailable values in the `options` object are:\n\n- `direction` - one of `in`, `out`, or `both` depending on the type of transition\n\n## Transition events\n\nAn element with transitions will dispatch the following events in addition to any standard DOM events:\n\n- `introstart`\n- `introend`\n- `outrostart`\n- `outroend`\n\n```svelte\n{#if visible}\n\t<p\n\t\ttransition:fly={{ y: 200, duration: 2000 }}\n\t\tonintrostart={() => (status = 'intro started')}\n\t\tonoutrostart={() => (status = 'outro started')}\n\t\tonintroend={() => (status = 'intro ended')}\n\t\tonoutroend={() => (status = 'outro ended')}\n\t>\n\t\tFlies in and out\n\t</p>\n{/if}\n```", "mimetype": "text/plain", "start_char_idx": 3270, "end_char_idx": 5123, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ba56f1f5-682a-44ff-b6b8-0d476913f944": {"__data__": {"id_": "ba56f1f5-682a-44ff-b6b8-0d476913f944", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/14-in-and-out.md", "file_name": "14-in-and-out.md", "file_size": 678, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a24e778b-dc93-4c2e-9eca-3f374743dc10", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/14-in-and-out.md", "file_name": "14-in-and-out.md", "file_size": 678, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "feefc787c6ee1f692c69a44cb2dc156551124c36a62acff87680f3978621e55f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: in: and out:\n---\n\nThe `in:` and `out:` directives are identical to [`transition:`](transition), except that the resulting transitions are not bidirectional \u2014 an `in` transition will continue to 'play' alongside the `out` transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.\n\n```svelte\n<script>\n  import { fade, fly } from 'svelte/transition';\n  \n  let visible = $state(false);\n</script>\n\n<label>\n  <input type=\"checkbox\" bind:checked={visible}>\n  visible\n</label>\n\n{#if visible}\n\t<div in:fly={{ y: 200 }} out:fade>flies in, fades out</div>\n{/if}\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 675, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8babec5a-d8e9-44e1-b6ee-cdd6c71b00b6": {"__data__": {"id_": "8babec5a-d8e9-44e1-b6ee-cdd6c71b00b6", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/15-animate.md", "file_name": "15-animate.md", "file_size": 3834, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0257f49-e112-4861-bfb8-474fb390fad4", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/15-animate.md", "file_name": "15-animate.md", "file_size": 3834, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "2be1d023dfc2a0b7a0cef883b3fcb9fb8859bfb2b61f4cb80db5392050c40fa0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f18ddc0a-a133-4b41-a170-33f5587c1171", "node_type": "1", "metadata": {}, "hash": "b609664b1c2480ee7029c0fd34b0226b11cc2210a380f3ee1731f053d4666cd1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: animate:\n---\n\nAn animation is triggered when the contents of a [keyed each block](each#Keyed-each-blocks) are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an _immediate_ child of a keyed each block.\n\nAnimations can be used with Svelte's [built-in animation functions](svelte-animate) or [custom animation functions](#Custom-animation-functions).\n\n```svelte\n<!-- When `list` is reordered the animation will run -->\n{#each list as item, index (item)}\n\t<li animate:flip>{item}</li>\n{/each}\n```\n\n## Animation Parameters\n\nAs with actions and transitions, animations can have parameters.\n\n(The double `{{curlies}}` aren't a special syntax; this is an object literal inside an expression tag.)\n\n```svelte\n{#each list as item, index (item)}\n\t<li animate:flip={{ delay: 500 }}>{item}</li>\n{/each}\n```\n\n## Custom animation functions\n\n```js\n/// copy: false\n// @noErrors\nanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\nAnimations can use custom functions that provide the `node`, an `animation` object and any `parameters` as arguments. The `animation` parameter is an object containing `from` and `to` properties each containing a [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect#Properties) describing the geometry of the element in its `start` and `end` positions. The `from` property is the DOMRect of the element in its starting position, and the `to` property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.\n\nIf the returned object has a `css` method, Svelte will create a [web animation](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API) that plays on the element.\n\nThe `t` argument passed to `css` is a value that goes from `0` and `1` after the `easing` function has been applied. The `u` argument is equal to `1 - t`.\n\nThe function is called repeatedly _before_ the animation begins, with different `t` and `u` arguments.\n\n<!-- TODO: Types -->\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\tcss: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n```\n\nA custom animation function can also return a `tick` function, which is called _during_ the animation with the same `t` and `u` arguments.\n\n> [!NOTE] If it's possible to use `css` instead of `tick`, do so \u2014 web animations can run off the main thread, preventing jank on slower devices.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3208, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f18ddc0a-a133-4b41-a170-33f5587c1171": {"__data__": {"id_": "f18ddc0a-a133-4b41-a170-33f5587c1171", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/15-animate.md", "file_name": "15-animate.md", "file_size": 3834, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0257f49-e112-4861-bfb8-474fb390fad4", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/15-animate.md", "file_name": "15-animate.md", "file_size": 3834, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "2be1d023dfc2a0b7a0cef883b3fcb9fb8859bfb2b61f4cb80db5392050c40fa0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8babec5a-d8e9-44e1-b6ee-cdd6c71b00b6", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/15-animate.md", "file_name": "15-animate.md", "file_size": 3834, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "49a6b978548bce77ed5c227966b3962f8dac8addccb8826ba51dc7a3ab103230", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "> [!NOTE] If it's possible to use `css` instead of `tick`, do so \u2014 web animations can run off the main thread, preventing jank on slower devices.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\ttick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n```", "mimetype": "text/plain", "start_char_idx": 3063, "end_char_idx": 3831, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29914d3f-acf0-460b-98ab-6d6289165fc8": {"__data__": {"id_": "29914d3f-acf0-460b-98ab-6d6289165fc8", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/17-style.md", "file_name": "17-style.md", "file_size": 863, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a044a92f-441f-428f-9f91-f2da5313204f", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/17-style.md", "file_name": "17-style.md", "file_size": 863, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e788e0b6c5c322107a66da1f14bd2512bfdee6de501273394757fd6b5ccf91a5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: style:\n---\n\nThe `style:` directive provides a shorthand for setting multiple styles on an element.\n\n```svelte\n<!-- These are equivalent -->\n<div style:color=\"red\">...</div>\n<div style=\"color: red;\">...</div>\n```\n\nThe value can contain arbitrary expressions:\n\n```svelte\n<div style:color={myColor}>...</div>\n```\n\nThe shorthand form is allowed:\n\n```svelte\n<div style:color>...</div>\n```\n\nMultiple styles can be set on a single element:\n\n```svelte\n<div style:color style:width=\"12rem\" style:background-color={darkMode ? 'black' : 'white'}>...</div>\n```\n\nTo mark a style as important, use the `|important` modifier:\n\n```svelte\n<div style:color|important=\"red\">...</div>\n```\n\nWhen `style:` directives are combined with `style` attributes, the directives will take precedence:\n\n```svelte\n<div style=\"color: blue;\" style:color=\"red\">This will be red</div>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 862, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e11e4038-8737-4dea-ba7d-281a545652d2": {"__data__": {"id_": "e11e4038-8737-4dea-ba7d-281a545652d2", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/18-class.md", "file_name": "18-class.md", "file_size": 3067, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56d519f2-7c7e-490f-ad44-54a26fe746a4", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/18-class.md", "file_name": "18-class.md", "file_size": 3067, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "010e27d31681091798de3af2a0840871e36d3af7535aa551edaaa4e96eb6a2f4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: class\n---\n\nThere are two ways to set classes on elements: the `class` attribute, and the `class:` directive.\n\n## Attributes\n\nPrimitive values are treated like any other attribute:\n\n```svelte\n<div class={large ? 'large' : 'small'}>...</div>\n```\n\n> [!NOTE]\n> For historical reasons, falsy values (like `false` and `NaN`) are stringified (`class=\"false\"`), though `class={undefined}` (or `null`) cause the attribute to be omitted altogether. In a future version of Svelte, all falsy values will cause `class` to be omitted.\n\n### Objects and arrays\n\nSince Svelte 5.16, `class` can be an object or array, and is converted to a string using [clsx](https://github.com/lukeed/clsx).\n\nIf the value is an object, the truthy keys are added:\n\n```svelte\n<script>\n\tlet { cool } = $props();\n</script>\n\n<!-- results in `class=\"cool\"` if `cool` is truthy,\n     `class=\"lame\"` otherwise -->\n<div class={{ cool, lame: !cool }}>...</div>\n```\n\nIf the value is an array, the truthy values are combined:\n\n```svelte\n<!-- if `faded` and `large` are both truthy, results in\n     `class=\"saturate-0 opacity-50 scale-200\"` -->\n<div class={[faded && 'saturate-0 opacity-50', large && 'scale-200']}>...</div>\n```\n\nNote that whether we're using the array or object form, we can set multiple classes simultaneously with a single condition, which is particularly useful if you're using things like Tailwind.\n\nArrays can contain arrays and objects, and clsx will flatten them. This is useful for combining local classes with props, for example:\n\n```svelte\n<!--- file: Button.svelte --->\n<script>\n\tlet props = $props();\n</script>\n\n<button {...props} class={['cool-button', props.class]}>\n\t{@render props.children?.()}\n</button>\n```\n\nThe user of this component has the same flexibility to use a mixture of objects, arrays and strings:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Button from './Button.svelte';\n\tlet useTailwind = $state(false);\n</script>\n\n<Button\n\tonclick={() => useTailwind = true}\n\tclass={{ 'bg-blue-700 sm:w-1/2': useTailwind }}\n>\n\tAccept the inevitability of Tailwind\n</Button>\n```\n\nSvelte also exposes the `ClassValue` type, which is the type of value that the `class` attribute on elements accept. This is useful if you want to use a type-safe class name in component props:\n\n```svelte\n<script lang=\"ts\">\n\timport type { ClassValue } from 'svelte/elements';\n\n\tconst props: { class: ClassValue } = $props();\n</script>\n\n<div class={['original', props.class]}>...</div>\n```\n\n## The `class:` directive\n\nPrior to Svelte 5.16, the `class:` directive was the most convenient way to set classes on elements conditionally.\n\n```svelte\n<!-- These are equivalent -->\n<div class={{ cool, lame: !cool }}>...</div>\n<div class:cool={cool} class:lame={!cool}>...</div>\n```\n\nAs with other directives, we can use a shorthand when the name of the class coincides with the value:\n\n```svelte\n<div class:cool class:lame={!cool}>...</div>\n```\n\n> [!NOTE] Unless you're using an older version of Svelte, consider avoiding `class:`, since the attribute is more powerful and composable.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3066, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2c9e4f1-74af-4476-934f-2bbcf383d9cf": {"__data__": {"id_": "b2c9e4f1-74af-4476-934f-2bbcf383d9cf", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/index.md", "file_name": "index.md", "file_size": 31, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d55f7abd-d443-44cb-803f-5a68e2f6e73b", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/index.md", "file_name": "index.md", "file_size": 31, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "f8f89029b312edd6b250a72bce2c5bfe7ddc5a54e03279de6424fe032bac82d8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Template syntax\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 30, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1f3c0cf-7927-4a75-9a00-83bc4a36e540": {"__data__": {"id_": "f1f3c0cf-7927-4a75-9a00-83bc4a36e540", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/xx-control-flow.md", "file_name": "xx-control-flow.md", "file_size": 3152, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90ea49db-900a-4824-aef7-c67a8c34707c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/xx-control-flow.md", "file_name": "xx-control-flow.md", "file_size": 3152, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "fdf8d154c3fe80b49b0f0598d9d3caae603b84aee19c8160b8138c7fae715f26", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Control flow\n---\n\n- if\n- each\n- await (or move that into some kind of data loading section?)\n- NOT: key (move into transition section, because that's the common use case)\n\nSvelte augments HTML with control flow blocks to be able to express conditionally rendered content or lists.\n\nThe syntax between these blocks is the same:\n\n- `{#` denotes the start of a block\n- `{:` denotes a different branch part of the block. Depending on the block, there can be multiple of these\n- `{/` denotes the end of a block\n\n## {#if ...}\n\n## {#each ...}\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name, index}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name (key)}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name, index (key)}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name}...{:else}...{/each}\n```\n\nIterating over lists of values can be done with an each block.\n\n```svelte\n<h1>Shopping list</h1>\n<ul>\n\t{#each items as item}\n\t\t<li>{item.name} x {item.qty}</li>\n\t{/each}\n</ul>\n```\n\nYou can use each blocks to iterate over any array or array-like value \u2014 that is, any object with a `length` property.\n\nAn each block can also specify an _index_, equivalent to the second argument in an `array.map(...)` callback:\n\n```svelte\n{#each items as item, i}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\nIf a _key_ expression is provided \u2014 which must uniquely identify each list item \u2014 Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.\n\n```svelte\n{#each items as item (item.id)}\n\t<li>{item.name} x {item.qty}</li>\n{/each}\n\n<!-- or with additional index value -->\n{#each items as item, i (item.id)}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\nYou can freely use destructuring and rest patterns in each blocks.\n\n```svelte\n{#each items as { id, name, qty }, i (id)}\n\t<li>{i + 1}: {name} x {qty}</li>\n{/each}\n\n{#each objects as { id, ...rest }}\n\t<li><span>{id}</span><MyComponent {...rest} /></li>\n{/each}\n\n{#each items as [id, ...rest]}\n\t<li><span>{id}</span><MyComponent values={rest} /></li>\n{/each}\n```\n\nAn each block can also have an `{:else}` clause, which is rendered if the list is empty.\n\n```svelte\n{#each todos as todo}\n\t<p>{todo.text}</p>\n{:else}\n\t<p>No tasks today!</p>\n{/each}\n```\n\nIt is possible to iterate over iterables like `Map` or `Set`. Iterables need to be finite and static (they shouldn't change while being iterated over). Under the hood, they are transformed to an array using `Array.from` before being passed off to rendering. If you're writing performance-sensitive code, try to avoid iterables and use regular arrays as they are more performant.\n\n## Other block types\n\nSvelte also provides [`#snippet`](snippets), [`#key`](transitions-and-animations) and [`#await`](data-fetching) blocks. You can find out more about them in their respective sections.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3145, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7258546d-4e12-450c-b444-4675cc0f79db": {"__data__": {"id_": "7258546d-4e12-450c-b444-4675cc0f79db", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/xx-data-fetching.md", "file_name": "xx-data-fetching.md", "file_size": 839, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb868661-fd11-4c68-a340-4363e90367a1", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/xx-data-fetching.md", "file_name": "xx-data-fetching.md", "file_size": 839, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a25bce6b19526809c69638ae3d1a723c01942af465a73dd6899099be543a4ae0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Data fetching\n---\n\nFetching data is a fundamental part of apps interacting with the outside world. Svelte is unopinionated with how you fetch your data. The simplest way would be using the built-in `fetch` method:\n\n```svelte\n<script>\n\tlet response = $state();\n\tfetch('/api/data').then(async (r) => (response = r.json()));\n</script>\n```\n\nWhile this works, it makes working with promises somewhat unergonomic. Svelte alleviates this problem using the `#await` block.\n\n## {#await ...}\n\n## SvelteKit loaders\n\nFetching inside your components is great for simple use cases, but it's prone to data loading waterfalls and makes code harder to work with because of the promise handling. SvelteKit solves this problem by providing a opinionated data loading story that is coupled to its router. Learn more about it [in the docs](../kit).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 838, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e10437fb-efb5-4524-ad2a-2811bfd84c92": {"__data__": {"id_": "e10437fb-efb5-4524-ad2a-2811bfd84c92", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/01-scoped-styles.md", "file_name": "01-scoped-styles.md", "file_size": 1486, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84c33698-b790-4977-8f95-6eaee7854d3f", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/01-scoped-styles.md", "file_name": "01-scoped-styles.md", "file_size": 1486, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "d90ef74340bd210c433d6024d2cbb3f0b500068272dd685ca97e0a190dc6a900", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Scoped styles\n---\n\nSvelte components can include a `<style>` element containing CSS that belongs to the component. This CSS is _scoped_ by default, meaning that styles will not apply to any elements on the page outside the component in question.\n\nThis works by adding a class to affected elements, which is based on a hash of the component styles (e.g. `svelte-123xyz`).\n\n```svelte\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\n## Specificity\n\nEach scoped selector receives a [specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) increase of 0-1-0, as a result of the scoping class (e.g. `.svelte-123xyz`) being added to the selector. This means that (for example) a `p` selector defined in a component will take precedence over a `p` selector defined in a global stylesheet, even if the global stylesheet is loaded later.\n\nIn some cases, the scoping class must be added to a selector multiple times, but after the first occurrence it is added with `:where(.svelte-xyz123)` in order to not increase specificity further.\n\n## Scoped keyframes\n\nIf a component defines `@keyframes`, the name is scoped to the component using the same hashing approach. Any `animation` rules in the component will be similarly adjusted:\n\n```svelte\n<style>\n\t.bouncy {\n\t\tanimation: bounce 10s;\n\t}\n\n\t/* these keyframes are only accessible inside this component */\n\t@keyframes bounce {\n\t\t/* ... */\n\t}\n</style>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1485, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f98b20cb-c04d-4194-a6bf-dae807cd2f4a": {"__data__": {"id_": "f98b20cb-c04d-4194-a6bf-dae807cd2f4a", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/02-global-styles.md", "file_name": "02-global-styles.md", "file_size": 1563, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05b3e958-994b-41da-8ef5-f29003b413bf", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/02-global-styles.md", "file_name": "02-global-styles.md", "file_size": 1563, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "824526809efc1d15db26bd393e548389a4721fc5822b46212836663a8f67c7eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Global styles\n---\n\n## :global(...)\n\nTo apply styles to a single selector globally, use the `:global(...)` modifier:\n\n```svelte\n<style>\n\t:global(body) {\n\t\t/* applies to <body> */\n\t\tmargin: 0;\n\t}\n\n\tdiv :global(strong) {\n\t\t/* applies to all <strong> elements, in any component,\n\t\t   that are inside <div> elements belonging\n\t\t   to this component */\n\t\tcolor: goldenrod;\n\t}\n\n\tp:global(.big.red) {\n\t\t/* applies to all <p> elements belonging to this component\n\t\t   with `class=\"big red\"`, even if it is applied\n\t\t   programmatically (for example by a library) */\n\t}\n</style>\n```\n\nIf you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with `-global-`.\n\nThe `-global-` part will be removed when compiled, and the keyframe will then be referenced using just `my-animation-name` elsewhere in your code.\n\n```svelte\n<style>\n\t@keyframes -global-my-animation-name {\n\t\t/* code goes here */\n\t}\n</style>\n```\n\n## :global\n\nTo apply styles to a group of selectors globally, create a `:global {...}` block:\n\n```svelte\n<style>\n\t:global {\n\t\t/* applies to every <div> in your application */\n\t\tdiv { ... }\n\n\t\t/* applies to every <p> in your application */\n\t\tp { ... }\n\t}\n\n\t.a :global {\n\t\t/* applies to every `.b .c .d` element, in any component,\n\t\t   that is inside an `.a` element in this component */\n\t\t.b .c .d {...}\n\t}\n</style>\n```\n\n> [!NOTE] The second example above could also be written as an equivalent `.a :global .b .c .d` selector, where everything after the `:global` is unscoped, though the nested form is preferred.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1562, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce64fd7a-4074-4a8b-b9d1-ed8eb88143d9": {"__data__": {"id_": "ce64fd7a-4074-4a8b-b9d1-ed8eb88143d9", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/03-custom-properties.md", "file_name": "03-custom-properties.md", "file_size": 1467, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5596d08c-7bde-4e05-8c6a-8da290e67b7a", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/03-custom-properties.md", "file_name": "03-custom-properties.md", "file_size": 1467, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "7a9cf93e9baa8579a36cdc4b28b69cb734c8f3b3f6fc188385d2e23d0b59bd6b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Custom properties\n---\n\nYou can pass CSS custom properties \u2014 both static and dynamic \u2014 to components:\n\n```svelte\n<Slider\n\tbind:value\n\tmin={0}\n\tmax={100}\n\t--track-color=\"black\"\n\t--thumb-color=\"rgb({r} {g} {b})\"\n/>\n```\n\nThe above code essentially desugars to this:\n\n```svelte\n<svelte-css-wrapper style=\"display: contents; --track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</svelte-css-wrapper>\n```\n\nFor an SVG element, it would use `<g>` instead:\n\n```svelte\n<g style=\"--track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</g>\n```\n\nInside the component, we can read these custom properties (and provide fallback values) using [`var(...)`](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):\n\n```svelte\n<style>\n\t.track {\n\t\tbackground: var(--track-color, #aaa);\n\t}\n\n\t.thumb {\n\t\tbackground: var(--thumb-color, blue);\n\t}\n</style>\n```\n\nYou don't _have_ to specify the values directly on the component; as long as the custom properties are defined on a parent element, the component can use them. It's common to define custom properties on the `:root` element in a global stylesheet so that they apply to your entire application.\n\n> [!NOTE] While the extra element will not affect layout, it _will_ affect any CSS selectors that (for example) use the `>` combinator to target an element directly inside the component's container.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1462, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2b0186c8-0f93-4824-99cc-14b51bac3cd2": {"__data__": {"id_": "2b0186c8-0f93-4824-99cc-14b51bac3cd2", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/04-nested-style-elements.md", "file_name": "04-nested-style-elements.md", "file_size": 506, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4743f1da-433f-4c34-9421-1cf7c3948fa0", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/04-nested-style-elements.md", "file_name": "04-nested-style-elements.md", "file_size": 506, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "2454f8b97d90afc05d8ce323b571c87031966ac5daffa9d684951900a5be329d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Nested <style> elements\n---\n\nThere can only be one top-level `<style>` tag per component.\n\nHowever, it is possible to have a `<style>` tag nested inside other elements or logic blocks.\n\nIn that case, the `<style>` tag will be inserted as-is into the DOM; no scoping or processing will be done on the `<style>` tag.\n\n```svelte\n<div>\n\t<style>\n\t\t/* this style tag will be inserted as-is */\n\t\tdiv {\n\t\t\t/* this will apply to all `<div>` elements in the DOM */\n\t\t\tcolor: red;\n\t\t}\n\t</style>\n</div>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f36338a7-f6f4-483f-b26a-d555d66df974": {"__data__": {"id_": "f36338a7-f6f4-483f-b26a-d555d66df974", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/index.md", "file_name": "index.md", "file_size": 23, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f21494e-088e-46a1-9c3f-a6029caee0ff", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/index.md", "file_name": "index.md", "file_size": 23, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "f2ff79c2a77a10d8d074a4d716a44869ac62eea2addfe942e6c3b34038a5446c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Styling\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 22, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "27680958-bed1-453d-86d8-073b86cb3433": {"__data__": {"id_": "27680958-bed1-453d-86d8-073b86cb3433", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/01-svelte-boundary.md", "file_name": "01-svelte-boundary.md", "file_size": 2692, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4317750e-55c1-4905-9ee3-d570e0e22ee7", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/01-svelte-boundary.md", "file_name": "01-svelte-boundary.md", "file_size": 2692, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c9e7da20da1fb57c7b11b49202749fd13aa8964deace8c9c1364199fdd02970d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:boundary>\n---\n\n```svelte\n<svelte:boundary onerror={handler}>...</svelte:boundary>\n```\n\n> [!NOTE]\n> This feature was added in 5.3.0\n\nBoundaries allow you to guard against errors in part of your app from breaking the app as a whole, and to recover from those errors.\n\nIf an error occurs while rendering or updating the children of a `<svelte:boundary>`, or running any [`$effect`]($effect) functions contained therein, the contents will be removed.\n\nErrors occurring outside the rendering process (for example, in event handlers or after a `setTimeout` or async work) are _not_ caught by error boundaries.\n\n## Properties\n\nFor the boundary to do anything, one or both of `failed` and `onerror` must be provided.\n\n### `failed`\n\nIf a `failed` snippet is provided, it will be rendered with the error that was thrown, and a `reset` function that recreates the contents ([demo](/playground/hello-world#H4sIAAAAAAAAE3VRy26DMBD8lS2tFCIh6JkAUlWp39Cq9EBg06CAbdlLArL87zWGKk8ORnhmd3ZnrD1WtOjFXqKO2BDGW96xqpBD5gXerm5QefG39mgQY9EIWHxueRMinLosti0UPsJLzggZKTeilLWgLGc51a3gkuCjKQ7DO7cXZotgJ3kLqzC6hmex1SZnSXTWYHcrj8LJjWTk0PHoZ8VqIdCOKayPykcpuQxAokJaG1dGybYj4gw4K5u6PKTasSbjXKgnIDlA8VvUdo-pzonraBY2bsH7HAl78mKSHZpgIcuHjq9jXSpZSLixRlveKYQUXhQVhL6GPobXAAb7BbNeyvNUs4qfRg3OnELLj5hqH9eQZqCnoBwR9lYcQxuVXeBzc8kMF8yXY4yNJ5oGiUzP_aaf_waTRGJib5_Ad3P_vbCuaYxzeNpbU0eUMPAOKh7Yw1YErgtoXyuYlPLzc10_xo_5A91zkQL_AgAA)):\n\n```svelte\n<svelte:boundary>\n\t<FlakyComponent />\n\n\t{#snippet failed(error, reset)}\n\t\t<button onclick={reset}>oops! try again</button>\n\t{/snippet}\n</svelte:boundary>\n```\n\n> [!NOTE]\n> As with [snippets passed to components](snippet#Passing-snippets-to-components), the `failed` snippet can be passed explicitly as a property...\n>\n> ```svelte\n> <svelte:boundary {failed}>...</svelte:boundary>\n> ```\n>\n> ...or implicitly by declaring it directly inside the boundary, as in the example above.\n\n### `onerror`\n\nIf an `onerror` function is provided, it will be called with the same two `error` and `reset` arguments. This is useful for tracking the error with an error reporting service...\n\n```svelte\n<svelte:boundary onerror={(e) => report(e)}>\n\t...\n</svelte:boundary>\n```\n\n...or using `error` and `reset` outside the boundary itself:\n\n```svelte\n<script>\n\tlet error = $state(null);\n\tlet reset = $state(() => {});\n\n\tfunction onerror(e, r) {\n\t\terror = e;\n\t\treset = r;\n\t}\n</script>\n\n<svelte:boundary {onerror}>\n\t<FlakyComponent />\n</svelte:boundary>\n\n{#if error}\n\t<button onclick={() => {\n\t\terror = null;\n\t\treset();\n\t}}>\n\t\toops! try again\n\t</button>\n{/if}\n```\n\nIf an error occurs inside the `onerror` function (or if you rethrow the error), it will be handled by a parent boundary if such exists.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2691, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "95aaf8d7-cbc2-475d-b4f8-407b54a5f66f": {"__data__": {"id_": "95aaf8d7-cbc2-475d-b4f8-407b54a5f66f", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/02-svelte-window.md", "file_name": "02-svelte-window.md", "file_size": 1243, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ba135d8-e951-4715-95b9-b467c002e44b", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/02-svelte-window.md", "file_name": "02-svelte-window.md", "file_size": 1243, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b856ce567ffa170ee77197c53c3c999903ac3a83ea26a75f9f136dcf156126b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:window>\n---\n\n```svelte\n<svelte:window onevent={handler} />\n```\n\n```svelte\n<svelte:window bind:prop={value} />\n```\n\nThe `<svelte:window>` element allows you to add event listeners to the `window` object without worrying about removing them when the component is destroyed, or checking for the existence of `window` when server-side rendering.\n\nThis element may only appear at the top level of your component \u2014 it cannot be inside a block or element.\n\n```svelte\n<script>\n\tfunction handleKeydown(event) {\n\t\talert(`pressed the ${event.key} key`);\n\t}\n</script>\n\n<svelte:window onkeydown={handleKeydown} />\n```\n\nYou can also bind to the following properties:\n\n- `innerWidth`\n- `innerHeight`\n- `outerWidth`\n- `outerHeight`\n- `scrollX`\n- `scrollY`\n- `online` \u2014 an alias for `window.navigator.onLine`\n- `devicePixelRatio`\n\nAll except `scrollX` and `scrollY` are readonly.\n\n```svelte\n<svelte:window bind:scrollY={y} />\n```\n\n> [!NOTE] Note that the page will not be scrolled to the initial value to avoid accessibility issues. Only subsequent changes to the bound variable of `scrollX` and `scrollY` will cause scrolling. If you have a legitimate reason to scroll when the component is rendered, call `scrollTo()` in an `$effect`.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1238, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1be2740c-26fd-4d2d-b00c-45c6294a5a19": {"__data__": {"id_": "1be2740c-26fd-4d2d-b00c-45c6294a5a19", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/03-svelte-document.md", "file_name": "03-svelte-document.md", "file_size": 726, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "827766e5-4f50-4930-92be-2629414d5325", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/03-svelte-document.md", "file_name": "03-svelte-document.md", "file_size": 726, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "0a47b472d61f1a59fc5ecd7222a5a468ae9ce64fd6dbad68d986c9ef2d2a5856", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:document>\n---\n\n```svelte\n<svelte:document onevent={handler} />\n```\n\n```svelte\n<svelte:document bind:prop={value} />\n```\n\nSimilarly to `<svelte:window>`, this element allows you to add listeners to events on `document`, such as `visibilitychange`, which don't fire on `window`. It also lets you use [actions](use) on `document`.\n\nAs with `<svelte:window>`, this element may only appear the top level of your component and must never be inside a block or element.\n\n```svelte\n<svelte:document onvisibilitychange={handleVisibilityChange} use:someAction />\n```\n\nYou can also bind to the following properties:\n\n- `activeElement`\n- `fullscreenElement`\n- `pointerLockElement`\n- `visibilityState`\n\nAll are readonly.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 725, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f74e0455-a4c5-4466-abe0-58ecff1466c6": {"__data__": {"id_": "f74e0455-a4c5-4466-abe0-58ecff1466c6", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/04-svelte-body.md", "file_name": "04-svelte-body.md", "file_size": 580, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48de5a68-99fd-4110-b7a0-48cb3cba695d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/04-svelte-body.md", "file_name": "04-svelte-body.md", "file_size": 580, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8bcfe4e66a14e8942d84a791339a47d4d0db3e0ba4b08ce979e6d8df5d16f29d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:body>\n---\n\n```svelte\n<svelte:body onevent={handler} />\n```\n\nSimilarly to `<svelte:window>`, this element allows you to add listeners to events on `document.body`, such as `mouseenter` and `mouseleave`, which don't fire on `window`. It also lets you use [actions](use) on the `<body>` element.\n\nAs with `<svelte:window>` and `<svelte:document>`, this element may only appear the top level of your component and must never be inside a block or element.\n\n```svelte\n<svelte:body onmouseenter={handleMouseenter} onmouseleave={handleMouseleave} use:someAction />\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 579, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "911ba0a3-8f01-4363-ae31-1265450030f4": {"__data__": {"id_": "911ba0a3-8f01-4363-ae31-1265450030f4", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/05-svelte-head.md", "file_name": "05-svelte-head.md", "file_size": 576, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da0c0f2c-5bd3-433e-aa19-674781f651bc", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/05-svelte-head.md", "file_name": "05-svelte-head.md", "file_size": 576, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "1c181ae09d3cc17b8018a01e54aa60bbd15ea69a80e83a32047c48428066d466", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:head>\n---\n\n```svelte\n<svelte:head>...</svelte:head>\n```\n\nThis element makes it possible to insert elements into `document.head`. During server-side rendering, `head` content is exposed separately to the main `body` content.\n\nAs with `<svelte:window>`, `<svelte:document>` and `<svelte:body>`, this element may only appear at the top level of your component and must never be inside a block or element.\n\n```svelte\n<svelte:head>\n\t<title>Hello world!</title>\n\t<meta name=\"description\" content=\"This is where the description goes for SEO\" />\n</svelte:head>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 575, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a2a1b654-143d-4635-b0cb-9b59bbe2de5c": {"__data__": {"id_": "a2a1b654-143d-4635-b0cb-9b59bbe2de5c", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/06-svelte-element.md", "file_name": "06-svelte-element.md", "file_size": 1199, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c372b535-fcd1-448e-abd2-a09dfb229797", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/06-svelte-element.md", "file_name": "06-svelte-element.md", "file_size": 1199, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "9930bffbd1a81dc3ad603aecb79255cdc9a440818872312217c1dc422ad15c11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:element>\n---\n\n```svelte\n<svelte:element this={expression} />\n```\n\nThe `<svelte:element>` element lets you render an element that is unknown at author time, for example because it comes from a CMS. Any properties and event listeners present will be applied to the element.\n\nThe only supported binding is `bind:this`, since Svelte's built-in bindings do not work with generic elements.\n\nIf `this` has a nullish value, the element and its children will not be rendered.\n\nIf `this` is the name of a [void element](https://developer.mozilla.org/en-US/docs/Glossary/Void_element) (e.g., `br`) and `<svelte:element>` has child elements, a runtime error will be thrown in development mode:\n\n```svelte\n<script>\n\tlet tag = $state('hr');\n</script>\n\n<svelte:element this={tag}>\n\tThis text cannot appear inside an hr element\n</svelte:element>\n```\n\nSvelte tries its best to infer the correct namespace from the element's surroundings, but it's not always possible. You can make it explicit with an `xmlns` attribute:\n\n```svelte\n<svelte:element this={tag} xmlns=\"http://www.w3.org/2000/svg\" />\n```\n\n`this` needs to be a valid DOM element tag, things like `#text` or `svelte:head` will not work.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1198, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8f469e2d-460a-418e-8ef7-7f9bcc480a1c": {"__data__": {"id_": "8f469e2d-460a-418e-8ef7-7f9bcc480a1c", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/07-svelte-options.md", "file_name": "07-svelte-options.md", "file_size": 1557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76a4bbe3-94c5-4050-a476-9388ccc8ff90", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/07-svelte-options.md", "file_name": "07-svelte-options.md", "file_size": 1557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "7c03c3503a40e2e4a65d8afe4c02871b52c423adb169178757c45eca0dd6bc7f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:options>\n---\n\n```svelte\n<svelte:options option={value} />\n```\n\nThe `<svelte:options>` element provides a place to specify per-component compiler options, which are detailed in the [compiler section](svelte-compiler#compile). The possible options are:\n\n- `runes={true}` \u2014 forces a component into _runes mode_ (see the [Legacy APIs](legacy-overview) section)\n- `runes={false}` \u2014 forces a component into _legacy mode_\n- `namespace=\"...\"` \u2014 the namespace where this component will be used, can be \"html\" (the default), \"svg\" or \"mathml\"\n- `customElement={...}` \u2014 the [options](custom-elements#Component-options) to use when compiling this component as a custom element. If a string is passed, it is used as the `tag` option\n- `css=\"injected\"` \u2014 the component will inject its styles inline: During server side rendering, it's injected as a `<style>` tag in the `head`, during client side rendering, it's loaded via JavaScript\n\n> [!LEGACY] Deprecated options\n> Svelte 4 also included the following options. They are deprecated in Svelte 5 and non-functional in runes mode.\n>\n> - `immutable={true}` \u2014 you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed\n> - `immutable={false}` \u2014 the default. Svelte will be more conservative about whether or not mutable objects have changed\n> - `accessors={true}` \u2014 adds getters and setters for the component's props\n> - `accessors={false}` \u2014 the default\n\n```svelte\n<svelte:options customElement=\"my-custom-element\" />\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1538, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9fdfa0bd-fa34-410a-8504-1cdf1a01d8a0": {"__data__": {"id_": "9fdfa0bd-fa34-410a-8504-1cdf1a01d8a0", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/index.md", "file_name": "index.md", "file_size": 32, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5f8ffbd8-6012-401a-aa72-42b96b933cef", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/index.md", "file_name": "index.md", "file_size": 32, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "87fbb48f0dcf8471ce6195161cb53058f630324ce20df913c721a98ed6c02e59", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Special elements\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 31, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42aef016-adcd-42e2-a5ad-48445154a001": {"__data__": {"id_": "42aef016-adcd-42e2-a5ad-48445154a001", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8226cc3-0a64-4e0a-b868-5237714438a2", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "bda47c969b2c9c417003dea63780cb8ca3108bc70603d358a817af0a74f1e072", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "36778d58-2ea3-4205-bf8b-8326a7e38971", "node_type": "1", "metadata": {}, "hash": "bbe5b3b9f6a08c7666161936a389c98e244767a247e26cdeba41cc3a7cf95a67", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Stores\n---\n\n<!-- - how to use\n- how to write\n- TODO should the details for the store methods belong to the reference section? -->\n\nA _store_ is an object that allows reactive access to a value via a simple _store contract_. The [`svelte/store` module](../svelte-store) contains minimal store implementations which fulfil this contract.\n\nAny time you have a reference to a store, you can access its value inside a component by prefixing it with the `$` character. This causes Svelte to declare the prefixed variable, subscribe to the store at component initialisation and unsubscribe when appropriate.\n\nAssignments to `$`-prefixed variables require that the variable be a writable store, and will result in a call to the store's `.set` method.\n\nNote that the store must be declared at the top level of the component \u2014 not inside an `if` block or a function, for example.\n\nLocal variables (that do not represent store values) must _not_ have a `$` prefix.\n\n```svelte\n<script>\n\timport { writable } from 'svelte/store';\n\n\tconst count = writable(0);\n\tconsole.log($count); // logs 0\n\n\tcount.set(1);\n\tconsole.log($count); // logs 1\n\n\t$count = 2;\n\tconsole.log($count); // logs 2\n</script>\n```\n\n## When to use stores\n\nPrior to Svelte 5, stores were the go-to solution for creating cross-component reactive states or extracting logic. With runes, these use cases have greatly diminished.\n\n- when extracting logic, it's better to take advantage of runes' universal reactivity: You can use runes outside the top level of components and even place them into JavaScript or TypeScript files (using a `.svelte.js` or `.svelte.ts` file ending)\n- when creating shared state, you can create a `$state` object containing the values you need and then manipulate said state\n\n```ts\n/// file: state.svelte.js\nexport const userState = $state({\n\tname: 'name',\n\t/* ... */\n});\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { userState } from './state.svelte.js';\n</script>\n\n<p>User name: {userState.name}</p>\n<button onclick={() => {\n\tuserState.name = 'new name';\n}}>\n\tchange name\n</button>\n```\n\nStores are still a good solution when you have complex asynchronous data streams or it's important to have more manual control over updating values or listening to changes. If you're familiar with RxJs and want to reuse that knowledge, the `$` also comes in handy for you.\n\n## svelte/store\n\nThe `svelte/store` module contains a minimal store implementation which fulfil the store contract. It provides methods for creating stores that you can update from the outside, stores you can only update from the inside, and for combining and deriving stores.\n\n### `writable`\n\nFunction that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional `set` and `update` methods.\n\n`set` is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.\n\n`update` is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.\n\n```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0);\n\ncount.subscribe((value) => {\n\tconsole.log(value);\n}); // logs '0'\n\ncount.set(1); // logs '1'\n\ncount.update((n) => n + 1); // logs '2'\n```\n\nIf a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a `set` function which changes the value of the store, and an `update` function which works like the `update` method on the store, taking a callback to calculate the store's new value from its old value. It must return a `stop` function that is called when the subscriber count goes from one to zero.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3890, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36778d58-2ea3-4205-bf8b-8326a7e38971": {"__data__": {"id_": "36778d58-2ea3-4205-bf8b-8326a7e38971", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8226cc3-0a64-4e0a-b868-5237714438a2", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "bda47c969b2c9c417003dea63780cb8ca3108bc70603d358a817af0a74f1e072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "42aef016-adcd-42e2-a5ad-48445154a001", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "759b339af324ef24b3cf10de6428f1a89d040a0023e0e98118a742c4084f3039", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df18c2f1-f89f-4ad3-b743-2b5933503c4e", "node_type": "1", "metadata": {}, "hash": "06d2ac9df99658157bcfeff1e0d5903e527f221ef26c01cdf0ee697f19211950", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0);\n\ncount.subscribe((value) => {\n\tconsole.log(value);\n}); // logs '0'\n\ncount.set(1); // logs '1'\n\ncount.update((n) => n + 1); // logs '2'\n```\n\nIf a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a `set` function which changes the value of the store, and an `update` function which works like the `update` method on the store, taking a callback to calculate the store's new value from its old value. It must return a `stop` function that is called when the subscriber count goes from one to zero.\n\n```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0, () => {\n\tconsole.log('got a subscriber');\n\treturn () => console.log('no more subscribers');\n});\n\ncount.set(1); // does nothing\n\nconst unsubscribe = count.subscribe((value) => {\n\tconsole.log(value);\n}); // logs 'got a subscriber', then '1'\n\nunsubscribe(); // logs 'no more subscribers'\n```\n\nNote that the value of a `writable` is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the `localStorage`.\n\n### `readable`\n\nCreates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to `readable` is the same as the second argument to `writable`.\n\n```ts\nimport { readable } from 'svelte/store';\n\nconst time = readable(new Date(), (set) => {\n\tset(new Date());\n\n\tconst interval = setInterval(() => {\n\t\tset(new Date());\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n\nconst ticktock = readable('tick', (set, update) => {\n\tconst interval = setInterval(() => {\n\t\tupdate((sound) => (sound === 'tick' ? 'tock' : 'tick'));\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n```\n\n### `derived`\n\nDerives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.\n\nIn the simplest version, `derived` takes a single store, and the callback returns a derived value.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst a: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst doubled = derived(a, ($a) => $a * 2);\n```\n\nThe callback can set a value asynchronously by accepting a second argument, `set`, and an optional third argument, `update`, calling either or both of them when appropriate.\n\nIn this case, you can also pass a third argument to `derived` \u2014 the initial value of the derived store before `set` or `update` is first called. If no initial value is specified, the store's initial value will be `undefined`.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst a: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// @errors: 18046 2769 7006\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst delayed = derived(\n\ta,\n\t($a, set) => {\n\t\tsetTimeout(() => set($a), 1000);\n\t},\n\t2000\n);\n\nconst delayedIncrement = derived(a, ($a, set, update) => {\n\tset($a);\n\tsetTimeout(() => update((x) => x + 1), 1000);\n\t// every time $a produces a value, this produces two\n\t// values, $a immediately and then $a + 1 a second later\n});\n```\n\nIf you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.", "mimetype": "text/plain", "start_char_idx": 3176, "end_char_idx": 6775, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "df18c2f1-f89f-4ad3-b743-2b5933503c4e": {"__data__": {"id_": "df18c2f1-f89f-4ad3-b743-2b5933503c4e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8226cc3-0a64-4e0a-b868-5237714438a2", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "bda47c969b2c9c417003dea63780cb8ca3108bc70603d358a817af0a74f1e072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "36778d58-2ea3-4205-bf8b-8326a7e38971", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "65dc996fc30c52bb21eba201b263c2c0f77e7f0e47404d6058dfed19efdc0815", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst frequency: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst tick = derived(\n\tfrequency,\n\t($frequency, set) => {\n\t\tconst interval = setInterval(() => {\n\t\t\tset(Date.now());\n\t\t}, 1000 / $frequency);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t},\n\t2000\n);\n```\n\nIn both cases, an array of arguments can be passed as the first argument instead of a single store.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst a: Writable<number>;\n\tconst b: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst summed = derived([a, b], ([$a, $b]) => $a + $b);\n\nconst delayed = derived([a, b], ([$a, $b], set) => {\n\tsetTimeout(() => set($a + $b), 1000);\n});\n```\n\n### `readonly`\n\nThis simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store.\n\n```js\nimport { readonly, writable } from 'svelte/store';\n\nconst writableStore = writable(1);\nconst readableStore = readonly(writableStore);\n\nreadableStore.subscribe(console.log);\n\nwritableStore.set(2); // console: 2\n// @errors: 2339\nreadableStore.set(2); // ERROR\n```\n\n### `get`\n\nGenerally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. `get` allows you to do so.\n\n> [!NOTE] This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst store: Writable<string>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nimport { get } from 'svelte/store';\n\nconst value = get(store);\n```\n\n## Store contract\n\n```ts\n// @noErrors\nstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }\n```\n\nYou can create your own stores without relying on [`svelte/store`](../svelte-store), by implementing the _store contract_:\n\n1. A store must contain a `.subscribe` method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store's current value upon calling `.subscribe`. All of a store's active subscription functions must later be synchronously called whenever the store's value changes.\n2. The `.subscribe` method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store.\n3. A store may _optionally_ contain a `.set` method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a _writable store_.\n\nFor interoperability with RxJS Observables, the `.subscribe` method is also allowed to return an object with an `.unsubscribe` method, rather than return the unsubscription function directly. Note however that unless `.subscribe` synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as `undefined` until it does.", "mimetype": "text/plain", "start_char_idx": 6777, "end_char_idx": 10232, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "79343434-edd8-4bf0-8f20-b77f4ba8fa30": {"__data__": {"id_": "79343434-edd8-4bf0-8f20-b77f4ba8fa30", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/02-context.md", "file_name": "02-context.md", "file_size": 3666, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22d13e0a-9f7b-4712-a400-737f3bfaf4be", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/02-context.md", "file_name": "02-context.md", "file_size": 3666, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "1ccdcdc398a0a7ae8a144cabebe7fee593bde208ccb887e23c3ce2cb0015acfc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Context\n---\n\n<!-- - get/set/hasContext\n- how to use, best practises (like encapsulating them) -->\n\nMost state is component-level state that lives as long as its component lives. There's also section-wide or app-wide state however, which also needs to be handled somehow.\n\nThe easiest way to do that is to create global state and just import that.\n\n```ts\n/// file: state.svelte.js\nexport const myGlobalState = $state({\n\tuser: {\n\t\t/* ... */\n\t}\n\t/* ... */\n});\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { myGlobalState } from './state.svelte.js';\n\t// ...\n</script>\n```\n\nThis has a few drawbacks though:\n\n- it only safely works when your global state is only used client-side - for example, when you're building a single page application that does not render any of your components on the server. If your state ends up being managed and updated on the server, it could end up being shared between sessions and/or users, causing bugs\n- it may give the false impression that certain state is global when in reality it should only used in a certain part of your app\n\nTo solve these drawbacks, Svelte provides a few `context` primitives which alleviate these problems.\n\n## Setting and getting context\n\nTo associate an arbitrary object with the current component, use `setContext`.\n\n```svelte\n<script>\n\timport { setContext } from 'svelte';\n\n\tsetContext('key', value);\n</script>\n```\n\nThe context is then available to children of the component (including slotted content) with `getContext`.\n\n```svelte\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst value = getContext('key');\n</script>\n```\n\n`setContext` and `getContext` solve the above problems:\n\n- the state is not global, it's scoped to the component. That way it's safe to render your components on the server and not leak state\n- it's clear that the state is not global but rather scoped to a specific component tree and therefore can't be used in other parts of your app\n\n> [!NOTE] `setContext`/`getContext` must be called during component initialisation.\n\nContext is not inherently reactive. If you need reactive values in context then you can pass a `$state` object into context, whose properties _will_ be reactive.\n\n```svelte\n<!--- file: Parent.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\tlet value = $state({ count: 0 });\n\tsetContext('counter', value);\n</script>\n\n<button onclick={() => value.count++}>increment</button>\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst value = getContext('counter');\n</script>\n\n<p>Count is {value.count}</p>\n```\n\nTo check whether a given `key` has been set in the context of a parent component, use `hasContext`.\n\n```svelte\n<script>\n\timport { hasContext } from 'svelte';\n\n\tif (hasContext('key')) {\n\t\t// do something\n\t}\n</script>\n```\n\nYou can also retrieve the whole context map that belongs to the closest parent component using `getAllContexts`. This is useful, for example, if you programmatically create a component and want to pass the existing context to it.\n\n```svelte\n<script>\n\timport { getAllContexts } from 'svelte';\n\n\tconst contexts = getAllContexts();\n</script>\n```\n\n## Encapsulating context interactions\n\nThe above methods are very unopinionated about how to use them. When your app grows in scale, it's worthwhile to encapsulate setting and getting the context into functions and properly type them.\n\n```ts\n// @errors: 2304\nimport { getContext, setContext } from 'svelte';\n\nlet userKey = Symbol('user');\n\nexport function setUserContext(user: User) {\n\tsetContext(userKey, user);\n}\n\nexport function getUserContext(): User {\n\treturn getContext(userKey) as User;\n}\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3665, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "728850a6-1410-4556-8417-9476e8bc99fe": {"__data__": {"id_": "728850a6-1410-4556-8417-9476e8bc99fe", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25b4ef3e-71cc-4b7a-be67-5abbeeee9005", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b6a6a5484a9a19bb4e7554190f1d3f6cb73b7b33aa9a83cac8798aaf680103ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f6d92174-0bf4-46e1-bb36-5cbc1fe82507", "node_type": "1", "metadata": {}, "hash": "6b364f6df1f3cb3fb2e54c3e922c8dac39ff76a6037933a01a6ea05455de2585", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Lifecycle hooks\n---\n\n<!-- - onMount/onDestroy\n- mention that `$effect` might be better for your use case\n- beforeUpdate/afterUpdate with deprecation notice?\n- or skip this entirely and only have it in the reference docs? -->\n\nIn Svelte 5, the component lifecycle consists of only two parts: Its creation and its destruction. Everything in-between \u2014 when certain state is updated \u2014 is not related to the component as a whole; only the parts that need to react to the state change are notified. This is because under the hood the smallest unit of change is actually not a component, it's the (render) effects that the component sets up upon component initialization. Consequently, there's no such thing as a \"before update\"/\"after update\" hook.\n\n## `onMount`\n\nThe `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live _inside_ the component; it can be called from an external module).\n\n`onMount` does not run inside a component that is rendered on the server.\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconsole.log('the component has mounted');\n\t});\n</script>\n```\n\nIf a function is returned from `onMount`, it will be called when the component is unmounted.\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tconsole.log('beep');\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n\t});\n</script>\n```\n\n> [!NOTE] This behaviour will only work when the function passed to `onMount` _synchronously_ returns a value. `async` functions always return a `Promise`, and as such cannot _synchronously_ return a function.\n\n## `onDestroy`\n\n> EXPORT_SNIPPET: svelte#onDestroy\n\nSchedules a callback to run immediately before the component is unmounted.\n\nOut of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the only one that runs inside a server-side component.\n\n```svelte\n<script>\n\timport { onDestroy } from 'svelte';\n\n\tonDestroy(() => {\n\t\tconsole.log('the component is being destroyed');\n\t});\n</script>\n```\n\n## `tick`\n\nWhile there's no \"after update\" hook, you can use `tick` to ensure that the UI is updated before continuing. `tick` returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.\n\n```svelte\n<script>\n\timport { tick } from 'svelte';\n\n\t$effect.pre(() => {\n\t\tconsole.log('the component is about to update');\n\t\ttick().then(() => {\n\t\t\t\tconsole.log('the component just updated');\n\t\t});\n\t});\n</script>\n```\n\n## Deprecated: `beforeUpdate` / `afterUpdate`\n\nSvelte 4 contained hooks that ran before and after the component as a whole was updated. For backwards compatibility, these hooks were shimmed in Svelte 5 but not available inside components that use runes.\n\n```svelte\n<script>\n\timport { beforeUpdate, afterUpdate } from 'svelte';\n\n\tbeforeUpdate(() => {\n\t\tconsole.log('the component is about to update');\n\t});\n\n\tafterUpdate(() => {\n\t\tconsole.log('the component just updated');\n\t});\n</script>\n```\n\nInstead of `beforeUpdate` use `$effect.pre` and instead of `afterUpdate` use `$effect` instead - these runes offer more granular control and only react to the changes you're actually interested in.\n\n### Chat window example\n\nTo implement a chat window that autoscrolls to the bottom when new messages appear (but only if you were _already_ scrolled to the bottom), we need to measure the DOM before we update it.\n\nIn Svelte 4, we do this with `beforeUpdate`, but this is a flawed approach \u2014 it fires before _every_ update, whether it's relevant or not. In the example below, we need to introduce checks like `updatingMessages` to make sure we don't mess with the scroll position when someone toggles dark mode.\n\nWith runes, we can use `$effect.pre`, which behaves the same as `$effect` but runs before the DOM is updated. As long as we explicitly reference `messages` inside the effect body, it will run whenever `messages` changes, but _not_ when `theme` changes.\n\n`beforeUpdate`, and its equally troublesome counterpart `afterUpdate`, are therefore deprecated in Svelte 5.\n\n-", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4194, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f6d92174-0bf4-46e1-bb36-5cbc1fe82507": {"__data__": {"id_": "f6d92174-0bf4-46e1-bb36-5cbc1fe82507", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25b4ef3e-71cc-4b7a-be67-5abbeeee9005", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b6a6a5484a9a19bb4e7554190f1d3f6cb73b7b33aa9a83cac8798aaf680103ed", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "728850a6-1410-4556-8417-9476e8bc99fe", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8f82097ceecca0873f06d69bcbb69f95d926e0f27189ac0536c05103e8fc7828", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "804a0f55-e85d-427f-a7a3-4ed40fa0cabd", "node_type": "1", "metadata": {}, "hash": "acfda2258e7e7c61e86e675f1aba5af75cbf8906d548023a22a60084ea898d38", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "### Chat window example\n\nTo implement a chat window that autoscrolls to the bottom when new messages appear (but only if you were _already_ scrolled to the bottom), we need to measure the DOM before we update it.\n\nIn Svelte 4, we do this with `beforeUpdate`, but this is a flawed approach \u2014 it fires before _every_ update, whether it's relevant or not. In the example below, we need to introduce checks like `updatingMessages` to make sure we don't mess with the scroll position when someone toggles dark mode.\n\nWith runes, we can use `$effect.pre`, which behaves the same as `$effect` but runs before the DOM is updated. As long as we explicitly reference `messages` inside the effect body, it will run whenever `messages` changes, but _not_ when `theme` changes.\n\n`beforeUpdate`, and its equally troublesome counterpart `afterUpdate`, are therefore deprecated in Svelte 5.\n\n- [Before](/playground/untitled#H4sIAAAAAAAAE31WXa_bNgz9K6yL1QmWOLlrC-w6H8MeBgwY9tY9NfdBtmlbiywZkpyPBfnvo2zLcZK28AWuRPGI5OGhkEuQc4EmiL9eAskqDOLg97oOZoE9125jDigs0t6oRqfOsjap5rXd7uTO8qpW2sIFEsyVxn_qjFmcAcstar-xPN3DFXKtKgi768IVgQku0ELj3Lgs_kZjWIEGNpAzYXDlHWyJFZI1zJjeh4O5uvl_DY8oUkVeVoFuJKYls-_CGYS25Aboj0EtWNqel0wWoBoLTGZgmdgDS9zW4Uz4NsrswPHoyutN4xInkylstnBxdmIhh8m7xzqmoNE2Wq46n1RJQzEbq4g-JQSl7e-HDx-GdaTy3KD9E3lRWvj5Zu9QX1QN20dj7zyHz8s-1S6lW7Cpz3RnXTcm04hIlfdFuO8p2mQ5-3a06cqjrn559bF_2NHOnRZ5I1PLlXQNyQT-hedMHeUEDyjtdMxsa4n2eIbNhlTwhyRthaOKOmYtniwF6pwt0wXa6MBEg0OibZec27gz_dk3UrZ6hB2LLYoiv521Yd8Gt-foTrfhiCDP0lC9VUUhcDLU49Xe_9943cNvEArHfAjxeBTovvXiNpFynfEDpIIZs9kFbg52QbeNHWZzebz32s7xHco3nJAJl1nshmhz8dYOQJDyZetnbb2gTWe-vEeWlrfpZMavr56ldb29eNt6UXvgwgFbp_WC0tl2RK25rGk6lYz3nUI2lzvBXGHhPZPGWmKUXFNBKqdaW259wl_aHbiqoVIZdpE60Nax6IOujT0LbFFxIVTCxCRR2XloUcYNvSbnGHKBp763jHoj59xiZWJI0Wm0P_m3MSS985xkasn-cFq20xTDy3J5KFcjgUTD69BHdcHIjz431z28IqlxGcPSfdFnrGDZn6gD6lyo45zyHAD-btczf-98nhQxHEvKfeUtOVkSejD3q-9X7JbzjGtsdUxlKdFU8qGsT78uaw848syWMXz85Waq2Gnem4mAn3prweq4q6Y3JEpnqMmnPoFRgmd3ySW0LLRqSKlwYHriCvJvUs2yjMaaoA-XzTXLeGMe45zmhv_XAno3Mj0xF7USuqNvnE9H343QHlq-eAgxpbTPNR9yzUkgLjwSR0NK4wKoxy-jDg-9vy8sUSToakzW-9fX13Em9Q8T6Z26uZhBN36XUYo5q7ggLXBZoub2Ofv7g6GCZfTxe034NCjiudXj7Omla0eTfo7QBPOcYxbE7qG-vl3_B1G-_i_JCAAA)\n-", "mimetype": "text/plain", "start_char_idx": 3317, "end_char_idx": 5496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "804a0f55-e85d-427f-a7a3-4ed40fa0cabd": {"__data__": {"id_": "804a0f55-e85d-427f-a7a3-4ed40fa0cabd", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25b4ef3e-71cc-4b7a-be67-5abbeeee9005", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b6a6a5484a9a19bb4e7554190f1d3f6cb73b7b33aa9a83cac8798aaf680103ed", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6d92174-0bf4-46e1-bb36-5cbc1fe82507", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "d8624cbd9b0a5b20bcffc83e2f181f3f0e4ff6c1b14a923c784fa969b3bffdd8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "983c9aa1-4fa6-4cfd-8d60-5869e01d4ae1", "node_type": "1", "metadata": {}, "hash": "a2acee7cd2966067f9f24bcf697311992992bb5c35f7d116e4f0fa0999f0263b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[After](/playground/untitled#H4sIAAAAAAAAE31WXa-jNhD9K7PsdknUQJLurtRLPqo-VKrU1327uQ8GBnBjbGSb5KZR_nvHgMlXtyIS9njO-MyZGZRzUHCBJkhez4FkNQZJ8HvTBLPAnhq3MQcUFmlvVKszZ1mbTPPGbndyZ3ndKG3hDJZne7hAoVUNYY8JV-RBPgIt2AprhA18MpZZnIQ50_twuvLHNRrDSjRXj9fwiCJTBLIKdCsxq5j9EM4gtBU3QD8GjWBZd14xWYJqLTCZg2ViDyx1W4cz4dv0hsiB49FRHkyfsCgws3GjcTKZwmYLZ2feWc9o1W8zJQ2Fb62i5JUQRNRHgs-fx3WsisKg_RN5WVn4-WrvUd9VA9tH4-AcwbfFQIpkLWByvWzqSe2sk3kyjUlOec_XPU-3TRaz_75tuvKoi19e3OvipSpamVmupJM2F_gXnnJ1lBM8oLQjHceys8R7PMFms4HwD2lRhzeEe-EsvluSrHe2TJdo4wMTLY48XKwPzm0KGm2r5ajFtRYU4TWOY7-ddWHfxhDP0QkQhnf5PWRnVVkKnIx8fZsOb5dR16nwG4TCCRdCMphWQ7z1_DoOcp3zA2SCGbPZBa5jd0G_TRxmc36Me-mG6A7l60XIlMs8ce2-OXtrDyBItdz6qVjPadObzx-RZdV1nJjx64tXad1sz962njceOHfAzmk9JzrbXqg1lw3NkZL7vgE257t-uMDcO6attSSokpmgFqVMO2U93e_dDlzOUKsc-3t6zNZp6K9cG3sS2KGSUqiUiUmq8tNYoJwbmvpTAoXA96GyjCojI26xNglk6DpwOPm7NdRYp4ia0JL94bTqRiGB5WJxqFY37RGPoz3c6i4jP3rcUA7wmhqNywQW7om_YQ2L4UQdUBdCHSPiOQJ8bFcxHzeK0jKBY0XcV95SkCWlD9t-9eOM3TLKucauiyktJdpaPqT19ddF4wFHntsqgS-_XE01e48GMwnw02AtWZP02QyGVOkcNfk072CU4PkduZSWpVYt9SkcmJ64hPwHpWF5ziVls3wIFmmW89Y83vMeGf5PBxjcyPSkXNy10J18t3x6-a6CDtBq6SGklNKeazFyLahB3PVIGo2UbhOgGi9vKjzW_j6xVFFD17difXx5ebll0vwvkcGpn4sZ9MN3vqFYsJoL6gUuK9TcPrO_PxgzWMRfflSEr2NHPJf6lj1957rRpH8CNMG84JgHidUtXt4u_wK21LXERAgAAA==)\n\n<!-- prettier-ignore -->\n```svelte\n<script>\n\timport { ---beforeUpdate, afterUpdate,--- tick } from 'svelte';\n\n\t---let updatingMessages = false;---\n\tlet theme = +++$state('dark')+++;\n\tlet messages = +++$state([])+++;\n\n\tlet viewport;\n\n\t---beforeUpdate(() => {---\n\t+++$effect.pre(() => {+++\n\t\t---if (!updatingMessages) return;---\n\t\t+++messages;", "mimetype": "text/plain", "start_char_idx": 5497, "end_char_idx": 7106, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "983c9aa1-4fa6-4cfd-8d60-5869e01d4ae1": {"__data__": {"id_": "983c9aa1-4fa6-4cfd-8d60-5869e01d4ae1", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25b4ef3e-71cc-4b7a-be67-5abbeeee9005", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b6a6a5484a9a19bb4e7554190f1d3f6cb73b7b33aa9a83cac8798aaf680103ed", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "804a0f55-e85d-427f-a7a3-4ed40fa0cabd", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "1245bc467ee51e38e327298c6d507f212a34e535c6831defbd68dc0450293143", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "prettier-ignore -->\n```svelte\n<script>\n\timport { ---beforeUpdate, afterUpdate,--- tick } from 'svelte';\n\n\t---let updatingMessages = false;---\n\tlet theme = +++$state('dark')+++;\n\tlet messages = +++$state([])+++;\n\n\tlet viewport;\n\n\t---beforeUpdate(() => {---\n\t+++$effect.pre(() => {+++\n\t\t---if (!updatingMessages) return;---\n\t\t+++messages;+++\n\t\tconst autoscroll = viewport && viewport.offsetHeight + viewport.scrollTop > viewport.scrollHeight - 50;\n\n\t\tif (autoscroll) {\n\t\t\ttick().then(() => {\n\t\t\t\tviewport.scrollTo(0, viewport.scrollHeight);\n\t\t\t});\n\t\t}\n\n\t\t---updatingMessages = false;---\n\t});\n\n\tfunction handleKeydown(event) {\n\t\tif (event.key === 'Enter') {\n\t\t\tconst text = event.target.value;\n\t\t\tif (!text) return;\n\n\t\t\t---updatingMessages = true;---\n\t\t\tmessages = [.messages, text];\n\t\t\tevent.target.value = '';\n\t\t}\n\t}\n\n\tfunction toggle() {\n\t\ttoggleValue = !toggleValue;\n\t}\n</script>\n\n<div class:dark={theme === 'dark'}>\n\t<div bind:this={viewport}>\n\t\t{#each messages as message}\n\t\t\t<p>{message}</p>\n\t\t{/each}\n\t</div>\n\n\t<input +++onkeydown+++={handleKeydown} />\n\n\t<button +++onclick+++={toggle}> Toggle dark mode </button>\n</div>\n```", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9f12b27d-29be-4a77-a48b-82ece5eb8816": {"__data__": {"id_": "9f12b27d-29be-4a77-a48b-82ece5eb8816", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/04-imperative-component-api.md", "file_name": "04-imperative-component-api.md", "file_size": 2681, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b7b610-7ef4-4e02-8fca-2470625ba5bc", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/04-imperative-component-api.md", "file_name": "04-imperative-component-api.md", "file_size": 2681, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a837635da398437fdb018ad151e1ab196f1609d171c0e1b4f8bdd7182cda2158", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Imperative component API\n---\n\n<!-- better title needed?\n\n- mount\n- unmount\n- render\n- hydrate\n- how they interact with each other -->\n\nEvery Svelte application starts by imperatively creating a root component. On the client this component is mounted to a specific element. On the server, you want to get back a string of HTML instead which you can render. The following functions help you achieve those tasks.\n\n## `mount`\n\nInstantiates a component and mounts it to the given target:\n\n```js\n// @errors: 2322\nimport { mount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\nYou can mount multiple components per page, and you can also mount from within your application, for example when creating a tooltip component and attaching it to the hovered element.\n\nNote that unlike calling `new App(...)` in Svelte 4, things like effects (including `onMount` callbacks, and action functions) will not run during `mount`. If you need to force pending effects to run (in the context of a test, for example) you can do so with `flushSync()`.\n\n## `unmount`\n\nUnmounts a component that was previously created with [`mount`](#mount) or [`hydrate`](#hydrate).\n\nIf `options.outro` is `true`, [transitions](transition) will play before the component is removed from the DOM:\n\n```js\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { target: document.body });\n\n// later\nunmount(app, { outro: true });\n```\n\nReturns a `Promise` that resolves after transitions have completed if `options.outro` is true, or immediately otherwise.\n\n## `render`\n\nOnly available on the server and when compiling with the `server` option. Takes a component and returns an object with `body` and `head` properties on it, which you can use to populate the HTML when server-rendering your app:\n\n```js\n// @errors: 2724 2305 2307\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst result = render(App, {\n\tprops: { some: 'property' }\n});\nresult.body; // HTML for somewhere in this <body> tag\nresult.head; // HTML for somewhere in this <head> tag\n```\n\n## `hydrate`\n\nLike `mount`, but will reuse up any HTML rendered by Svelte's SSR output (from the [`render`](#render) function) inside the target and make it interactive:\n\n```js\n// @errors: 2322\nimport { hydrate } from 'svelte';\nimport App from './App.svelte';\n\nconst app = hydrate(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\nAs with `mount`, effects will not run during `hydrate` \u2014 use `flushSync()` immediately afterwards if you need them to.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2678, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6fa5e994-9f8d-4ca1-8ce9-1a02e18b1033": {"__data__": {"id_": "6fa5e994-9f8d-4ca1-8ce9-1a02e18b1033", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/index.md", "file_name": "index.md", "file_size": 23, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c04e1875-a8cf-4d86-a82a-2647e13a4176", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/index.md", "file_name": "index.md", "file_size": 23, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "2af8e583e60351efa7059687fc43462d7855ac05ea176cf7aad65fce1a936a05", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Runtime\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 22, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "77f89aae-4eba-4bf7-8f78-ae7614f409a6": {"__data__": {"id_": "77f89aae-4eba-4bf7-8f78-ae7614f409a6", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d541a4a7-5460-4a1d-8249-0db167b6d95c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "9283ae547f12cb2fc463451860e7ccffe8a38ee4f8b0951539f2f3b3ac53207c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e5ecbf67-9aae-45f4-a070-012d4e1f310e", "node_type": "1", "metadata": {}, "hash": "b3b4195741840d6be7a996a5eca75fb5115189c02fca489bffef79658490d469", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Testing\n---\n\nTesting helps you write and maintain your code and guard against regressions. Testing frameworks help you with that, allowing you to describe assertions or expectations about how your code should behave. Svelte is unopinionated about which testing framework you use \u2014 you can write unit tests, integration tests, and end-to-end tests using solutions like [Vitest](https://vitest.dev/), [Jasmine](https://jasmine.github.io/), [Cypress](https://www.cypress.io/) and [Playwright](https://playwright.dev/).\n\n## Unit and integration testing using Vitest\n\nUnit tests allow you to test small isolated parts of your code. Integration tests allow you to test parts of your application to see if they work together. If you're using Vite (including via SvelteKit), we recommend using [Vitest](https://vitest.dev/).\n\nTo get started, install Vitest:\n\n```bash\nnpm install -D vitest\n```\n\nThen adjust your `vite.config.js`:\n\n<!-- prettier-ignore -->\n```js\n/// file: vite.config.js\nimport { defineConfig } from +++'vitest/config'+++;\n\nexport default defineConfig({\n\t// ...\n\t// Tell Vitest to use the `browser` entry points in `package.json` files, even though it's running in Node\n\tresolve: process.env.VITEST\n\t\t?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1220, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5ecbf67-9aae-45f4-a070-012d4e1f310e": {"__data__": {"id_": "e5ecbf67-9aae-45f4-a070-012d4e1f310e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d541a4a7-5460-4a1d-8249-0db167b6d95c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "9283ae547f12cb2fc463451860e7ccffe8a38ee4f8b0951539f2f3b3ac53207c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "77f89aae-4eba-4bf7-8f78-ae7614f409a6", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8050e7b2266f0a163e93242e389cf6c2fee516b8f73288e7426893e68b4955c1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "54c2468c-d9e6-41b6-a8ad-28f50fa0e174", "node_type": "1", "metadata": {}, "hash": "c12026d6b1ccb4395306c3fa656147d6ccb920c1e46c46b131546b3c627601f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "## Unit and integration testing using Vitest\n\nUnit tests allow you to test small isolated parts of your code. Integration tests allow you to test parts of your application to see if they work together. If you're using Vite (including via SvelteKit), we recommend using [Vitest](https://vitest.dev/).\n\nTo get started, install Vitest:\n\n```bash\nnpm install -D vitest\n```\n\nThen adjust your `vite.config.js`:\n\n<!-- prettier-ignore -->\n```js\n/// file: vite.config.js\nimport { defineConfig } from +++'vitest/config'+++;\n\nexport default defineConfig({\n\t// ...\n\t// Tell Vitest to use the `browser` entry points in `package.json` files, even though it's running in Node\n\tresolve: process.env.VITEST\n\t\t? {\n\t\t\t\tconditions: ['browser']\n\t\t\t}\n\t\t: undefined\n});\n```\n\n> [!NOTE] If loading the browser version of all your packages is undesirable, because (for example) you also test backend libraries, [you may need to resort to an alias configuration](https://github.com/testing-library/svelte-testing-library/issues/222#issuecomment-1909993331)\n\nYou can now write unit tests for code inside your `.js/.ts` files:\n\n```js\n/// file: multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet double = multiplier(0, 2);\n\n\texpect(double.value).toEqual(0);\n\n\tdouble.set(5);\n\n\texpect(double.value).toEqual(10);\n});\n```\n\n```js\n/// file: multiplier.svelte.js\n/**\n * @param {number} initial\n * @param {number} k\n */\nexport function multiplier(initial, k) {\n\tlet count = $state(initial);\n\n\treturn {\n\t\tget value() {\n\t\t\treturn count * k;\n\t\t},\n\t\t/** @param {number} c */\n\t\tset: (c) => {\n\t\t\tcount = c;\n\t\t}\n\t};\n}\n```\n\n### Using runes inside your test files\n\nSince Vitest processes your test files the same way as your source files, you can use runes inside your tests as long as the filename includes `.svelte`:\n\n```js\n/// file: multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet count = $state(0);\n\tlet double = multiplier(() => count, 2);\n\n\texpect(double.value).toEqual(0);\n\n\tcount = 5;\n\n\texpect(double.value).toEqual(10);\n});\n```\n\n```js\n/// file: multiplier.svelte.js\n/**\n * @param {() => number} getCount\n * @param {number} k\n */\nexport function multiplier(getCount, k) {\n\treturn {\n\t\tget value() {\n\t\t\treturn getCount() * k;\n\t\t}\n\t};\n}\n```\n\nIf the code being tested uses effects, you need to wrap the test inside `$effect.root`:\n\n```js\n/// file: logger.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { logger } from './logger.svelte.js';\n\ntest('Effect', () => {\n\tconst cleanup = $effect.root(() => {\n\t\tlet count = $state(0);\n\n\t\t// logger uses an $effect to log updates of its input\n\t\tlet log = logger(() => count);\n\n\t\t// effects normally run after a microtask,\n\t\t// use flushSync to execute all pending effects synchronously\n\t\tflushSync();\n\t\texpect(log.value).toEqual([0]);\n\n\t\tcount = 1;\n\t\tflushSync();\n\n\t\texpect(log.value).toEqual([0, 1]);\n\t});\n\n\tcleanup();\n});\n```\n\n```js\n/// file: logger.svelte.js\n/**\n * @param {() => any} getValue\n */\nexport function logger(getValue) {\n\t/** @type {any[]} */\n\tlet log = $state([]);\n\n\t$effect(() => {\n\t\tlog.push(getValue());\n\t});\n\n\treturn {\n\t\tget value() {\n\t\t\treturn log;\n\t\t}\n\t};\n}\n```\n\n### Component testing\n\nIt is possible to test your components in isolation using Vitest.\n\n> [!NOTE] Before writing component tests, think about whether you actually need to test the component, or if it's more about the logic _inside_ the component.", "mimetype": "text/plain", "start_char_idx": 528, "end_char_idx": 4184, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "54c2468c-d9e6-41b6-a8ad-28f50fa0e174": {"__data__": {"id_": "54c2468c-d9e6-41b6-a8ad-28f50fa0e174", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d541a4a7-5460-4a1d-8249-0db167b6d95c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "9283ae547f12cb2fc463451860e7ccffe8a38ee4f8b0951539f2f3b3ac53207c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e5ecbf67-9aae-45f4-a070-012d4e1f310e", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "d59fda35c5b79d912838ea67bccdd4f0911a640c46e910255e2f26f9179b1ff6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "429e9770-629d-40d0-909a-8972c203b513", "node_type": "1", "metadata": {}, "hash": "5a3ac61ac5a0ab67bbf0513dc9e10bb560f3bfa705b350ed6a8b3420a74c1c5a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "> [!NOTE] Before writing component tests, think about whether you actually need to test the component, or if it's more about the logic _inside_ the component. If so, consider extracting out that logic to test it in isolation, without the overhead of a component\n\nTo get started, install jsdom (a library that shims DOM APIs):\n\n```bash\nnpm install -D jsdom\n```\n\nThen adjust your `vite.config.js`:\n\n```js\n/// file: vite.config.js\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n\tplugins: [\n\t\t/* ... */\n\t],\n\ttest: {\n\t\t// If you are testing components client-side, you need to setup a DOM environment.\n\t\t// If not all your files should have this environment, you can use a\n\t\t// `// @vitest-environment jsdom` comment at the top of the test files instead.\n\t\tenvironment: 'jsdom'\n\t},\n\t// Tell Vitest to use the `browser` entry points in `package.json` files, even though it's running in Node\n\tresolve: process.env.VITEST\n\t\t? {\n\t\t\t\tconditions: ['browser']\n\t\t\t}\n\t\t: undefined\n});\n```\n\nAfter that, you can create a test file in which you import the component to test, interact with it programmatically and write expectations about the results:\n\n```js\n/// file: component.test.js\nimport { flushSync, mount, unmount } from 'svelte';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', () => {\n\t// Instantiate the component using Svelte's `mount` API\n\tconst component = mount(Component, {\n\t\ttarget: document.body, // `document` exists because of jsdom\n\t\tprops: { initial: 0 }\n\t});\n\n\texpect(document.body.innerHTML).toBe('<button>0</button>');\n\n\t// Click the button, then flush the changes so you can synchronously write expectations\n\tdocument.body.querySelector('button').click();\n\tflushSync();\n\n\texpect(document.body.innerHTML).toBe('<button>1</button>');\n\n\t// Remove the component from the DOM\n\tunmount(component);\n});\n```\n\nWhile the process is very straightforward, it is also low level and somewhat brittle, as the precise structure of your component may change frequently. Tools like [@testing-library/svelte](https://testing-library.com/docs/svelte-testing-library/intro/) can help streamline your tests. The above test could be rewritten like this:\n\n```js\n/// file: component.test.js\nimport { render, screen } from '@testing-library/svelte';\nimport userEvent from '@testing-library/user-event';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', async () => {\n\tconst user = userEvent.setup();\n\trender(Component);\n\n\tconst button = screen.getByRole('button');\n\texpect(button).toHaveTextContent(0);\n\n\tawait user.click(button);\n\texpect(button).toHaveTextContent(1);\n});\n```\n\nWhen writing component tests that involve two-way bindings, context or snippet props, it's best to create a wrapper component for your specific test and interact with that. `@testing-library/svelte` contains some [examples](https://testing-library.com/docs/svelte-testing-library/example).\n\n## E2E tests using Playwright\n\nE2E (short for 'end to end') tests allow you to test your full application through the eyes of the user. This section uses [Playwright](https://playwright.dev/) as an example, but you can also use other solutions like [Cypress](https://www.cypress.io/) or [NightwatchJS](https://nightwatchjs.org/).\n\nTo get started with Playwright, either install it via [the VS Code extension](https://playwright.dev/docs/getting-started-vscode), or install it from the command line using `npm init playwright`. It is also part of the setup CLI when you run `npx sv create`.\n\nAfter you've done that, you should have a `tests` folder and a Playwright config. You may need to adjust that config to tell Playwright what to do before running the tests - mainly starting your application at a certain port:\n\n```js\n/// file: playwright.config.js\nconst config = {\n\twebServer: {\n\t\tcommand: 'npm run build && npm run preview',\n\t\tport: 4173\n\t},\n\ttestDir: 'tests',\n\ttestMatch: /(.+\\.)?(test|spec)\\.[jt]s/\n};\n\nexport default config;\n```\n\nYou can now start writing tests. These are totally unaware of Svelte as a framework, so you mainly interact with the DOM and write assertions.", "mimetype": "text/plain", "start_char_idx": 4026, "end_char_idx": 8196, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "429e9770-629d-40d0-909a-8972c203b513": {"__data__": {"id_": "429e9770-629d-40d0-909a-8972c203b513", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d541a4a7-5460-4a1d-8249-0db167b6d95c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "9283ae547f12cb2fc463451860e7ccffe8a38ee4f8b0951539f2f3b3ac53207c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "54c2468c-d9e6-41b6-a8ad-28f50fa0e174", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "61c14c3e30daa9308e195053be668d298b4911641d485f09251d59b8b3f94ee0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "It is also part of the setup CLI when you run `npx sv create`.\n\nAfter you've done that, you should have a `tests` folder and a Playwright config. You may need to adjust that config to tell Playwright what to do before running the tests - mainly starting your application at a certain port:\n\n```js\n/// file: playwright.config.js\nconst config = {\n\twebServer: {\n\t\tcommand: 'npm run build && npm run preview',\n\t\tport: 4173\n\t},\n\ttestDir: 'tests',\n\ttestMatch: /(.+\\.)?(test|spec)\\.[jt]s/\n};\n\nexport default config;\n```\n\nYou can now start writing tests. These are totally unaware of Svelte as a framework, so you mainly interact with the DOM and write assertions.\n\n```js\n// @errors: 2307 7031\n/// file: tests/hello-world.spec.js\nimport { expect, test } from '@playwright/test';\n\ntest('home page has expected h1', async ({ page }) => {\n\tawait page.goto('/');\n\tawait expect(page.locator('h1')).toBeVisible();\n});\n```", "mimetype": "text/plain", "start_char_idx": 7540, "end_char_idx": 8447, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69328b41-9b3e-47f1-9a56-9cc09ad20c9a": {"__data__": {"id_": "69328b41-9b3e-47f1-9a56-9cc09ad20c9a", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2644d1c7-6ce9-4d01-af17-ac7b191cd05c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "985feb1be9ed7d4447191749e077aebbbc83869ae323a545562eaaa5be63b612", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2db521f5-9178-4502-b2db-92681232d208", "node_type": "1", "metadata": {}, "hash": "09d817fe10cb0055310ec05229410dd566303114b528416d074ed90e1826ff9c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: TypeScript\n---\n\n<!-- - [basically what we have today](https://svelte.dev/docs/typescript)\n- built-in support, but only for type-only features\n- generics\n- using `Component` and the other helper types\n- using `svelte-check` -->\n\nYou can use TypeScript within Svelte components. IDE extensions like the [Svelte VS Code extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode) will help you catch errors right in your editor, and [`svelte-check`](https://www.npmjs.com/package/svelte-check) does the same on the command line, which you can integrate into your CI.\n\n## `<script lang=\"ts\">`\n\nTo use TypeScript inside your Svelte components, add `lang=\"ts\"` to your `script` tags:\n\n```svelte\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n\n<button onclick={(e: Event) => greet(e.target.innerText)}>\n\t{name as string}\n</button>\n```\n\nDoing so allows you to use TypeScript's _type-only_ features. That is, all features that just disappear when transpiling to JavaScript, such as type annotations or interface declarations. Features that require the TypeScript compiler to output actual code are not supported. This includes:\n\n- using enums\n- using `private`, `protected` or `public` modifiers in constructor functions together with initializers\n- using features that are not yet part of the ECMAScript standard (i.e. not level 4 in the TC39 process) and therefore not implemented yet within Acorn, the parser we use for parsing JavaScript\n\nIf you want to use one of these features, you need to setup up a `script` preprocessor.\n\n## Preprocessor setup\n\nTo use non-type-only TypeScript features within Svelte components, you need to add a preprocessor that will turn TypeScript into JavaScript.\n\n```ts\n/// file: svelte.config.js\n// @noErrors\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\t// Note the additional `{ script: true }`\n\tpreprocess: vitePreprocess({ script: true })\n};\n\nexport default config;\n```\n\n### Using SvelteKit or Vite\n\nThe easiest way to get started is scaffolding a new SvelteKit project by typing `npx sv create`, following the prompts and choosing the TypeScript option.\n\n```ts\n/// file: svelte.config.js\n// @noErrors\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\nexport default config;\n```\n\nIf you don't need or want all the features SvelteKit has to offer, you can scaffold a Svelte-flavoured Vite project instead by typing `npm create vite@latest` and selecting the `svelte-ts` option.\n\nIn both cases, a `svelte.config.js` with `vitePreprocess` will be added. Vite/SvelteKit will read from this config file.\n\n### Other build tools\n\nIf you're using tools like Rollup or Webpack instead, install their respective Svelte plugins. For Rollup that's [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte) and for Webpack that's [svelte-loader](https://github.com/sveltejs/svelte-loader). For both, you need to install `typescript` and `svelte-preprocess` and add the preprocessor to the plugin config (see the respective READMEs for more info). If you're starting a new project, you can also use the [rollup](https://github.com/sveltejs/template) or [webpack](https://github.com/sveltejs/template-webpack) template to scaffold the setup from a script.\n\n> [!NOTE] If you're starting a new project, we recommend using SvelteKit or Vite instead\n\n## tsconfig.json settings\n\nWhen using TypeScript, make sure your `tsconfig.json` is setup correctly.\n\n- Use a [`target`](https://www.typescriptlang.org/tsconfig/#target) of at least `ES2022`, or a `target` of at least `ES2015` alongside [`useDefineForClassFields`](https://www.typescriptlang.org/tsconfig/#useDefineForClassFields).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3819, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2db521f5-9178-4502-b2db-92681232d208": {"__data__": {"id_": "2db521f5-9178-4502-b2db-92681232d208", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2644d1c7-6ce9-4d01-af17-ac7b191cd05c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "985feb1be9ed7d4447191749e077aebbbc83869ae323a545562eaaa5be63b612", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69328b41-9b3e-47f1-9a56-9cc09ad20c9a", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "5268f07be3f9a547f8055e5d218a95ab7ed928da72a93a3da79949aca1d7c33a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "31ab483f-0dae-4cf7-885b-2d69876692eb", "node_type": "1", "metadata": {}, "hash": "2c356586d4fe5b80559b690b0e12c1af539e0c9aadf80c9d5cf0305ba5b19115", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "For both, you need to install `typescript` and `svelte-preprocess` and add the preprocessor to the plugin config (see the respective READMEs for more info). If you're starting a new project, you can also use the [rollup](https://github.com/sveltejs/template) or [webpack](https://github.com/sveltejs/template-webpack) template to scaffold the setup from a script.\n\n> [!NOTE] If you're starting a new project, we recommend using SvelteKit or Vite instead\n\n## tsconfig.json settings\n\nWhen using TypeScript, make sure your `tsconfig.json` is setup correctly.\n\n- Use a [`target`](https://www.typescriptlang.org/tsconfig/#target) of at least `ES2022`, or a `target` of at least `ES2015` alongside [`useDefineForClassFields`](https://www.typescriptlang.org/tsconfig/#useDefineForClassFields). This ensures that rune declarations on class fields are not messed with, which would break the Svelte compiler\n- Set [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax) to `true` so that imports are left as-is\n- Set [`isolatedModules`](https://www.typescriptlang.org/tsconfig/#isolatedModules) to `true` so that each file is looked at in isolation. TypeScript has a few features which require cross-file analysis and compilation, which the Svelte compiler and tooling like Vite don't do. \n\n## Typing `$props`\n\nType `$props` just like a regular object with certain properties.\n\n```svelte\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\trequiredProperty: number;\n\t\toptionalProperty?: boolean;\n\t\tsnippetWithStringArgument: Snippet<[string]>;\n\t\teventHandler: (arg: string) => void;\n\t\t[key: string]: unknown;\n\t}\n\n\tlet {\n\t\trequiredProperty,\n\t\toptionalProperty,\n\t\tsnippetWithStringArgument,\n\t\teventHandler,\n\t\t...everythingElse\n\t}: Props = $props();\n</script>\n\n<button onclick={() => eventHandler('clicked button')}>\n\t{@render snippetWithStringArgument('hello')}\n</button>\n```\n\n## Generic `$props`\n\nComponents can declare a generic relationship between their properties. One example is a generic list component that receives a list of items and a callback property that receives an item from the list. To declare that the `items` property and the `select` callback operate on the same types, add the `generics` attribute to the `script` tag:\n\n```svelte\n<script lang=\"ts\" generics=\"Item extends { text: string }\">\n\tinterface Props {\n\t\titems: Item[];\n\t\tselect(item: Item): void;\n\t}\n\n\tlet { items, select }: Props = $props();\n</script>\n\n{#each items as item}\n\t<button onclick={() => select(item)}>\n\t\t{item.text}\n\t</button>\n{/each}\n```\n\nThe content of `generics` is what you would put between the `<...>` tags of a generic function. In other words, you can use multiple generics, `extends` and fallback types.\n\n## Typing wrapper components\n\nIn case you're writing a component that wraps a native element, you may want to expose all the attributes of the underlying element to the user. In that case, use (or extend from) one of the interfaces provided by `svelte/elements`. Here's an example for a `Button` component:\n\n```svelte\n<script lang=\"ts\">\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\n\n\tlet { children, ...rest }: HTMLButtonAttributes = $props();\n</script>\n\n<button {...rest}>\n\t{@render children?.()}\n</button>\n```\n\nNot all elements have a dedicated type definition. For those without one, use `SvelteHTMLElements`:\n\n```svelte\n<script lang=\"ts\">\n\timport type { SvelteHTMLElements } from 'svelte/elements';\n\n\tlet { children, ...rest }: SvelteHTMLElements['div'] = $props();\n</script>\n\n<div {...rest}>\n\t{@render children?.()}\n</div>\n```\n\n## Typing `$state`\n\nYou can type `$state` like any other variable.\n\n```ts\nlet count: number = $state(0);\n```\n\nIf you don't give `$state` an initial value, part of its types will be `undefined`.\n\n```ts\n// @noErrors\n// Error: Type 'number | undefined' is not assignable to type 'number'\nlet count: number = $state();\n```\n\nIf you know that the variable _will_ be defined before you first use it, use an `as` casting.", "mimetype": "text/plain", "start_char_idx": 3033, "end_char_idx": 7051, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31ab483f-0dae-4cf7-885b-2d69876692eb": {"__data__": {"id_": "31ab483f-0dae-4cf7-885b-2d69876692eb", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2644d1c7-6ce9-4d01-af17-ac7b191cd05c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "985feb1be9ed7d4447191749e077aebbbc83869ae323a545562eaaa5be63b612", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2db521f5-9178-4502-b2db-92681232d208", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3e645086cca2211043de838b7198e8f40e988953abab26b840927efdd97f6634", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3c190d5b-e6ab-48ee-97e0-a6d3428f47cd", "node_type": "1", "metadata": {}, "hash": "83c4bd2aede087d56868792915688e1fc8cbed475511d965b4e77ffda034447e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "For those without one, use `SvelteHTMLElements`:\n\n```svelte\n<script lang=\"ts\">\n\timport type { SvelteHTMLElements } from 'svelte/elements';\n\n\tlet { children, ...rest }: SvelteHTMLElements['div'] = $props();\n</script>\n\n<div {...rest}>\n\t{@render children?.()}\n</div>\n```\n\n## Typing `$state`\n\nYou can type `$state` like any other variable.\n\n```ts\nlet count: number = $state(0);\n```\n\nIf you don't give `$state` an initial value, part of its types will be `undefined`.\n\n```ts\n// @noErrors\n// Error: Type 'number | undefined' is not assignable to type 'number'\nlet count: number = $state();\n```\n\nIf you know that the variable _will_ be defined before you first use it, use an `as` casting. This is especially useful in the context of classes:\n\n```ts\nclass Counter {\n\tcount = $state() as number;\n\tconstructor(initial: number) {\n\t\tthis.count = initial;\n\t}\n}\n```\n\n## The `Component` type\n\nSvelte components are of type `Component`. You can use it and its related types to express a variety of constraints.\n\nUsing it together with dynamic components to restrict what kinds of component can be passed to it:\n\n```svelte\n<script lang=\"ts\">\n\timport type { Component } from 'svelte';\n\n\tinterface Props {\n\t\t// only components that have at most the \"prop\"\n\t\t// property required can be passed\n\t\tDynamicComponent: Component<{ prop: string }>;\n\t}\n\n\tlet { DynamicComponent }: Props = $props();\n</script>\n\n<DynamicComponent prop=\"foo\" />\n```\n\n> [!LEGACY] In Svelte 4, components were of type `SvelteComponent`\n\nTo extract the properties from a component, use `ComponentProps`.\n\n```ts\nimport type { Component, ComponentProps } from 'svelte';\nimport MyComponent from './MyComponent.svelte';\n\nfunction withProps<TComponent extends Component<any>>(\n\tcomponent: TComponent,\n\tprops: ComponentProps<TComponent>\n) {}\n\n// Errors if the second argument is not the correct props expected\n// by the component in the first argument.\nwithProps(MyComponent, { foo: 'bar' });\n```\n\nTo declare that a variable expects the constructor or instance type of a component:\n\n```svelte\n<script lang=\"ts\">\n\timport MyComponent from './MyComponent.svelte';\n\n\tlet componentConstructor: typeof MyComponent = MyComponent;\n\tlet componentInstance: MyComponent;\n</script>\n\n<MyComponent bind:this={componentInstance} />\n```\n\n## Enhancing built-in DOM types\n\nSvelte provides a best effort of all the HTML DOM types that exist. Sometimes you may want to use experimental attributes or custom events coming from an action. In these cases, TypeScript will throw a type error, saying that it does not know these types. If it's a non-experimental standard attribute/event, this may very well be a missing typing from our [HTML typings](https://github.com/sveltejs/svelte/blob/main/packages/svelte/elements.d.ts). In that case, you are welcome to open an issue and/or a PR fixing it.\n\nIn case this is a custom or experimental attribute/event, you can enhance the typings like this:\n\n```ts\n/// file: additional-svelte-typings.d.ts\ndeclare namespace svelteHTML {\n\t// enhance elements\n\tinterface IntrinsicElements {\n\t\t'my-custom-element': { someattribute: string; 'on:event': (e: CustomEvent<any>) => void };\n\t}\n\t// enhance attributes\n\tinterface HTMLAttributes<T> {\n\t\t// If you want to use the beforeinstallprompt event\n\t\tonbeforeinstallprompt?: (event: any) => any;\n\t\t// If you want to use myCustomAttribute={..} (note: all lowercase)\n\t\tmycustomattribute?: any; // You can replace any with something more specific if you like\n\t}\n}\n```\n\nThen make sure that `d.ts` file is referenced in your `tsconfig.json`. If it reads something like `\"include\": [\"src/**/*\"]` and your `d.ts` file is inside `src`, it should work. You may need to reload for the changes to take effect.", "mimetype": "text/plain", "start_char_idx": 6369, "end_char_idx": 10070, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3c190d5b-e6ab-48ee-97e0-a6d3428f47cd": {"__data__": {"id_": "3c190d5b-e6ab-48ee-97e0-a6d3428f47cd", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2644d1c7-6ce9-4d01-af17-ac7b191cd05c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "985feb1be9ed7d4447191749e077aebbbc83869ae323a545562eaaa5be63b612", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "31ab483f-0dae-4cf7-885b-2d69876692eb", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "4a2b9a66ef833b96d671d2c175a49b4561d2159a62f2a94c89e820d7da53e204", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": ": (event: any) => any;\n\t\t// If you want to use myCustomAttribute={..} (note: all lowercase)\n\t\tmycustomattribute?: any; // You can replace any with something more specific if you like\n\t}\n}\n```\n\nThen make sure that `d.ts` file is referenced in your `tsconfig.json`. If it reads something like `\"include\": [\"src/**/*\"]` and your `d.ts` file is inside `src`, it should work. You may need to reload for the changes to take effect.\n\nYou can also declare the typings by augmenting the `svelte/elements` module like this:\n\n```ts\n/// file: additional-svelte-typings.d.ts\nimport { HTMLButtonAttributes } from 'svelte/elements';\n\ndeclare module 'svelte/elements' {\n\texport interface SvelteHTMLElements {\n\t\t'custom-button': HTMLButtonAttributes;\n\t}\n\n\t// allows for more granular control over what element to add the typings to\n\texport interface HTMLButtonAttributes {\n\t\tveryexperimentalattribute?: string;\n\t}\n}\n\nexport {}; // ensure this is not an ambient module, else types will be overridden instead of augmented\n```", "mimetype": "text/plain", "start_char_idx": 9645, "end_char_idx": 10651, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f1477e7-cadb-4519-ad12-0bc603f243f2": {"__data__": {"id_": "0f1477e7-cadb-4519-ad12-0bc603f243f2", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9917d25f-43a0-4ee1-b5c3-d477d9136d5f", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "96a42b04b6de28171e2a7f4dc75b9c6cbbb4a76444e6dfcfbb8fd829a5fb30ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec03a0ec-828d-45de-a39a-d847e02b62dd", "node_type": "1", "metadata": {}, "hash": "1239fbc3ae765a866a7fbdc0e04183bf1b0e4165fe5a3d2d1e18d9985eeb4b46", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Custom elements\n---\n\n<!-- - [basically what we have today](https://svelte.dev/docs/custom-elements-api) -->\n\nSvelte components can also be compiled to custom elements (aka web components) using the `customElement: true` compiler option. You should specify a tag name for the component using the `<svelte:options>` [element](svelte-options).\n\n```svelte\n<svelte:options customElement=\"my-element\" />\n\n<script>\n\tlet { name = 'world' } = $props();\n</script>\n\n<h1>Hello {name}!</h1>\n<slot />\n```\n\nYou can leave out the tag name for any of your inner components which you don't want to expose and use them like regular Svelte components. Consumers of the component can still name it afterwards if needed, using the static `element` property which contains the custom element constructor and which is available when the `customElement` compiler option is `true`.\n\n```js\n// @noErrors\nimport MyElement from './MyElement.svelte';\n\ncustomElements.define('my-element', MyElement.element);\n```\n\nOnce a custom element has been defined, it can be used as a regular DOM element:\n\n```js\ndocument.body.innerHTML = `\n\t<my-element>\n\t\t<p>This is some slotted content</p>\n\t</my-element>\n`;\n```\n\nAny [props](basic-markup#Component-props) are exposed as properties of the DOM element (as well as being readable/writable as attributes, where possible).\n\n```js\n// @noErrors\nconst el = document.querySelector('my-element');\n\n// get the current value of the 'name' prop\nconsole.log(el.name);\n\n// set a new value, updating the shadow DOM\nel.name = 'everybody';\n```\n\nNote that you need to list out all properties explicitly, i.e. doing `let props = $props()` without declaring `props` in the [component options](#Component-options) means that Svelte can't know which props to expose as properties on the DOM element.\n\n## Component lifecycle\n\nCustom elements are created from Svelte components using a wrapper approach. This means the inner Svelte component has no knowledge that it is a custom element. The custom element wrapper takes care of handling its lifecycle appropriately.\n\nWhen a custom element is created, the Svelte component it wraps is _not_ created right away. It is only created in the next tick after the `connectedCallback` is invoked. Properties assigned to the custom element before it is inserted into the DOM are temporarily saved and then set on component creation, so their values are not lost. The same does not work for invoking exported functions on the custom element though, they are only available after the element has mounted. If you need to invoke functions before component creation, you can work around it by using the [`extend` option](#Component-options).\n\nWhen a custom element written with Svelte is created or updated, the shadow DOM will reflect the value in the next tick, not immediately. This way updates can be batched, and DOM moves which temporarily (but synchronously) detach the element from the DOM don't lead to unmounting the inner component.\n\nThe inner Svelte component is destroyed in the next tick after the `disconnectedCallback` is invoked.\n\n## Component options\n\nWhen constructing a custom element, you can tailor several aspects by defining `customElement` as an object within `<svelte:options>` since Svelte 4. This object may contain the following properties:\n\n- `tag: string`: an optional `tag` property for the custom element's name. If set, a custom element with this tag name will be defined with the document's `customElements` registry upon importing this component.\n- `shadow`: an optional property that can be set to `\"none\"` to forgo shadow root creation. Note that styles are then no longer encapsulated, and you can't use slots\n- `props`: an optional property to modify certain details and behaviors of your component's properties. It offers the following settings:\n  - `attribute: string`: To update a custom element's prop, you have two alternatives: either set the property on the custom element's reference as illustrated above or use an HTML attribute. For the latter, the default attribute name is the lowercase property name. Modify this by assigning `attribute: \"<desired name>\"`.\n  - `reflect: boolean`: By default, updated prop values do not reflect back to the DOM. To enable this behavior, set `reflect: true`.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4275, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec03a0ec-828d-45de-a39a-d847e02b62dd": {"__data__": {"id_": "ec03a0ec-828d-45de-a39a-d847e02b62dd", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9917d25f-43a0-4ee1-b5c3-d477d9136d5f", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "96a42b04b6de28171e2a7f4dc75b9c6cbbb4a76444e6dfcfbb8fd829a5fb30ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f1477e7-cadb-4519-ad12-0bc603f243f2", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c58dbde16eda973367df3525882474d5980d3f2a01c3721ec95feb99f1d140be", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "398579eb-45ed-449f-8b59-204ac95071bc", "node_type": "1", "metadata": {}, "hash": "1aa8b3a0df6c53edade289237aa8f659116e8c9bf461ed94ec9d20209a89456e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "If set, a custom element with this tag name will be defined with the document's `customElements` registry upon importing this component.\n- `shadow`: an optional property that can be set to `\"none\"` to forgo shadow root creation. Note that styles are then no longer encapsulated, and you can't use slots\n- `props`: an optional property to modify certain details and behaviors of your component's properties. It offers the following settings:\n  - `attribute: string`: To update a custom element's prop, you have two alternatives: either set the property on the custom element's reference as illustrated above or use an HTML attribute. For the latter, the default attribute name is the lowercase property name. Modify this by assigning `attribute: \"<desired name>\"`.\n  - `reflect: boolean`: By default, updated prop values do not reflect back to the DOM. To enable this behavior, set `reflect: true`.\n  - `type: 'String' | 'Boolean' | 'Number' | 'Array' | 'Object'`: While converting an attribute value to a prop value and reflecting it back, the prop value is assumed to be a `String` by default. This may not always be accurate. For instance, for a number type, define it using `type: \"Number\"`\n    You don't need to list all properties, those not listed will use the default settings.\n- `extend`: an optional property which expects a function as its argument. It is passed the custom element class generated by Svelte and expects you to return a custom element class. This comes in handy if you have very specific requirements to the life cycle of the custom element or want to enhance the class to for example use [ElementInternals](https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals#examples) for better HTML form integration.\n\n```svelte\n<svelte:options\n\tcustomElement={{\n\t\ttag: 'custom-element',\n\t\tshadow: 'none',\n\t\tprops: {\n\t\t\tname: { reflect: true, type: 'Number', attribute: 'element-index' }\n\t\t},\n\t\textend: (customElementConstructor) => {\n\t\t\t// Extend the class so we can let it participate in HTML forms\n\t\t\treturn class extends customElementConstructor {\n\t\t\t\tstatic formAssociated = true;\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper();\n\t\t\t\t\tthis.attachedInternals = this.attachInternals();\n\t\t\t\t}\n\n\t\t\t\t// Add the function here, not below in the component so that\n\t\t\t\t// it's always available, not just when the inner Svelte component\n\t\t\t\t// is mounted\n\t\t\t\trandomIndex() {\n\t\t\t\t\tthis.elementIndex = Math.random();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}}\n/>\n\n<script>\n\tlet { elementIndex, attachedInternals } = $props();\n\t// ...\n\tfunction check() {\n\t\tattachedInternals.checkValidity();\n\t}\n</script>\n\n...\n```\n\n## Caveats and limitations\n\nCustom elements can be a useful way to package components for consumption in a non-Svelte app, as they will work with vanilla HTML and JavaScript as well as [most frameworks](https://custom-elements-everywhere.com/). There are, however, some important differences to be aware of:\n\n- Styles are _encapsulated_, rather than merely _scoped_ (unless you set `shadow: \"none\"`). This means that any non-component styles (such as you might have in a `global.css` file) will not apply to the custom element, including styles with the `:global(...)` modifier\n- Instead of being extracted out as a separate .css file, styles are inlined into the component as a JavaScript string\n- Custom elements are not generally suitable for server-side rendering, as the shadow DOM is invisible until JavaScript loads\n- In Svelte, slotted content renders _lazily_. In the DOM, it renders _eagerly_. In other words, it will always be created even if the component's `<slot>` element is inside an `{#if ...}` block. Similarly, including a `<slot>` in an `{#each ...}` block will not cause the slotted content to be rendered multiple times\n- The deprecated `let:` directive has no effect, because custom elements do not have a way to pass data to the parent component that fills the slot\n- Polyfills are required to support older browsers\n- You can use Svelte's context feature between regular Svelte components within a custom element, but you can't use them across custom elements. In other words, you can't use `setContext` on a parent custom element and read that with `getContext` in a child custom element.", "mimetype": "text/plain", "start_char_idx": 3378, "end_char_idx": 7588, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "398579eb-45ed-449f-8b59-204ac95071bc": {"__data__": {"id_": "398579eb-45ed-449f-8b59-204ac95071bc", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9917d25f-43a0-4ee1-b5c3-d477d9136d5f", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "96a42b04b6de28171e2a7f4dc75b9c6cbbb4a76444e6dfcfbb8fd829a5fb30ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec03a0ec-828d-45de-a39a-d847e02b62dd", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "584d8ac8cf88cb0fed7d6431da43c27f83fc3a95299941a4f5ce50ec30c8cba9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In the DOM, it renders _eagerly_. In other words, it will always be created even if the component's `<slot>` element is inside an `{#if ...}` block. Similarly, including a `<slot>` in an `{#each ...}` block will not cause the slotted content to be rendered multiple times\n- The deprecated `let:` directive has no effect, because custom elements do not have a way to pass data to the parent component that fills the slot\n- Polyfills are required to support older browsers\n- You can use Svelte's context feature between regular Svelte components within a custom element, but you can't use them across custom elements. In other words, you can't use `setContext` on a parent custom element and read that with `getContext` in a child custom element.\n- Don't declare properties or attributes starting with `on`, as their usage will be interpreted as an event listener. In other words, Svelte treats `<custom-element oneworld={true}></custom-element>` as `customElement.addEventListener('eworld', true)` (and not as `customElement.oneworld = true`)", "mimetype": "text/plain", "start_char_idx": 6844, "end_char_idx": 7885, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c856149a-cc64-4488-beb9-2ee5385dc28e": {"__data__": {"id_": "c856149a-cc64-4488-beb9-2ee5385dc28e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a13d9783-402d-4078-b816-4831a1f153f4", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e561770012b21a8d2da40a7f98097192fc0f481b2409cf1aee578d89b2a79725", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b07ded90-5e37-4e46-8b62-8ab6c0c94c2e", "node_type": "1", "metadata": {}, "hash": "a56902ae57dc3f64401abb25e1c4172e7d11f19f047e0390a18d1b23f558e226", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Svelte 4 migration guide\n---\n\nThis migration guide provides an overview of how to migrate from Svelte version 3 to 4. See the linked PRs for more details about each change. Use the migration script to migrate some of these automatically: `npx svelte-migrate@latest svelte-4`\n\nIf you're a library author, consider whether to only support Svelte 4 or if it's possible to support Svelte 3 too. Since most of the breaking changes don't affect many people, this may be easily possible. Also remember to update the version range in your `peerDependencies`.\n\n## Minimum version requirements\n\n- Upgrade to Node 16 or higher. Earlier versions are no longer supported. ([#8566](https://github.com/sveltejs/svelte/issues/8566))\n- If you are using SvelteKit, upgrade to 1.20.4 or newer ([sveltejs/kit#10172](https://github.com/sveltejs/kit/pull/10172))\n- If you are using Vite without SvelteKit, upgrade to `vite-plugin-svelte` 2.4.1 or newer ([#8516](https://github.com/sveltejs/svelte/issues/8516))\n- If you are using webpack, upgrade to webpack 5 or higher and `svelte-loader` 3.1.8 or higher. Earlier versions are no longer supported. ([#8515](https://github.com/sveltejs/svelte/issues/8515), [198dbcf](https://github.com/sveltejs/svelte/commit/198dbcf))\n- If you are using Rollup, upgrade to `rollup-plugin-svelte` 7.1.5 or higher ([198dbcf](https://github.com/sveltejs/svelte/commit/198dbcf))\n- If you are using TypeScript, upgrade to TypeScript 5 or higher. Lower versions might still work, but no guarantees are made about that. ([#8488](https://github.com/sveltejs/svelte/issues/8488))\n\n## Browser conditions for bundlers\n\nBundlers must now specify the `browser` condition when building a frontend bundle for the browser. SvelteKit and Vite will handle this automatically for you. If you're using any others, you may observe lifecycle callbacks such as `onMount` not get called and you'll need to update the module resolution configuration.\n- For Rollup this is done within the `@rollup/plugin-node-resolve` plugin by setting `browser: true` in its options. See the [`rollup-plugin-svelte`](https://github.com/sveltejs/rollup-plugin-svelte/#usage) documentation for more details\n- For webpack this is done by adding `\"browser\"` to the `conditionNames` array. You may also have to update your `alias` config, if you have set it. See the [`svelte-loader`](https://github.com/sveltejs/svelte-loader#usage) documentation for more details\n\n([#8516](https://github.com/sveltejs/svelte/issues/8516))\n\n## Removal of CJS related output\n\nSvelte no longer supports the CommonJS (CJS) format for compiler output and has also removed the `svelte/register` hook and the CJS runtime version. If you need to stay on the CJS output format, consider using a bundler to convert Svelte's ESM output to CJS in a post-build step.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2815, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b07ded90-5e37-4e46-8b62-8ab6c0c94c2e": {"__data__": {"id_": "b07ded90-5e37-4e46-8b62-8ab6c0c94c2e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a13d9783-402d-4078-b816-4831a1f153f4", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e561770012b21a8d2da40a7f98097192fc0f481b2409cf1aee578d89b2a79725", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c856149a-cc64-4488-beb9-2ee5385dc28e", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "495293da6e3258c84701daa27b031b1332032bd5b297b70613ad8946de32c1c2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "16397f06-5adc-48f1-9ef3-878611fc17cf", "node_type": "1", "metadata": {}, "hash": "3035c47affc326e9d133918ef0cc1c07e24cb5dd774ef7e73ac874be23b96004", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "See the [`rollup-plugin-svelte`](https://github.com/sveltejs/rollup-plugin-svelte/#usage) documentation for more details\n- For webpack this is done by adding `\"browser\"` to the `conditionNames` array. You may also have to update your `alias` config, if you have set it. See the [`svelte-loader`](https://github.com/sveltejs/svelte-loader#usage) documentation for more details\n\n([#8516](https://github.com/sveltejs/svelte/issues/8516))\n\n## Removal of CJS related output\n\nSvelte no longer supports the CommonJS (CJS) format for compiler output and has also removed the `svelte/register` hook and the CJS runtime version. If you need to stay on the CJS output format, consider using a bundler to convert Svelte's ESM output to CJS in a post-build step. ([#8613](https://github.com/sveltejs/svelte/issues/8613))\n\n## Stricter types for Svelte functions\n\nThere are now stricter types for `createEventDispatcher`, `Action`, `ActionReturn`, and `onMount`:\n\n- `createEventDispatcher` now supports specifying that a payload is optional, required, or non-existent, and the call sites are checked accordingly ([#7224](https://github.com/sveltejs/svelte/issues/7224))\n\n```ts\n// @errors: 2554 2345\nimport { createEventDispatcher } from 'svelte';\n\nconst dispatch = createEventDispatcher<{\n\toptional: number | null;\n\trequired: string;\n\tnoArgument: null;\n}>();\n\n// Svelte version 3:\ndispatch('optional');\ndispatch('required'); // I can still omit the detail argument\ndispatch('noArgument', 'surprise'); // I can still add a detail argument\n\n// Svelte version 4 using TypeScript strict mode:\ndispatch('optional');\ndispatch('required'); // error, missing argument\ndispatch('noArgument', 'surprise'); // error, cannot pass an argument\n```\n\n- `Action` and `ActionReturn` have a default parameter type of `undefined` now, which means you need to type the generic if you want to specify that this action receives a parameter. The migration script will migrate this automatically ([#7442](https://github.com/sveltejs/svelte/pull/7442))\n\n```ts\n// @noErrors\n---const action: Action = (node, params) => { ... } // this is now an error if you use params in any way---\n+++const action: Action<HTMLElement, string> = (node, params) => { ... } // params is of type string+++\n```\n\n- `onMount` now shows a type error if you return a function asynchronously from it, because this is likely a bug in your code where you expect the callback to be called on destroy, which it will only do for synchronously returned functions ([#8136](https://github.com/sveltejs/svelte/issues/8136))\n\n```js\n// @noErrors\n// Example where this change reveals an actual bug\nonMount(\n---\t// someCleanup() not called because function handed to onMount is async\n\tasync () => {\n\t\tconst something = await foo();---\n+++\t// someCleanup() is called because function handed to onMount is sync\n\t() => {\n\t\tfoo().then(something => {...});\n\t\t// ...\n\t\treturn () => someCleanup();\n\t}\n);\n```\n\n## Custom Elements with Svelte\n\nThe creation of custom elements with Svelte has been overhauled and significantly improved. The `tag` option is deprecated in favor of the new `customElement` option:\n\n```svelte\n---<svelte:options tag=\"my-component\" />---\n+++<svelte:options customElement=\"my-component\" />+++\n```\n\nThis change was made to allow [more configurability](custom-elements#Component-options) for advanced use cases. The migration script will adjust your code automatically. The update timing of properties has changed slightly as well. ([#8457](https://github.com/sveltejs/svelte/issues/8457))\n\n## SvelteComponentTyped is deprecated\n\n`SvelteComponentTyped` is deprecated, as `SvelteComponent` now has all its typing capabilities. Replace all instances of `SvelteComponentTyped` with `SvelteComponent`.", "mimetype": "text/plain", "start_char_idx": 2066, "end_char_idx": 5797, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "16397f06-5adc-48f1-9ef3-878611fc17cf": {"__data__": {"id_": "16397f06-5adc-48f1-9ef3-878611fc17cf", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a13d9783-402d-4078-b816-4831a1f153f4", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e561770012b21a8d2da40a7f98097192fc0f481b2409cf1aee578d89b2a79725", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b07ded90-5e37-4e46-8b62-8ab6c0c94c2e", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "80d538db42bf30420dd7a6853097d6ac64ba3c60398e1256cba31d86350ddf4a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "21efd7ab-4966-41c2-8e23-e538f89d41ab", "node_type": "1", "metadata": {}, "hash": "47721a8cf1814bb141d9893b462de0a947d24844bf4b4c2a203c3fa37ba0a666", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The `tag` option is deprecated in favor of the new `customElement` option:\n\n```svelte\n---<svelte:options tag=\"my-component\" />---\n+++<svelte:options customElement=\"my-component\" />+++\n```\n\nThis change was made to allow [more configurability](custom-elements#Component-options) for advanced use cases. The migration script will adjust your code automatically. The update timing of properties has changed slightly as well. ([#8457](https://github.com/sveltejs/svelte/issues/8457))\n\n## SvelteComponentTyped is deprecated\n\n`SvelteComponentTyped` is deprecated, as `SvelteComponent` now has all its typing capabilities. Replace all instances of `SvelteComponentTyped` with `SvelteComponent`.\n\n```js\n---import { SvelteComponentTyped } from 'svelte';---\n+++import { SvelteComponent } from 'svelte';+++\n\n---export class Foo extends SvelteComponentTyped<{ aProp: string }> {}---\n+++export class Foo extends SvelteComponent<{ aProp: string }> {}+++\n```\n\nIf you have used `SvelteComponent` as the component instance type previously, you may see a somewhat opaque type error now, which is solved by changing `: typeof SvelteComponent` to `: typeof SvelteComponent<any>`.\n\n```svelte\n<script>\n\timport ComponentA from './ComponentA.svelte';\n\timport ComponentB from './ComponentB.svelte';\n\timport { SvelteComponent } from 'svelte';\n\n\tlet component: typeof SvelteComponent+++<any>+++;\n\n\tfunction choseRandomly() {\n\t\tcomponent = Math.random() > 0.5 ? ComponentA : ComponentB;\n\t}\n</script>\n\n<button on:click={choseRandomly}>random</button>\n<svelte:element this={component} />\n```\n\nThe migration script will do both automatically for you. ([#8512](https://github.com/sveltejs/svelte/issues/8512))\n\n## Transitions are local by default\n\nTransitions are now local by default to prevent confusion around page navigations. \"local\" means that a transition will not play if it's within a nested control flow block (`each/if/await/key`) and not the direct parent block but a block above it is created/destroyed. In the following example, the `slide` intro animation will only play when `success` goes from `false` to `true`, but it will _not_ play when `show` goes from `false` to `true`:\n\n```svelte\n{#if show}\n\t...\n\t{#if success}\n\t\t<p in:slide>Success</p>\n\t{/each}\n{/if}\n```\n\nTo make transitions global, add the `|global` modifier - then they will play when _any_ control flow block above is created/destroyed. The migration script will do this automatically for you. ([#6686](https://github.com/sveltejs/svelte/issues/6686))\n\n## Default slot bindings\n\nDefault slot bindings are no longer exposed to named slots and vice versa:\n\n```svelte\n<script>\n\timport Nested from './Nested.svelte';\n</script>\n\n<Nested let:count>\n\t<p>\n\t\tcount in default slot - is available: {count}\n\t</p>\n\t<p slot=\"bar\">\n\t\tcount in bar slot - is not available: {count}\n\t</p>\n</Nested>\n```\n\nThis makes slot bindings more consistent as the behavior is undefined when for example the default slot is from a list and the named slot is not. ([#6049](https://github.com/sveltejs/svelte/issues/6049))\n\n## Preprocessors\n\nThe order in which preprocessors are applied has changed. Now, preprocessors are executed in order, and within one group, the order is markup, script, style.", "mimetype": "text/plain", "start_char_idx": 5111, "end_char_idx": 8325, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "21efd7ab-4966-41c2-8e23-e538f89d41ab": {"__data__": {"id_": "21efd7ab-4966-41c2-8e23-e538f89d41ab", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a13d9783-402d-4078-b816-4831a1f153f4", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e561770012b21a8d2da40a7f98097192fc0f481b2409cf1aee578d89b2a79725", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "16397f06-5adc-48f1-9ef3-878611fc17cf", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "94ba5ffc9b446384be4dfae6d8879aa3c0a1255b3132088732982e3be04f5971", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "27ccbc56-b304-4c15-a30f-4735a76b7cfd", "node_type": "1", "metadata": {}, "hash": "6b0b9e856bb151902cdfbf219072e3692219face6e765c9e7e16a0c249a34cad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "([#6686](https://github.com/sveltejs/svelte/issues/6686))\n\n## Default slot bindings\n\nDefault slot bindings are no longer exposed to named slots and vice versa:\n\n```svelte\n<script>\n\timport Nested from './Nested.svelte';\n</script>\n\n<Nested let:count>\n\t<p>\n\t\tcount in default slot - is available: {count}\n\t</p>\n\t<p slot=\"bar\">\n\t\tcount in bar slot - is not available: {count}\n\t</p>\n</Nested>\n```\n\nThis makes slot bindings more consistent as the behavior is undefined when for example the default slot is from a list and the named slot is not. ([#6049](https://github.com/sveltejs/svelte/issues/6049))\n\n## Preprocessors\n\nThe order in which preprocessors are applied has changed. Now, preprocessors are executed in order, and within one group, the order is markup, script, style.\n\n```js\n// @errors: 2304\nimport { preprocess } from 'svelte/compiler';\n\nconst { code } = await preprocess(\n\tsource,\n\t[\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-1');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-1');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-1');\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-2');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-2');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-2');\n\t\t\t}\n\t\t}\n\t],\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n\n// Svelte 3 logs:\n// markup-1\n// markup-2\n// script-1\n// script-2\n// style-1\n// style-2\n\n// Svelte 4 logs:\n// markup-1\n// script-1\n// style-1\n// markup-2\n// script-2\n// style-2\n```\n\nThis could affect you for example if you are using `MDsveX` - in which case you should make sure it comes before any script or style preprocessor.\n\n```js\n// @noErrors\npreprocess: [\n---\tvitePreprocess(),\n\tmdsvex(mdsvexConfig)---\n+++\tmdsvex(mdsvexConfig),\n\tvitePreprocess()+++\n]\n```\n\nEach preprocessor must also have a name. ([#8618](https://github.com/sveltejs/svelte/issues/8618))\n\n## New eslint package\n\n`eslint-plugin-svelte3` is deprecated. It may still work with Svelte 4 but we make no guarantees about that. We recommend switching to our new package [eslint-plugin-svelte](https://github.com/sveltejs/eslint-plugin-svelte). See [this Github post](https://github.com/sveltejs/kit/issues/10242#issuecomment-1610798405) for an instruction how to migrate. Alternatively, you can create a new project using `npm create svelte@latest`, select the eslint (and possibly TypeScript) option and then copy over the related files into your existing project.\n\n## Other breaking changes\n\n- the `inert` attribute is now applied to outroing elements to make them invisible to assistive technology and prevent interaction. ([#8628](https://github.com/sveltejs/svelte/pull/8628))\n- the runtime now uses `classList.toggle(name, boolean)` which may not work in very old browsers. Consider using a [polyfill](https://github.com/eligrey/classList.js) if you need to support these browsers. ([#8629](https://github.com/sveltejs/svelte/issues/8629))\n- the runtime now uses the `CustomEvent` constructor which may not work in very old browsers. Consider using a [polyfill](https://github.com/theftprevention/event-constructor-polyfill/tree/master) if you need to support these browsers. ([#8775](https://github.com/sveltejs/svelte/pull/8775))\n- people implementing their own stores from scratch using the `StartStopNotifier` interface (which is passed to the create function of `writable` etc) from `svelte/store` now need to pass an update function in addition to the set function. This has no effect on people using stores or creating stores using the existing Svelte stores. ([#6750](https://github.com/sveltejs/svelte/issues/6750))\n- `derived` will now throw an error on falsy values instead of stores passed to it.", "mimetype": "text/plain", "start_char_idx": 7552, "end_char_idx": 11200, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "27ccbc56-b304-4c15-a30f-4735a76b7cfd": {"__data__": {"id_": "27ccbc56-b304-4c15-a30f-4735a76b7cfd", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a13d9783-402d-4078-b816-4831a1f153f4", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e561770012b21a8d2da40a7f98097192fc0f481b2409cf1aee578d89b2a79725", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "21efd7ab-4966-41c2-8e23-e538f89d41ab", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3af901e7b0f0a9c8938aecebf0210b9e8f593112f7e0585d3e843acc5d02d1a6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Consider using a [polyfill](https://github.com/theftprevention/event-constructor-polyfill/tree/master) if you need to support these browsers. ([#8775](https://github.com/sveltejs/svelte/pull/8775))\n- people implementing their own stores from scratch using the `StartStopNotifier` interface (which is passed to the create function of `writable` etc) from `svelte/store` now need to pass an update function in addition to the set function. This has no effect on people using stores or creating stores using the existing Svelte stores. ([#6750](https://github.com/sveltejs/svelte/issues/6750))\n- `derived` will now throw an error on falsy values instead of stores passed to it. ([#7947](https://github.com/sveltejs/svelte/issues/7947))\n- type definitions for `svelte/internal` were removed to further discourage usage of those internal methods which are not public API. Most of these will likely change for Svelte 5\n- Removal of DOM nodes is now batched which slightly changes its order, which might affect the order of events fired if you're using a `MutationObserver` on these elements ([#8763](https://github.com/sveltejs/svelte/pull/8763))\n- if you enhanced the global typings through the `svelte.JSX` namespace before, you need to migrate this to use the `svelteHTML` namespace. Similarly if you used the `svelte.JSX` namespace to use type definitions from it, you need to migrate those to use the types from `svelte/elements` instead. You can find more information about what to do [here](https://github.com/sveltejs/language-tools/blob/master/docs/preprocessors/typescript.md#im-getting-deprecation-warnings-for-sveltejsx--i-want-to-migrate-to-the-new-typings)", "mimetype": "text/plain", "start_char_idx": 10526, "end_char_idx": 12190, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f5f96e5-bdf5-4b56-bbd8-65578e23e465": {"__data__": {"id_": "7f5f96e5-bdf5-4b56-bbd8-65578e23e465", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b43ef22e-9919-49b8-b6b1-a9619b9903ef", "node_type": "1", "metadata": {}, "hash": "a077e45690486726bdfeb306c78d0f6f63698b65b17e5909b2f85b6e5033fae1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Svelte 5 migration guide\n---\n\nVersion 5 comes with an overhauled syntax and reactivity system. While it may look different at first, you'll soon notice many similarities. This guide goes over the changes in detail and shows you how to upgrade. Along with it, we also provide information on _why_ we did these changes.\n\nYou don't have to migrate to the new syntax right away - Svelte 5 still supports the old Svelte 4 syntax, and you can mix and match components using the new syntax with components using the old and vice versa. We expect many people to be able to upgrade with only a few lines of code changed initially. There's also a [migration script](#Migration-script) that helps you with many of these steps automatically.\n\n## Reactivity syntax changes\n\nAt the heart of Svelte 5 is the new runes API. Runes are basically compiler instructions that inform Svelte about reactivity. Syntactically, runes are functions starting with a dollar-sign.\n\n### let -> $state\n\nIn Svelte 4, a `let` declaration at the top level of a component was implicitly reactive. In Svelte 5, things are more explicit: a variable is reactive when created using the `$state` rune. Let's migrate the counter to runes mode by wrapping the counter in `$state`:\n\n```svelte\n<script>\n\tlet count = +++$state(+++0+++)+++;\n</script>\n```\n\nNothing else changes. `count` is still the number itself, and you read and write directly to it, without a wrapper like `.value` or `getCount()`.\n\n> [!DETAILS] Why we did this\n> `let` being implicitly reactive at the top level worked great, but it meant that reactivity was constrained - a `let` declaration anywhere else was not reactive. This forced you to resort to using stores when refactoring code out of the top level of components for reuse. This meant you had to learn an entirely separate reactivity model, and the result often wasn't as nice to work with. Because reactivity is more explicit in Svelte 5, you can keep using the same API outside the top level of components. Head to [the tutorial](/tutorial) to learn more.\n\n### $: -> $derived/$effect\n\nIn Svelte 4, a `$:` statement at the top level of a component could be used to declare a derivation, i.e. state that is entirely defined through a computation of other state. In Svelte 5, this is achieved using the `$derived` rune:\n\n```svelte\n<script>\n\tlet count = +++$state(+++0+++)+++;\n\t---$:--- +++const+++ double = +++$derived(+++count * 2+++)+++;\n</script>\n```\n\nAs with `$state`, nothing else changes. `double` is still the number itself, and you read it directly, without a wrapper like `.value` or `getDouble()`.\n\nA `$:` statement could also be used to create side effects. In Svelte 5, this is achieved using the `$effect` rune:\n\n```svelte\n<script>\n\tlet count = +++$state(+++0+++)+++;\n\t---$:---+++$effect(() =>+++ {\n\t\tif (count > 5) {\n\t\t\talert('Count is too high!');\n\t\t}\n\t}+++);+++\n</script>\n```\n\n> [!DETAILS] Why we did this\n> `$:` was a great shorthand and easy to get started with: you could slap a `$:` in front of most code and it would somehow work. This intuitiveness was also its drawback the more complicated your code became, because it wasn't as easy to reason about. Was the intent of the code to create a derivation, or a side effect? With `$derived` and `$effect`, you have a bit more up-front decision making to do (spoiler alert: 90% of the time you want `$derived`), but future-you and other developers on your team will have an easier time.\n>\n> There were also gotchas that were hard to spot:\n>\n> - `$:` only updated directly before rendering, which meant you could read stale values in-between rerenders\n> - `$:` only ran once per tick, which meant that statements may run less often than you think\n> - `$:` dependencies were determined through static analysis of the dependencies. This worked in most cases, but could break in subtle ways during a refactoring where dependencies would be for example moved into a function and no longer be visible as a result\n> - `$:` statements were also ordered by using static analysis of the dependencies.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4053, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b43ef22e-9919-49b8-b6b1-a9619b9903ef": {"__data__": {"id_": "b43ef22e-9919-49b8-b6b1-a9619b9903ef", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f5f96e5-bdf5-4b56-bbd8-65578e23e465", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8c6dad057694db5478aa45c8db4251c199a22be45b56d24e314640866aa6f7d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "503878b1-b78c-4526-bb82-614d22931bf6", "node_type": "1", "metadata": {}, "hash": "315b5f3a3dc6dbc1281770f2e13af57f46047a17782486b257a85226f36b2008", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Was the intent of the code to create a derivation, or a side effect? With `$derived` and `$effect`, you have a bit more up-front decision making to do (spoiler alert: 90% of the time you want `$derived`), but future-you and other developers on your team will have an easier time.\n>\n> There were also gotchas that were hard to spot:\n>\n> - `$:` only updated directly before rendering, which meant you could read stale values in-between rerenders\n> - `$:` only ran once per tick, which meant that statements may run less often than you think\n> - `$:` dependencies were determined through static analysis of the dependencies. This worked in most cases, but could break in subtle ways during a refactoring where dependencies would be for example moved into a function and no longer be visible as a result\n> - `$:` statements were also ordered by using static analysis of the dependencies. In some cases there could be ties and the ordering would be wrong as a result, needing manual interventions. Ordering could also break while refactoring code and some dependencies no longer being visible as a result.\n>\n> Lastly, it wasn't TypeScript-friendly (our editor tooling had to jump through some hoops to make it valid for TypeScript), which was a blocker for making Svelte's reactivity model truly universal.\n>\n> `$derived` and `$effect` fix all of these by\n>\n> - always returning the latest value\n> - running as often as needed to be stable\n> - determining the dependencies at runtime, and therefore being immune to refactorings\n> - executing dependencies as needed and therefore being immune to ordering problems\n> - being TypeScript-friendly\n\n### export let -> $props\n\nIn Svelte 4, properties of a component were declared using `export let`. Each property was one declaration. In Svelte 5, all properties are declared through the `$props` rune, through destructuring:\n\n```svelte\n<script>\n\t---export let optional = 'unset';\n\texport let required;---\n\t+++let { optional = 'unset', required } = $props();+++\n</script>\n```\n\nThere are multiple cases where declaring properties becomes less straightforward than having a few `export let` declarations:\n\n- you want to rename the property, for example because the name is a reserved identifier (e.g. `class`)\n- you don't know which other properties to expect in advance\n- you want to forward every property to another component\n\nAll these cases need special syntax in Svelte 4:\n\n- renaming: `export { klass as class}`\n- other properties: `$$restProps`\n- all properties `$$props`\n\nIn Svelte 5, the `$props` rune makes this straightforward without any additional Svelte-specific syntax:\n\n- renaming: use property renaming `let { class: klass } = $props();`\n- other properties: use spreading `let { foo, bar, ...rest } = $props();`\n- all properties: don't destructure `let props = $props();`\n\n```svelte\n<script>\n\t---let klass = '';\n\texport { klass as class};---\n\t+++let { class: klass, ...rest } = $props();+++\n</script>\n<button class={klass} {...---$$restProps---+++rest+++}>click me</button>\n```\n\n> [!DETAILS] Why we did this\n> `export let` was one of the more controversial API decisions, and there was a lot of debate about whether you should think about a property being `export`ed or `import`ed. `$props` doesn't have this trait. It's also in line with the other runes, and the general thinking reduces to \"everything special to reactivity in Svelte is a rune\".\n>\n> There were also a lot of limitations around `export let`, which required additional API, as shown above. `$props` unite this in one syntactical concept that leans heavily on regular JavaScript destructuring syntax.\n\n## Event changes\n\nEvent handlers have been given a facelift in Svelte 5.", "mimetype": "text/plain", "start_char_idx": 3170, "end_char_idx": 6864, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "503878b1-b78c-4526-bb82-614d22931bf6": {"__data__": {"id_": "503878b1-b78c-4526-bb82-614d22931bf6", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b43ef22e-9919-49b8-b6b1-a9619b9903ef", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a4f80237a9fb74575d4adcc50a48b703c295b038c8de6609047d8769a0e0cd9b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c6f21701-8d6f-426c-9372-10a3d4ce54b1", "node_type": "1", "metadata": {}, "hash": "3f581e6bd2ec90d3acce3cd3f06a631549b5d15caead6e1d5833007852e17aa3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "`$props` doesn't have this trait. It's also in line with the other runes, and the general thinking reduces to \"everything special to reactivity in Svelte is a rune\".\n>\n> There were also a lot of limitations around `export let`, which required additional API, as shown above. `$props` unite this in one syntactical concept that leans heavily on regular JavaScript destructuring syntax.\n\n## Event changes\n\nEvent handlers have been given a facelift in Svelte 5. Whereas in Svelte 4 we use the `on:` directive to attach an event listener to an element, in Svelte 5 they are properties like any other (in other words - remove the colon):\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n\n<button on---:---click={() => count++}>\n\tclicks: {count}\n</button>\n```\n\nSince they're just properties, you can use the normal shorthand syntax...\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\tfunction onclick() {\n\t\tcount++;\n\t}\n</script>\n\n<button {onclick}>\n\tclicks: {count}\n</button>\n```\n\n...though when using a named event handler function it's usually better to use a more descriptive name.\n\n### Component events\n\nIn Svelte 4, components could emit events by creating a dispatcher with `createEventDispatcher`.\n\nThis function is deprecated in Svelte 5. Instead, components should accept _callback props_ - which means you then pass functions as properties to these components:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Pump from './Pump.svelte';\n\n\tlet size = $state(15);\n\tlet burst = $state(false);\n\n\tfunction reset() {\n\t\tsize = 15;\n\t\tburst = false;\n\t}\n</script>\n\n<Pump\n\t---on:---inflate={(power) => {\n\t\tsize += power---.detail---;\n\t\tif (size > 75) burst = true;\n\t}}\n\t---on:---deflate={(power) => {\n\t\tif (size > 0) size -= power---.detail---;\n\t}}\n/>\n\n{#if burst}\n\t<button onclick={reset}>new balloon</button>\n\t<span class=\"boom\">\ud83d\udca5</span>\n{:else}\n\t<span class=\"balloon\" style=\"scale: {0.01 * size}\">\n\t\t\ud83c\udf88\n\t</span>\n{/if}\n```\n\n```svelte\n<!--- file: Pump.svelte --->\n<script>\n    ---import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();\n    ---\n\t+++let { inflate, deflate } = $props();+++\n\tlet power = $state(5);\n</script>\n\n<button onclick={() => ---dispatch('inflate', power)---+++inflate(power)+++}>\n\tinflate\n</button>\n<button onclick={() => ---dispatch('deflate', power)---+++deflate(power)+++}>\n\tdeflate\n</button>\n<button onclick={() => power--}>-</button>\nPump power: {power}\n<button onclick={() => power++}>+</button>\n```\n\n### Bubbling events\n\nInstead of doing `<button on:click>` to 'forward' the event from the element to the component, the component should accept an `onclick` callback prop:\n\n```svelte\n<script>\n\t+++let { onclick } = $props();+++\n</script>\n\n<button ---on:click--- +++{onclick}+++>\n\tclick me\n</button>\n```\n\nNote that this also means you can 'spread' event handlers onto the element along with other props instead of tediously forwarding each event separately:\n\n```svelte\n<script>\n\tlet props = $props();\n</script>\n\n<button ---{...$$props} on:click on:keydown on:all_the_other_stuff--- +++{...props}+++>\n\tclick me\n</button>\n```\n\n### Event modifiers\n\nIn Svelte 4, you can add event modifiers to handlers:\n\n```svelte\n<button on:click|once|preventDefault={handler}>...</button>\n```\n\nModifiers are specific to `on:` and as such do not work with modern event handlers. Adding things like `event.preventDefault()` inside the handler itself is preferable, since all the logic lives in one place rather than being split between handler and modifiers.", "mimetype": "text/plain", "start_char_idx": 6406, "end_char_idx": 9910, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c6f21701-8d6f-426c-9372-10a3d4ce54b1": {"__data__": {"id_": "c6f21701-8d6f-426c-9372-10a3d4ce54b1", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "503878b1-b78c-4526-bb82-614d22931bf6", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c8dbbd146aadd2cff3ef6ea1ad233258f509e6e3cf3455b8e61bcadc3920891a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08a916ae-e944-47e5-9cf5-2919b7cca590", "node_type": "1", "metadata": {}, "hash": "206c910ca80a691e781ad366bfa8bac4521f7acb0f421ea5f1d368eca2961bf3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Adding things like `event.preventDefault()` inside the handler itself is preferable, since all the logic lives in one place rather than being split between handler and modifiers.\n\nSince event handlers are just functions, you can create your own wrappers as necessary:\n\n```svelte\n<script>\n\tfunction once(fn) {\n\t\treturn function (event) {\n\t\t\tif (fn) fn.call(this, event);\n\t\t\tfn = null;\n\t\t};\n\t}\n\n\tfunction preventDefault(fn) {\n\t\treturn function (event) {\n\t\t\tevent.preventDefault();\n\t\t\tfn.call(this, event);\n\t\t};\n\t}\n</script>\n\n<button onclick={once(preventDefault(handler))}>...</button>\n```\n\nThere are three modifiers \u2014 `capture`, `passive` and `nonpassive` \u2014 that can't be expressed as wrapper functions, since they need to be applied when the event handler is bound rather than when it runs.\n\nFor `capture`, we add the modifier to the event name:\n\n```svelte\n<button onclickcapture={...}>...</button>\n```\n\nChanging the [`passive`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#using_passive_listeners) option of an event handler, meanwhile, is not something to be done lightly. If you have a use case for it \u2014 and you probably don't! \u2014 then you will need to use an action to apply the event handler yourself.\n\n### Multiple event handlers\n\nIn Svelte 4, this is possible:\n\n```svelte\n<button on:click={one} on:click={two}>...</button>\n```\n\nDuplicate attributes/properties on elements \u2014 which now includes event handlers \u2014 are not allowed. Instead, do this:\n\n```svelte\n<button\n\tonclick={(e) => {\n\t\tone(e);\n\t\ttwo(e);\n\t}}\n>\n\t...\n</button>\n```\n\nWhen spreading props, local event handlers must go _after_ the spread, or they risk being overwritten:\n\n```svelte\n<button\n\t{...props}\n\tonclick={(e) => {\n\t\tdoStuff(e);\n\t\tprops.onclick?.(e);\n\t}}\n>\n\t...\n</button>\n```\n\n> [!DETAILS] Why we did this\n> `createEventDispatcher` was always a bit boilerplate-y:\n>\n> - import the function\n> - call the function to get a dispatch function\n> - call said dispatch function with a string and possibly a payload\n> - retrieve said payload on the other end through a `.detail` property, because the event itself was always a `CustomEvent`\n>\n> It was always possible to use component callback props, but because you had to listen to DOM events using `on:`, it made sense to use `createEventDispatcher` for component events due to syntactical consistency. Now that we have event attributes (`onclick`), it's the other way around: Callback props are now the more sensible thing to do.\n>\n> The removal of event modifiers is arguably one of the changes that seems like a step back for those who've liked the shorthand syntax of event modifiers. Given that they are not used that frequently, we traded a smaller surface area for more explicitness. Modifiers also were inconsistent, because most of them were only useable on DOM elements.\n>\n> Multiple listeners for the same event are also no longer possible, but it was something of an anti-pattern anyway, since it impedes readability: if there are many attributes, it becomes harder to spot that there are two handlers unless they are right next to each other. It also implies that the two handlers are independent, when in fact something like `event.stopImmediatePropagation()` inside `one` would prevent `two` from being called.\n>\n> By deprecating `createEventDispatcher` and the `on:` directive in favour of callback props and normal element properties, we:\n>\n> - reduce Svelte's learning curve\n> - remove boilerplate, particularly around `createEventDispatcher`\n> - remove the overhead of creating `CustomEvent` objects for events that may not even have listeners\n> - add the ability to spread event handlers\n> - add the ability to know which event handlers were provided to a component\n> - add the ability to express whether a given event handler is required or optional\n> - increase type safety (previously, it was effectively impossible for Svelte to guarantee that a component didn't emit a particular event)\n\n## Snippets instead of slots\n\nIn Svelte 4, content can be passed to components using slots. Svelte 5 replaces them with snippets which are more powerful and flexible, and as such slots are deprecated in Svelte 5.", "mimetype": "text/plain", "start_char_idx": 9732, "end_char_idx": 13908, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08a916ae-e944-47e5-9cf5-2919b7cca590": {"__data__": {"id_": "08a916ae-e944-47e5-9cf5-2919b7cca590", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6f21701-8d6f-426c-9372-10a3d4ce54b1", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "09a37322444ee9d3a80ea24c102355b37f0d63ab43a1a7eab1ef8dd052406cf6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a0359406-e71f-429c-bb71-1df0cb80e22f", "node_type": "1", "metadata": {}, "hash": "9a546cc235c5b311aef9d0c0529e658bf778aef33fe55af3291f27b89afa5105", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": ">\n> By deprecating `createEventDispatcher` and the `on:` directive in favour of callback props and normal element properties, we:\n>\n> - reduce Svelte's learning curve\n> - remove boilerplate, particularly around `createEventDispatcher`\n> - remove the overhead of creating `CustomEvent` objects for events that may not even have listeners\n> - add the ability to spread event handlers\n> - add the ability to know which event handlers were provided to a component\n> - add the ability to express whether a given event handler is required or optional\n> - increase type safety (previously, it was effectively impossible for Svelte to guarantee that a component didn't emit a particular event)\n\n## Snippets instead of slots\n\nIn Svelte 4, content can be passed to components using slots. Svelte 5 replaces them with snippets which are more powerful and flexible, and as such slots are deprecated in Svelte 5.\n\nThey continue to work, however, and you can pass snippets to a component that uses slots:\n\n```svelte\n<!--- file: Child.svelte --->\n<slot />\n<hr />\n<slot name=\"foo\" message=\"hello\" />\n```\n\n```svelte\n<!--- file: Parent.svelte --->\n<script>\n\timport Child from './Child.svelte';\n</script>\n\n<Child>\n\tdefault child content\n\n\t{#snippet foo({ message })}\n\t\tmessage from child: {message}\n\t{/snippet}\n</Child>\n```\n\n(The reverse is not true \u2014 you cannot pass slotted content to a component that uses [`{@render ...}`](/docs/svelte/@render) tags.)\n\nWhen using custom elements, you should still use `<slot />` like before. In a future version, when Svelte removes its internal version of slots, it will leave those slots as-is, i.e. output a regular DOM tag instead of transforming it.\n\n### Default content\n\nIn Svelte 4, the easiest way to pass a piece of UI to the child was using a `<slot />`. In Svelte 5, this is done using the `children` prop instead, which is then shown with `{@render children()}`:\n\n```svelte\n<script>\n\t+++let { children } = $props();+++\n</script>\n\n---<slot />---\n+++{@render children?.()}+++\n```\n\n### Multiple content placeholders\n\nIf you wanted multiple UI placeholders, you had to use named slots. In Svelte 5, use props instead, name them however you like and `{@render ...}` them:\n\n```svelte\n<script>\n\t+++let { header, main, footer } = $props();+++\n</script>\n\n<header>\n\t---<slot name=\"header\" />---\n\t+++{@render header()}+++\n</header>\n\n<main>\n\t---<slot name=\"main\" />---\n\t+++{@render main()}+++\n</main>\n\n<footer>\n\t---<slot name=\"footer\" />---\n\t+++{@render footer()}+++\n</footer>\n```\n\n### Passing data back up\n\nIn Svelte 4, you would pass data to a `<slot />` and then retrieve it with `let:` in the parent component. In Svelte 5, snippets take on that responsibility:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport List from './List.svelte';\n</script>\n\n<List items={['one', 'two', 'three']} ---let:item--->\n\t+++{#snippet item(text)}+++\n\t\t<span>{text}</span>\n\t+++{/snippet}+++\n\t---<span slot=\"empty\">No items yet</span>---\n\t+++{#snippet empty()}\n\t\t<span>No items yet</span>\n\t{/snippet}+++\n</List>\n```\n\n```svelte\n<!--- file: List.svelte --->\n<script>\n\tlet { items, +++item, empty+++ } = $props();\n</script>\n\n{#if items.length}\n\t<ul>\n\t\t{#each items as entry}\n\t\t\t<li>\n\t\t\t\t---<slot item={entry} />---\n\t\t\t\t+++{@render item(entry)}+++\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n{:else}\n\t---<slot name=\"empty\" />---\n\t+++{@render empty?.()}+++\n{/if}\n```\n\n> [!DETAILS] Why we did this\n> Slots were easy to get started with, but the more advanced the use case became, the more involved and confusing the syntax became:\n>\n> - the `let:` syntax was confusing to many people as it _creates_ a variable whereas all other `:` directives _receive_ a variable\n> - the scope of a variable declared with `let:` wasn't clear.", "mimetype": "text/plain", "start_char_idx": 13009, "end_char_idx": 16722, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a0359406-e71f-429c-bb71-1df0cb80e22f": {"__data__": {"id_": "a0359406-e71f-429c-bb71-1df0cb80e22f", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08a916ae-e944-47e5-9cf5-2919b7cca590", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8e0f21c926bc6160320a572e1133f162e5f00fb8d2fdda98976d791ead0ce734", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f43da00c-d2e2-4c1b-a778-629c8833e404", "node_type": "1", "metadata": {}, "hash": "41fb7e1f8a35999432bc6daedbc8bc6d0164fc1c043d23d8da45f4afe677b3d4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "()}+++\n{/if}\n```\n\n> [!DETAILS] Why we did this\n> Slots were easy to get started with, but the more advanced the use case became, the more involved and confusing the syntax became:\n>\n> - the `let:` syntax was confusing to many people as it _creates_ a variable whereas all other `:` directives _receive_ a variable\n> - the scope of a variable declared with `let:` wasn't clear. In the example above, it may look like you can use the `item` slot prop in the `empty` slot, but that's not true\n> - named slots had to be applied to an element using the `slot` attribute. Sometimes you didn't want to create an element, so we had to add the `<svelte:fragment>` API\n> - named slots could also be applied to a component, which changed the semantics of where `let:` directives are available (even today us maintainers often don't know which way around it works)\n>\n> Snippets solve all of these problems by being much more readable and clear. At the same time they're more powerful as they allow you to define sections of UI that you can render _anywhere_, not just passing them as props to a component.\n\n## Migration script\n\nBy now you should have a pretty good understanding of the before/after and how the old syntax relates to the new syntax. It probably also became clear that a lot of these migrations are rather technical and repetitive - something you don't want to do by hand.\n\nWe thought the same, which is why we provide a migration script to do most of the migration automatically. You can upgrade your project by using `npx sv migrate svelte-5`. This will do the following things:\n\n- bump core dependencies in your `package.json`\n- migrate to runes (`let` -> `$state` etc)\n- migrate to event attributes for DOM elements (`on:click` -> `onclick`)\n- migrate slot creations to render tags (`<slot />` -> `{@render children()}`)\n- migrate slot usages to snippets (`<div slot=\"x\">...</div>` -> `{#snippet x()}<div>...</div>{/snippet}`)\n- migrate obvious component creations (`new Component(...)` -> `mount(Component, ...)`)\n\nYou can also migrate a single component in VS Code through the `Migrate Component to Svelte 5 Syntax` command, or in our Playground through the `Migrate` button.\n\nNot everything can be migrated automatically, and some migrations need manual cleanup afterwards. The following sections describe these in more detail.\n\n### run\n\nYou may see that the migration script converts some of your `$:` statements to a `run` function which is imported from `svelte/legacy`. This happens if the migration script couldn't reliably migrate the statement to a `$derived` and concluded this is a side effect instead. In some cases this may be wrong and it's best to change this to use a `$derived` instead. In other cases it may be right, but since `$:` statements also ran on the server but `$effect` does not, it isn't safe to transform it as such. Instead, `run` is used as a stopgap solution. `run` mimics most of the characteristics of `$:`, in that it runs on the server once, and runs as `$effect.pre` on the client (`$effect.pre` runs _before_ changes are applied to the DOM; most likely you want to use `$effect` instead).\n\n```svelte\n<script>\n\t---import { run } from 'svelte/legacy';---\n\t---run(() => {---\n\t+++$effect(() => {+++\n\t\t// some side effect code\n\t})\n</script>\n```\n\n### Event modifiers\n\nEvent modifiers are not applicable to event attributes (e.g. you can't do `onclick|preventDefault={...}`). Therefore, when migrating event directives to event attributes, we need a function-replacement for these modifiers. These are imported from `svelte/legacy`, and should be migrated away from in favor of e.g. just using `event.preventDefault()`.\n\n```svelte\n<script>\n\t---import { preventDefault } from 'svelte/legacy';---\n</script>\n\n<button\n\tonclick={---preventDefault---((event) => {\n\t\t+++event.preventDefault();+++\n\t\t// ...\n\t})}\n>\n\tclick me\n</button>\n```\n\n### Things that are not automigrated\n\nThe migration script does not convert `createEventDispatcher`. You need to adjust those parts manually. It doesn't do it because it's too risky because it could result in breakage for users of the component, which the migration script cannot find out.", "mimetype": "text/plain", "start_char_idx": 16346, "end_char_idx": 20507, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f43da00c-d2e2-4c1b-a778-629c8833e404": {"__data__": {"id_": "f43da00c-d2e2-4c1b-a778-629c8833e404", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a0359406-e71f-429c-bb71-1df0cb80e22f", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "2415dcf12e81a1ebbef33e58076e4fe056667420db2908e108d4a3051396ccd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2698cf39-50a1-4f80-9795-c1ef1d225c15", "node_type": "1", "metadata": {}, "hash": "7a55d5c53125e835fd8861559eba4468bcd072cbad79dbff8adf2002d75e76c6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "you can't do `onclick|preventDefault={...}`). Therefore, when migrating event directives to event attributes, we need a function-replacement for these modifiers. These are imported from `svelte/legacy`, and should be migrated away from in favor of e.g. just using `event.preventDefault()`.\n\n```svelte\n<script>\n\t---import { preventDefault } from 'svelte/legacy';---\n</script>\n\n<button\n\tonclick={---preventDefault---((event) => {\n\t\t+++event.preventDefault();+++\n\t\t// ...\n\t})}\n>\n\tclick me\n</button>\n```\n\n### Things that are not automigrated\n\nThe migration script does not convert `createEventDispatcher`. You need to adjust those parts manually. It doesn't do it because it's too risky because it could result in breakage for users of the component, which the migration script cannot find out.\n\nThe migration script does not convert `beforeUpdate/afterUpdate`. It doesn't do it because it's impossible to determine the actual intent of the code. As a rule of thumb you can often go with a combination of `$effect.pre` (runs at the same time as `beforeUpdate` did) and `tick` (imported from `svelte`, allows you to wait until changes are applied to the DOM and then do some work).\n\n## Components are no longer classes\n\nIn Svelte 3 and 4, components are classes. In Svelte 5 they are functions and should be instantiated differently. If you need to manually instantiate components, you should use `mount` or `hydrate` (imported from `svelte`) instead. If you see this error using SvelteKit, try updating to the latest version of SvelteKit first, which adds support for Svelte 5. If you're using Svelte without SvelteKit, you'll likely have a `main.js` file (or similar) which you need to adjust:\n\n```js\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });---\n+++const app = mount(App, { target: document.getElementById(\"app\") });+++\n\nexport default app;\n```\n\n`mount` and `hydrate` have the exact same API. The difference is that `hydrate` will pick up the Svelte's server-rendered HTML inside its target and hydrate it. Both return an object with the exports of the component and potentially property accessors (if compiled with `accessors: true`). They do not come with the `$on`, `$set` and `$destroy` methods you may know from the class component API. These are its replacements:\n\nFor `$on`, instead of listening to events, pass them via the `events` property on the options argument.\n\n```js\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });\napp.$on('event', callback);---\n+++const app = mount(App, { target: document.getElementById(\"app\"), events: { event: callback } });+++\n```\n\n> [!NOTE] Note that using `events` is discouraged \u2014 instead, [use callbacks](#Event-changes)\n\nFor `$set`, use `$state` instead to create a reactive property object and manipulate it. If you're doing this inside a `.js` or `.ts` file, adjust the ending to include `.svelte`, i.e. `.svelte.js` or `.svelte.ts`.\n\n```js\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.$set({ foo: 'baz' });---\n+++const props = $state({ foo: 'bar' });\nconst app = mount(App, { target: document.getElementById(\"app\"), props });\nprops.foo = 'baz';+++\n```\n\nFor `$destroy`, use `unmount` instead.\n\n```js\n+++import { mount, unmount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.$destroy();---\n+++const app = mount(App, { target: document.getElementById(\"app\") });\nunmount(app);+++\n```\n\nAs a stop-gap-solution, you can also use `createClassComponent` or `asClassComponent` (imported from `svelte/legacy`) instead to keep the same API known from Svelte 4 after instantiating.", "mimetype": "text/plain", "start_char_idx": 19717, "end_char_idx": 23633, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2698cf39-50a1-4f80-9795-c1ef1d225c15": {"__data__": {"id_": "2698cf39-50a1-4f80-9795-c1ef1d225c15", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f43da00c-d2e2-4c1b-a778-629c8833e404", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "f3c2522442f9b602d3365e91b57dc15fa0e1ea1a9d543b43689302ecfff2d92e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "329a9921-9647-4add-8b58-1993b961d2d4", "node_type": "1", "metadata": {}, "hash": "e81f268dc5d611030336252fa79a0375d1c8f993d147054f6b66ce2da4c22310", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "```js\n+++import { mount, unmount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.$destroy();---\n+++const app = mount(App, { target: document.getElementById(\"app\") });\nunmount(app);+++\n```\n\nAs a stop-gap-solution, you can also use `createClassComponent` or `asClassComponent` (imported from `svelte/legacy`) instead to keep the same API known from Svelte 4 after instantiating.\n\n```js\n+++import { createClassComponent } from 'svelte/legacy';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });---\n+++const app = createClassComponent({ component: App, target: document.getElementById(\"app\") });+++\n\nexport default app;\n```\n\nIf this component is not under your control, you can use the `compatibility.componentApi` compiler option for auto-applied backwards compatibility, which means code using `new Component(...)` keeps working without adjustments (note that this adds a bit of overhead to each component). This will also add `$set` and `$on` methods for all component instances you get through `bind:this`.\n\n```js\n/// svelte.config.js\nexport default {\n\tcompilerOptions: {\n\t\tcompatibility: {\n\t\t\tcomponentApi: 4\n\t\t}\n\t}\n};\n```\n\nNote that `mount` and `hydrate` are _not_ synchronous, so things like `onMount` won't have been called by the time the function returns and the pending block of promises will not have been rendered yet (because `#await` waits a microtask to wait for a potentially immediately-resolved promise). If you need that guarantee, call `flushSync` (import from `'svelte'`) after calling `mount/hydrate`.\n\n### Server API changes\n\nSimilarly, components no longer have a `render` method when compiled for server side rendering. Instead, pass the function to `render` from `svelte/server`:\n\n```js\n+++import { render } from 'svelte/server';+++\nimport App from './App.svelte';\n\n---const { html, head } = App.render({ props: { message: 'hello' }});---\n+++const { html, head } = render(App, { props: { message: 'hello' }});+++\n```\n\nIn Svelte 4, rendering a component to a string also returned the CSS of all components. In Svelte 5, this is no longer the case by default because most of the time you're using a tooling chain that takes care of it in other ways (like SvelteKit). If you need CSS to be returned from `render`, you can set the `css` compiler option to `'injected'` and it will add `<style>` elements to the `head`.\n\n### Component typing changes\n\nThe change from classes towards functions is also reflected in the typings: `SvelteComponent`, the base class from Svelte 4, is deprecated in favour of the new `Component` type which defines the function shape of a Svelte component. To manually define a component shape in a `d.ts` file:\n\n```ts\nimport type { Component } from 'svelte';\nexport declare const MyComponent: Component<{\n\tfoo: string;\n}>;\n```\n\nTo declare that a component of a certain type is required:\n\n```js\nimport { ComponentA, ComponentB } from 'component-library';\n---import type { SvelteComponent } from 'svelte';---\n+++import type { Component } from 'svelte';+++\n\n---let C: typeof SvelteComponent<{ foo: string }> = $state(---\n+++let C: Component<{ foo: string }> = $state(+++\n\tMath.random() ? ComponentA : ComponentB\n);\n```\n\nThe two utility types `ComponentEvents` and `ComponentType` are also deprecated. `ComponentEvents` is obsolete because events are defined as callback props now, and `ComponentType` is obsolete because the new `Component` type is the component type already (i.e. `ComponentType<SvelteComponent<{ prop: string }>>` is equivalent to `Component<{ prop: string }>`).\n\n### bind:this changes\n\nBecause components are no longer classes, using `bind:this` no longer returns a class instance with `$set`, `$on` and `$destroy` methods on it. It only returns the instance exports (`export function/const`) and, if you're using the `accessors` option, a getter/setter-pair for each property.", "mimetype": "text/plain", "start_char_idx": 23158, "end_char_idx": 27149, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "329a9921-9647-4add-8b58-1993b961d2d4": {"__data__": {"id_": "329a9921-9647-4add-8b58-1993b961d2d4", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2698cf39-50a1-4f80-9795-c1ef1d225c15", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8f63ac28fe504d94f80e6a93e336cb0208925a31e16e8a33cc5845a314a54978", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "48247c5b-3f98-4ccf-9982-828858b0daca", "node_type": "1", "metadata": {}, "hash": "6e5a66f6c0860b2e2cb014b279f5888db619be0400dc90fbe6ff8dcecb12f884", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ComponentA : ComponentB\n);\n```\n\nThe two utility types `ComponentEvents` and `ComponentType` are also deprecated. `ComponentEvents` is obsolete because events are defined as callback props now, and `ComponentType` is obsolete because the new `Component` type is the component type already (i.e. `ComponentType<SvelteComponent<{ prop: string }>>` is equivalent to `Component<{ prop: string }>`).\n\n### bind:this changes\n\nBecause components are no longer classes, using `bind:this` no longer returns a class instance with `$set`, `$on` and `$destroy` methods on it. It only returns the instance exports (`export function/const`) and, if you're using the `accessors` option, a getter/setter-pair for each property.\n\n## `<svelte:component>` is no longer necessary\n\nIn Svelte 4, components are _static_ \u2014 if you render `<Thing>`, and the value of `Thing` changes, [nothing happens](/playground/7f1fa24f0ab44c1089dcbb03568f8dfa?version=4.2.18). To make it dynamic you had to use `<svelte:component>`.\n\nThis is no longer true in Svelte 5:\n\n```svelte\n<script>\n\timport A from './A.svelte';\n\timport B from './B.svelte';\n\n\tlet Thing = $state();\n</script>\n\n<select bind:value={Thing}>\n\t<option value={A}>A</option>\n\t<option value={B}>B</option>\n</select>\n\n<!-- these are equivalent -->\n<Thing />\n<svelte:component this={Thing} />\n```\nWhile migrating, keep in mind that your component's name should be capitalized (`Thing`) to distinguish it from elements, unless using dot notation.\n\n### Dot notation indicates a component\n\nIn Svelte 4, `<foo.bar>` would create an element with a tag name of `\"foo.bar\"`. In Svelte 5, `foo.bar` is treated as a component instead. This is particularly useful inside `each` blocks:\n\n```svelte\n{#each items as item}\n\t<item.component {...item.props} />\n{/each}\n```\n\n## Whitespace handling changed\n\nPreviously, Svelte employed a very complicated algorithm to determine if whitespace should be kept or not. Svelte 5 simplifies this which makes it easier to reason about as a developer. The rules are:\n\n- Whitespace between nodes is collapsed to one whitespace\n- Whitespace at the start and end of a tag is removed completely\n- Certain exceptions apply such as keeping whitespace inside `pre` tags\n\nAs before, you can disable whitespace trimming by setting the `preserveWhitespace` option in your compiler settings or on a per-component basis in `<svelte:options>`.\n\n## Modern browser required\n\nSvelte 5 requires a modern browser (in other words, not Internet Explorer) for various reasons:\n\n- it uses [`Proxies`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n- elements with `clientWidth`/`clientHeight`/`offsetWidth`/`offsetHeight` bindings use a [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) rather than a convoluted `<iframe>` hack\n- `<input type=\"range\" bind:value={...} />` only uses an `input` event listener, rather than also listening for `change` events as a fallback\n\nThe `legacy` compiler option, which generated bulkier but IE-friendly code, no longer exists.\n\n## Changes to compiler options\n\n- The `false`/`true` (already deprecated previously) and the `\"none\"` values were removed as valid values from the `css` option\n- The `legacy` option was repurposed\n- The `hydratable` option has been removed. Svelte components are always hydratable now\n- The `enableSourcemap` option has been removed. Source maps are always generated now, tooling can choose to ignore it\n- The `tag` option was removed. Use `<svelte:options customElement=\"tag-name\" />` inside the component instead\n- The `loopGuardTimeout`, `format`, `sveltePath`, `errorMode` and `varsReport` options were removed\n\n## The `children` prop is reserved\n\nContent inside component tags becomes a snippet prop called `children`. You cannot have a separate prop by that name.\n\n## Breaking changes in runes mode\n\nSome breaking changes only apply once your component is in runes mode.\n\n### Bindings to component exports are not allowed\n\nExports from runes mode components cannot be bound to directly.", "mimetype": "text/plain", "start_char_idx": 26440, "end_char_idx": 30498, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48247c5b-3f98-4ccf-9982-828858b0daca": {"__data__": {"id_": "48247c5b-3f98-4ccf-9982-828858b0daca", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "329a9921-9647-4add-8b58-1993b961d2d4", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "28a9388afc57afcbdfeb8e95c535b03217b0ea152c03268452bf5b30c5bbeb0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "052410bf-11cf-413d-9350-45e100493458", "node_type": "1", "metadata": {}, "hash": "40083a9f0895f0a5889562df1f097cb84647f7155b85fad6c5495adbf817f1f7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Svelte components are always hydratable now\n- The `enableSourcemap` option has been removed. Source maps are always generated now, tooling can choose to ignore it\n- The `tag` option was removed. Use `<svelte:options customElement=\"tag-name\" />` inside the component instead\n- The `loopGuardTimeout`, `format`, `sveltePath`, `errorMode` and `varsReport` options were removed\n\n## The `children` prop is reserved\n\nContent inside component tags becomes a snippet prop called `children`. You cannot have a separate prop by that name.\n\n## Breaking changes in runes mode\n\nSome breaking changes only apply once your component is in runes mode.\n\n### Bindings to component exports are not allowed\n\nExports from runes mode components cannot be bound to directly. For example, having `export const foo = ...` in component `A` and then doing `<A bind:foo />` causes an error. Use `bind:this` instead \u2014 `<A bind:this={a} />` \u2014 and access the export as `a.foo`. This change makes things easier to reason about, as it enforces a clear separation between props and exports.\n\n### Bindings need to be explicitly defined using `$bindable()`\n\nIn Svelte 4 syntax, every property (declared via `export let`) is bindable, meaning you can `bind:` to it. In runes mode, properties are not bindable by default: you need to denote bindable props with the `$bindable` rune.\n\nIf a bindable property has a default value (e.g. `let { foo = $bindable('bar') } = $props();`), you need to pass a non-`undefined` value to that property if you're binding to it. This prevents ambiguous behavior \u2014 the parent and child must have the same value \u2014 and results in better performance (in Svelte 4, the default value was reflected back to the parent, resulting in wasteful additional render cycles).\n\n### `accessors` option is ignored\n\nSetting the `accessors` option to `true` makes properties of a component directly accessible on the component instance.\n\n```svelte\n<svelte:options accessors={true} />\n\n<script>\n\t// available via componentInstance.name\n\texport let name;\n</script>\n```\n\nIn runes mode, properties are never accessible on the component instance. You can use component exports instead if you need to expose them.\n\n```svelte\n<script>\n\tlet { name } = $props();\n\t// available via componentInstance.getName()\n\texport const getName = () => name;\n</script>\n```\n\nAlternatively, if the place where they are instantiated is under your control, you can also make use of runes inside `.js/.ts` files by adjusting their ending to include `.svelte`, i.e. `.svelte.js` or `.svelte.ts`, and then use `$state`:\n\n```js\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.foo = 'baz'---\n+++const props = $state({ foo: 'bar' });\nconst app = mount(App, { target: document.getElementById(\"app\"), props });\nprops.foo = 'baz';+++\n```\n\n### `immutable` option is ignored\n\nSetting the `immutable` option has no effect in runes mode. This concept is replaced by how `$state` and its variations work.\n\n### Classes are no longer \"auto-reactive\"\n\nIn Svelte 4, doing the following triggered reactivity:\n\n```svelte\n<script>\n\tlet foo = new Foo();\n</script>\n\n<button on:click={() => (foo.value = 1)}>{foo.value}</button\n>\n```\n\nThis is because the Svelte compiler treated the assignment to `foo.value` as an instruction to update anything that referenced `foo`. In Svelte 5, reactivity is determined at runtime rather than compile time, so you should define `value` as a reactive `$state` field on the `Foo` class. Wrapping `new Foo()` with `$state(...)` will have no effect \u2014 only vanilla objects and arrays are made deeply reactive.\n\n### Touch and wheel events are passive\n\nWhen using `onwheel`, `onmousewheel`, `ontouchstart` and `ontouchmove` event attributes, the handlers are [passive](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#using_passive_listeners) to align with browser defaults. This greatly improves responsiveness by allowing the browser to scroll the document immediately, rather than waiting to see if the event handler calls `event.preventDefault()`.", "mimetype": "text/plain", "start_char_idx": 29747, "end_char_idx": 33899, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "052410bf-11cf-413d-9350-45e100493458": {"__data__": {"id_": "052410bf-11cf-413d-9350-45e100493458", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48247c5b-3f98-4ccf-9982-828858b0daca", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "0e59d965779bf4cf629dc6df7a6b97719c97468cc7e25e246216b2976da8d910", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a0c8717c-5f4a-458e-aa18-bdd230ac377d", "node_type": "1", "metadata": {}, "hash": "f3b0b4f2d74a323480a43ddca519268de0dbde05f3cf22573903d169f41d9f3b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In Svelte 5, reactivity is determined at runtime rather than compile time, so you should define `value` as a reactive `$state` field on the `Foo` class. Wrapping `new Foo()` with `$state(...)` will have no effect \u2014 only vanilla objects and arrays are made deeply reactive.\n\n### Touch and wheel events are passive\n\nWhen using `onwheel`, `onmousewheel`, `ontouchstart` and `ontouchmove` event attributes, the handlers are [passive](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#using_passive_listeners) to align with browser defaults. This greatly improves responsiveness by allowing the browser to scroll the document immediately, rather than waiting to see if the event handler calls `event.preventDefault()`.\n\nIn the very rare cases that you need to prevent these event defaults, you should use [`on`](/docs/svelte/svelte-events#on) instead (for example inside an action).\n\n### Attribute/prop syntax is stricter\n\nIn Svelte 4, complex attribute values needn't be quoted:\n\n<!-- prettier-ignore -->\n```svelte\n<Component prop=this{is}valid />\n```\n\nThis is a footgun. In runes mode, if you want to concatenate stuff you must wrap the value in quotes:\n\n```svelte\n<Component prop=\"this{is}valid\" />\n```\n\nNote that Svelte 5 will also warn if you have a single expression wrapped in quotes, like `answer=\"{42}\"` \u2014 in Svelte 6, that will cause the value to be converted to a string, rather than passed as a number.\n\n### HTML structure is stricter\n\nIn Svelte 4, you were allowed to write HTML code that would be repaired by the browser when server side rendering it. For example you could write this...\n\n```svelte\n<table>\n\t<tr>\n\t\t<td>hi</td>\n\t</tr>\n</table>\n```\n\n... and the browser would auto-insert a `<tbody>` element:\n\n```svelte\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>hi</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\nSvelte 5 is more strict about the HTML structure and will throw a compiler error in cases where the browser would repair the DOM.\n\n## Other breaking changes\n\n### Stricter `@const` assignment validation\n\nAssignments to destructured parts of a `@const` declaration are no longer allowed. It was an oversight that this was ever allowed.\n\n### :is(...) and :where(...) are scoped\n\nPreviously, Svelte did not analyse selectors inside `:is(...)` and `:where(...)`, effectively treating them as global. Svelte 5 analyses them in the context of the current component. As such, some selectors may now be treated as unused if they were relying on this treatment. To fix this, use `:global(...)` inside the `:is(...)/:where(...)` selectors.\n\nWhen using Tailwind's `@apply` directive, add a `:global` selector to preserve rules that use Tailwind-generated `:is(...)` selectors:\n\n<!-- prettier-ignore -->\n```css\nmain +++:global+++ {\n\t@apply bg-blue-100 dark:bg-blue-900;\n}\n```\n\n### CSS hash position no longer deterministic\n\nPreviously Svelte would always insert the CSS hash last. This is no longer guaranteed in Svelte 5. This is only breaking if you [have very weird css selectors](https://stackoverflow.com/questions/15670631/does-the-order-of-classes-listed-on-an-item-affect-the-css).\n\n### Scoped CSS uses :where(...)\n\nTo avoid issues caused by unpredictable specificity changes, scoped CSS selectors now use `:where(.svelte-xyz123)` selector modifiers alongside `.svelte-xyz123` (where `xyz123` is, as previously, a hash of the `<style>` contents). You can read more detail [here](https://github.com/sveltejs/svelte/pull/10443).\n\nIn the event that you need to support ancient browsers that don't implement `:where`, you can manually alter the emitted CSS, at the cost of unpredictable specificity changes:\n\n```js\n// @errors: 2552\ncss = css.replace(/:where\\((.+?)\\)/, '$1');\n```\n\n### Error/warning codes have been renamed\n\nError and warning codes have been renamed. Previously they used dashes to separate the words, they now use underscores (e.g. foo-bar becomes foo_bar). Additionally, a handful of codes have been reworded slightly.", "mimetype": "text/plain", "start_char_idx": 33158, "end_char_idx": 37111, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a0c8717c-5f4a-458e-aa18-bdd230ac377d": {"__data__": {"id_": "a0c8717c-5f4a-458e-aa18-bdd230ac377d", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "052410bf-11cf-413d-9350-45e100493458", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "2219a3ac585cc851706027ea7772fdb9bdcd38506b3388c4c2a6d5ba8e5c4671", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ff1fc9b-3f26-4966-894b-77dc7310bf83", "node_type": "1", "metadata": {}, "hash": "f8cd04a09c466a3bee206821ba67665ff51db90e2946bc6eaab3f81fdcfaab28", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "You can read more detail [here](https://github.com/sveltejs/svelte/pull/10443).\n\nIn the event that you need to support ancient browsers that don't implement `:where`, you can manually alter the emitted CSS, at the cost of unpredictable specificity changes:\n\n```js\n// @errors: 2552\ncss = css.replace(/:where\\((.+?)\\)/, '$1');\n```\n\n### Error/warning codes have been renamed\n\nError and warning codes have been renamed. Previously they used dashes to separate the words, they now use underscores (e.g. foo-bar becomes foo_bar). Additionally, a handful of codes have been reworded slightly.\n\n### Reduced number of namespaces\n\nThe number of valid namespaces you can pass to the compiler option `namespace` has been reduced to `html` (the default), `mathml` and `svg`.\n\nThe `foreign` namespace was only useful for Svelte Native, which we're planning to support differently in a 5.x minor.\n\n### beforeUpdate/afterUpdate changes\n\n`beforeUpdate` no longer runs twice on initial render if it modifies a variable referenced in the template.\n\n`afterUpdate` callbacks in a parent component will now run after `afterUpdate` callbacks in any child components.\n\n`beforeUpdate/afterUpdate` no longer run when the component contains a `<slot>` and its content is updated.\n\nBoth functions are disallowed in runes mode \u2014 use `$effect.pre(...)` and `$effect(...)` instead.\n\n### `contenteditable` behavior change\n\nIf you have a `contenteditable` node with a corresponding binding _and_ a reactive value inside it (example: `<div contenteditable=true bind:textContent>count is {count}</div>`), then the value inside the contenteditable will not be updated by updates to `count` because the binding takes full control over the content immediately and it should only be updated through it.\n\n### `oneventname` attributes no longer accept string values\n\nIn Svelte 4, it was possible to specify event attributes on HTML elements as a string:\n\n```svelte\n<button onclick=\"alert('hello')\">...</button>\n```\n\nThis is not recommended, and is no longer possible in Svelte 5, where properties like `onclick` replace `on:click` as the mechanism for adding event handlers.\n\n### `null` and `undefined` become the empty string\n\nIn Svelte 4, `null` and `undefined` were printed as the corresponding string. In 99 out of 100 cases you want this to become the empty string instead, which is also what most other frameworks out there do. Therefore, in Svelte 5, `null` and `undefined` become the empty string.\n\n### `bind:files` values can only be `null`, `undefined` or `FileList`\n\n`bind:files` is now a two-way binding. As such, when setting a value, it needs to be either falsy (`null` or `undefined`) or of type `FileList`.\n\n### Bindings now react to form resets\n\nPreviously, bindings did not take into account `reset` event of forms, and therefore values could get out of sync with the DOM. Svelte 5 fixes this by placing a `reset` listener on the document and invoking bindings where necessary.\n\n### `walk` no longer exported\n\n`svelte/compiler` reexported `walk` from `estree-walker` for convenience. This is no longer true in Svelte 5, import it directly from that package instead in case you need it.\n\n### Content inside `svelte:options` is forbidden\n\nIn Svelte 4 you could have content inside a `<svelte:options />` tag. It was ignored, but you could write something in there. In Svelte 5, content inside that tag is a compiler error.\n\n### `<slot>` elements in declarative shadow roots are preserved\n\nSvelte 4 replaced the `<slot />` tag in all places with its own version of slots. Svelte 5 preserves them in the case they are a child of a `<template shadowrootmode=\"...\">` element.\n\n### `<svelte:element>` tag must be an expression\n\nIn Svelte 4, `<svelte:element this=\"div\">` is valid code. This makes little sense \u2014 you should just do `<div>`.", "mimetype": "text/plain", "start_char_idx": 36526, "end_char_idx": 40335, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6ff1fc9b-3f26-4966-894b-77dc7310bf83": {"__data__": {"id_": "6ff1fc9b-3f26-4966-894b-77dc7310bf83", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f619c683-4114-4e2b-9b27-ca2f455ba6d3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3d3067f79c48b7474b455274c910ef90ff916b71eca276bc0033a800ea510260", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a0c8717c-5f4a-458e-aa18-bdd230ac377d", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "dd25f8f4004dcd0cc9c9bcaa13fd2293d1c6e9767c818f30dac503bcf9bd4d41", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This is no longer true in Svelte 5, import it directly from that package instead in case you need it.\n\n### Content inside `svelte:options` is forbidden\n\nIn Svelte 4 you could have content inside a `<svelte:options />` tag. It was ignored, but you could write something in there. In Svelte 5, content inside that tag is a compiler error.\n\n### `<slot>` elements in declarative shadow roots are preserved\n\nSvelte 4 replaced the `<slot />` tag in all places with its own version of slots. Svelte 5 preserves them in the case they are a child of a `<template shadowrootmode=\"...\">` element.\n\n### `<svelte:element>` tag must be an expression\n\nIn Svelte 4, `<svelte:element this=\"div\">` is valid code. This makes little sense \u2014 you should just do `<div>`. In the vanishingly rare case that you _do_ need to use a literal value for some reason, you can do this:\n\n```svelte\n<svelte:element this=+++{+++\"div\"+++}+++>\n```\n\nNote that whereas Svelte 4 would treat `<svelte:element this=\"input\">` (for example) identically to `<input>` for the purposes of determining which `bind:` directives could be applied, Svelte 5 does not.\n\n### `mount` plays transitions by default\n\nThe `mount` function used to render a component tree plays transitions by default unless the `intro` option is set to `false`. This is different from legacy class components which, when manually instantiated, didn't play transitions by default.\n\n### `<img src={...}>` and `{@html ...}` hydration mismatches are not repaired\n\nIn Svelte 4, if the value of a `src` attribute or `{@html ...}` tag differ between server and client (a.k.a. a hydration mismatch), the mismatch is repaired. This is very costly: setting a `src` attribute (even if it evaluates to the same thing) causes images and iframes to be reloaded, and reinserting a large blob of HTML is slow.\n\nSince these mismatches are extremely rare, Svelte 5 assumes that the values are unchanged, but in development will warn you if they are not. To force an update you can do something like this:\n\n```svelte\n<script>\n\tlet { markup, src } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the values...\n\t\tconst initial = { markup, src };\n\n\t\t// unset them...\n\t\tmarkup = src = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tmarkup = initial.markup;\n\t\t\tsrc = initial.src;\n\t\t});\n\t}\n</script>\n\n{@html markup}\n<img {src} />\n```\n\n### Hydration works differently\n\nSvelte 5 makes use of comments during server side rendering which are used for more robust and efficient hydration on the client. As such, you shouldn't remove comments from your HTML output if you intend to hydrate it, and if you manually authored HTML to be hydrated by a Svelte component, you need to adjust that HTML to include said comments at the correct positions.\n\n### `onevent` attributes are delegated\n\nEvent attributes replace event directives: Instead of `on:click={handler}` you write `onclick={handler}`. For backwards compatibility the `on:event` syntax is still supported and behaves the same as in Svelte 4. Some of the `onevent` attributes however are delegated, which means you need to take care to not stop event propagation on those manually, as they then might never reach the listener for this event type at the root.\n\n### `--style-props` uses a different element\n\nSvelte 5 uses an extra `<svelte-css-wrapper>` element instead of a `<div>` to wrap the component when using CSS custom properties.\n\n<!-- TODO in final docs, add link to corresponding section for more details -->", "mimetype": "text/plain", "start_char_idx": 39587, "end_char_idx": 43092, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a710c582-a75f-4342-b692-691992df3047": {"__data__": {"id_": "a710c582-a75f-4342-b692-691992df3047", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cec080e9-c8d0-431f-989d-23ec9ea0ae1d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "609d24f62f3e40925354507e320a71ca9b3f735fb49c54dada32df9ef3ad6d1e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32e5b683-29ff-4c58-8b18-4558097b8c5a", "node_type": "1", "metadata": {}, "hash": "fdeedfe1a12863e9796cc078acab48539aaeb1bb2591b5a2f65aed26259a75c2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Frequently asked questions\n---\n\n## I'm new to Svelte. Where should I start?\n\nWe think the best way to get started is playing through the interactive [tutorial](/tutorial). Each step there is mainly focused on one specific aspect and is easy to follow. You'll be editing and running real Svelte components right in your browser.\n\nFive to ten minutes should be enough to get you up and running. An hour and a half should get you through the entire tutorial.\n\n## Where can I get support?\n\nIf your question is about certain syntax, the [reference docs](/docs/svelte) are a good place to start.\n\nStack Overflow is a popular forum to ask code-level questions or if you\u2019re stuck with a specific error. Read through the existing questions tagged with [Svelte](https://stackoverflow.com/questions/tagged/svelte+or+svelte-3) or [ask your own](https://stackoverflow.com/questions/ask?tags=svelte)!\n\nThere are online forums and chats which are a great place for discussion about best practices, application architecture or just to get to know fellow Svelte users. [Our Discord](/chat) or [the Reddit channel](https://www.reddit.com/r/sveltejs/) are examples of that. If you have an answerable code-level question, Stack Overflow is usually a better fit.\n\n## Are there any third-party resources?\n\nSvelte Society maintains a [list of books and videos](https://sveltesociety.dev/resources).\n\n## How can I get VS Code to syntax-highlight my .svelte files?\n\nThere is an [official VS Code extension for Svelte](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode).\n\n## Is there a tool to automatically format my .svelte files?\n\nYou can use prettier with the [prettier-plugin-svelte](https://www.npmjs.com/package/prettier-plugin-svelte) plugin.\n\n## How do I document my components?\n\nIn editors which use the Svelte Language Server you can document Components, functions and exports using specially formatted comments.\n\n````svelte\n<script>\n\t/** What should we call the user? */\n\texport let name = 'world';\n</script>\n\n<!--\n@component\nHere's some documentation for this component.\nIt will show up on hover.\n\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```tsx\n  <main name=\"Arethra\">\n  ```\n-->\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n````\n\nNote: The `@component` is necessary in the HTML comment which describes your component.\n\n## Does Svelte scale?\n\nThere will be a blog post about this eventually, but in the meantime, check out [this issue](https://github.com/sveltejs/svelte/issues/2546).\n\n## Is there a UI component library?\n\nThere are several UI component libraries as well as standalone components. Find them under the [design systems section of the components page](https://sveltesociety.dev/packages?category=design-system) on the Svelte Society website.\n\n## How do I test Svelte apps?\n\nHow your application is structured and where logic is defined will determine the best way to ensure it is properly tested. It is important to note that not all logic belongs within a component - this includes concerns such as data transformation, cross-component state management, and logging, among others. Remember that the Svelte library has its own test suite, so you do not need to write tests to validate implementation details provided by Svelte.\n\nA Svelte application will typically have three different types of tests: Unit, Component, and End-to-End (E2E).\n\n_Unit Tests_: Focus on testing business logic in isolation. Often this is validating individual functions and edge cases. By minimizing the surface area of these tests they can be kept lean and fast, and by extracting as much logic as possible from your Svelte components more of your application can be covered using them. When creating a new SvelteKit project, you will be asked whether you would like to setup [Vitest](https://vitest.dev/) for unit testing. There are a number of other test runners that could be used as well.\n\n_Component Tests_: Validating that a Svelte component mounts and interacts as expected throughout its lifecycle requires a tool that provides a Document Object Model (DOM). Components can be compiled (since Svelte is a compiler and not a normal library) and mounted to allow asserting against element structure, listeners, state, and all the other capabilities provided by a Svelte component.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4335, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32e5b683-29ff-4c58-8b18-4558097b8c5a": {"__data__": {"id_": "32e5b683-29ff-4c58-8b18-4558097b8c5a", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cec080e9-c8d0-431f-989d-23ec9ea0ae1d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "609d24f62f3e40925354507e320a71ca9b3f735fb49c54dada32df9ef3ad6d1e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a710c582-a75f-4342-b692-691992df3047", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "506d01855d155eff200afb0c48e0c8d07459c2afe0c149e50b567de0f3bb9e87", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47df42bf-63f7-432e-b008-b125aa668eef", "node_type": "1", "metadata": {}, "hash": "0302b770c5e8e16cc9c06d11374e2d40fd00842ac9192a6f04ddcdf0f950c3cc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "_Unit Tests_: Focus on testing business logic in isolation. Often this is validating individual functions and edge cases. By minimizing the surface area of these tests they can be kept lean and fast, and by extracting as much logic as possible from your Svelte components more of your application can be covered using them. When creating a new SvelteKit project, you will be asked whether you would like to setup [Vitest](https://vitest.dev/) for unit testing. There are a number of other test runners that could be used as well.\n\n_Component Tests_: Validating that a Svelte component mounts and interacts as expected throughout its lifecycle requires a tool that provides a Document Object Model (DOM). Components can be compiled (since Svelte is a compiler and not a normal library) and mounted to allow asserting against element structure, listeners, state, and all the other capabilities provided by a Svelte component. Tools for component testing range from an in-memory implementation like jsdom paired with a test runner like [Vitest](https://vitest.dev/) to solutions that leverage an actual browser to provide a visual testing capability such as [Playwright](https://playwright.dev/docs/test-components) or [Cypress](https://www.cypress.io/).\n\n_End-to-End Tests_: To ensure your users are able to interact with your application it is necessary to test it as a whole in a manner as close to production as possible. This is done by writing end-to-end (E2E) tests which load and interact with a deployed version of your application in order to simulate how the user will interact with your application. When creating a new SvelteKit project, you will be asked whether you would like to setup [Playwright](https://playwright.dev/) for end-to-end testing. There are many other E2E test libraries available for use as well.\n\nSome resources for getting started with testing:\n\n- [Svelte Testing Library](https://testing-library.com/docs/svelte-testing-library/example/)\n- [Svelte Component Testing in Cypress](https://docs.cypress.io/guides/component-testing/svelte/overview)\n- [Example using vitest](https://github.com/vitest-dev/vitest/tree/main/examples/sveltekit)\n- [Example using uvu test runner with JSDOM](https://github.com/lukeed/uvu/tree/master/examples/svelte)\n- [Test Svelte components using Vitest & Playwright](https://davipon.hashnode.dev/test-svelte-component-using-vitest-playwright)\n- [Component testing with WebdriverIO](https://webdriver.io/docs/component-testing/svelte)\n\n## Is there a router?\n\nThe official routing library is [SvelteKit](/docs/kit). SvelteKit provides a filesystem router, server-side rendering (SSR), and hot module reloading (HMR) in one easy-to-use package. It shares similarities with Next.js for React.\n\nHowever, you can use any router library. A lot of people use [page.js](https://github.com/visionmedia/page.js). There's also [navaid](https://github.com/lukeed/navaid), which is very similar. And [universal-router](https://github.com/kriasoft/universal-router), which is isomorphic with child routes, but without built-in history support.\n\nIf you prefer a declarative HTML approach, there's the isomorphic [svelte-routing](https://github.com/EmilTholin/svelte-routing) library and a fork of it called [svelte-navigator](https://github.com/mefechoel/svelte-navigator) containing some additional functionality.\n\nIf you need hash-based routing on the client side, check out [svelte-spa-router](https://github.com/ItalyPaleAle/svelte-spa-router) or [abstract-state-router](https://github.com/TehShrike/abstract-state-router/).\n\n[Routify](https://routify.dev) is another filesystem-based router, similar to SvelteKit's router. Version 3 supports Svelte's native SSR.\n\nYou can see a [community-maintained list of routers on sveltesociety.dev](https://sveltesociety.dev/packages?category=routers).\n\n## How do I write a mobile app with Svelte?\n\nWhile most mobile apps are written without using JavaScript, if you'd like to leverage your existing Svelte components and knowledge of Svelte when building mobile apps, you can turn a [SvelteKit SPA](https://kit.svelte.dev/docs/single-page-apps) into a mobile app with [Tauri](https://v2.tauri.app/start/frontend/sveltekit/) or [Capacitor](https://capacitorjs.com/solution/svelte).", "mimetype": "text/plain", "start_char_idx": 3412, "end_char_idx": 7680, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "47df42bf-63f7-432e-b008-b125aa668eef": {"__data__": {"id_": "47df42bf-63f7-432e-b008-b125aa668eef", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cec080e9-c8d0-431f-989d-23ec9ea0ae1d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "609d24f62f3e40925354507e320a71ca9b3f735fb49c54dada32df9ef3ad6d1e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32e5b683-29ff-4c58-8b18-4558097b8c5a", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "0c3744ccfd1b63a3704411c63ab2d60653c874e14fadeeb29f8dff6fdb890036", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[Routify](https://routify.dev) is another filesystem-based router, similar to SvelteKit's router. Version 3 supports Svelte's native SSR.\n\nYou can see a [community-maintained list of routers on sveltesociety.dev](https://sveltesociety.dev/packages?category=routers).\n\n## How do I write a mobile app with Svelte?\n\nWhile most mobile apps are written without using JavaScript, if you'd like to leverage your existing Svelte components and knowledge of Svelte when building mobile apps, you can turn a [SvelteKit SPA](https://kit.svelte.dev/docs/single-page-apps) into a mobile app with [Tauri](https://v2.tauri.app/start/frontend/sveltekit/) or [Capacitor](https://capacitorjs.com/solution/svelte). Mobile features like the camera, geolocation, and push notifications are available via plugins for both platforms.\n\nSvelte Native was an option available for Svelte 4, but note that Svelte 5 does not currently support it. Svelte Native lets you write NativeScript apps using Svelte components that contain [NativeScript UI components](https://docs.nativescript.org/ui/) rather than DOM elements, which may be familiar for users coming from React Native.\n\n## Can I tell Svelte not to remove my unused styles?\n\nNo. Svelte removes the styles from the component and warns you about them in order to prevent issues that would otherwise arise.\n\nSvelte's component style scoping works by generating a class unique to the given component, adding it to the relevant elements in the component that are under Svelte's control, and then adding it to each of the selectors in that component's styles. When the compiler can't see what elements a style selector applies to, there would be two bad options for keeping it:\n\n- If it keeps the selector and adds the scoping class to it, the selector will likely not match the expected elements in the component, and they definitely won't if they were created by a child component or `{@html ...}`.\n- If it keeps the selector without adding the scoping class to it, the given style will become a global style, affecting your entire page.\n\nIf you need to style something that Svelte can't identify at compile time, you will need to explicitly opt into global styles by using `:global(...)`. But also keep in mind that you can wrap `:global(...)` around only part of a selector. `.foo :global(.bar) { ... }` will style any `.bar` elements that appear within the component's `.foo` elements. As long as there's some parent element in the current component to start from, partially global selectors like this will almost always be able to get you what you want.\n\n## Is Svelte v2 still available?\n\nNew features aren't being added to it, and bugs will probably only be fixed if they are extremely nasty or present some sort of security vulnerability.\n\nThe documentation is still available [here](https://v2.svelte.dev/guide).\n\n## How do I do hot module reloading?\n\nWe recommend using [SvelteKit](/docs/kit), which supports HMR out of the box and is built on top of [Vite](https://vitejs.dev/) and [svelte-hmr](https://github.com/sveltejs/svelte-hmr). There are also community plugins for [rollup](https://github.com/rixo/rollup-plugin-svelte-hot) and [webpack](https://github.com/sveltejs/svelte-loader).", "mimetype": "text/plain", "start_char_idx": 6985, "end_char_idx": 10209, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cd661251-9ee7-4a68-88dc-869d86da1bdd": {"__data__": {"id_": "cd661251-9ee7-4a68-88dc-869d86da1bdd", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/index.md", "file_name": "index.md", "file_size": 20, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e40ed3c-0e3f-420c-b119-ff19a9e72377", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/index.md", "file_name": "index.md", "file_size": 20, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "7340f362d17246fc6e26e0e6381b9a3572dea5799ec27136bd399dfd9ad5ac89", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Misc\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 19, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d192b257-7629-451c-b9df-8923c88e1d2b": {"__data__": {"id_": "d192b257-7629-451c-b9df-8923c88e1d2b", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/xx-reactivity-indepth.md", "file_name": "xx-reactivity-indepth.md", "file_size": 179, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d14c07be-ee62-4563-b788-17ba9ca74f16", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/xx-reactivity-indepth.md", "file_name": "xx-reactivity-indepth.md", "file_size": 179, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "7e197a63fb9e899827ccafe96b4f70da8af29a49981b07b267ae390739f924b0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Reactivity in depth\n---\n\n- how to think about Runes (\"just JavaScript\" with added reactivity, what this means for keeping reactivity alive across boundaries)\n- signals", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 178, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "34663da8-a83e-4308-88d0-2424f92ac408": {"__data__": {"id_": "34663da8-a83e-4308-88d0-2424f92ac408", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/20-svelte.md", "file_name": "20-svelte.md", "file_size": 40, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05385150-776b-41cc-a760-dfd3b7cc310a", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/20-svelte.md", "file_name": "20-svelte.md", "file_size": 40, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8f444e3b3a91d79b0dcd31326ed774e46fd69a054a2d8eea77f68f453dbe06bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte\n---\n\n> MODULE: svelte", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 39, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "751fe680-414f-4359-a8a5-41bd1fd2b263": {"__data__": {"id_": "751fe680-414f-4359-a8a5-41bd1fd2b263", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-action.md", "file_name": "21-svelte-action.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aedef508-28e9-438e-aab5-99be37412391", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-action.md", "file_name": "21-svelte-action.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "48ec553844513a05590515df110ef1767922e393ffcfda35b89e19a62ae141d8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/action\n---\n\n> MODULE: svelte/action", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 53, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f764df7-ac71-4cf7-91e4-470b6bf3a09e": {"__data__": {"id_": "0f764df7-ac71-4cf7-91e4-470b6bf3a09e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-animate.md", "file_name": "21-svelte-animate.md", "file_size": 56, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d53d26f-547d-42c8-b117-299aa9143461", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-animate.md", "file_name": "21-svelte-animate.md", "file_size": 56, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "cebeb3d4890627c9f183ac5a3cf49461051b8505130fb823c1c2561fa6fa6c1c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/animate\n---\n\n> MODULE: svelte/animate", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 55, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84ce6ea1-7dad-49cc-94f2-3f6800416163": {"__data__": {"id_": "84ce6ea1-7dad-49cc-94f2-3f6800416163", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-compiler.md", "file_name": "21-svelte-compiler.md", "file_size": 58, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "708a68d5-984e-4496-8dd0-da43c444d52c", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-compiler.md", "file_name": "21-svelte-compiler.md", "file_size": 58, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "d743cce0d34ffb1cdea93667fe7be6aba06c0c4b297e44a11029ba080c0ae6eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/compiler\n---\n\n> MODULE: svelte/compiler", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 57, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8e644406-189b-4f4f-9a47-7ab1b064095e": {"__data__": {"id_": "8e644406-189b-4f4f-9a47-7ab1b064095e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-easing.md", "file_name": "21-svelte-easing.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a8d09c3-d561-43b9-b6ab-34c2160444d9", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-easing.md", "file_name": "21-svelte-easing.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "4b7011344ec262aa544190ba48b81a66f773f14768a9093817b1860da53615e8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/easing\n---\n\n> MODULE: svelte/easing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 53, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "66a12722-8bfc-4a7d-b824-a0c23537a9ef": {"__data__": {"id_": "66a12722-8bfc-4a7d-b824-a0c23537a9ef", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-events.md", "file_name": "21-svelte-events.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc2be6b3-8f35-41c8-8b35-befeae7756cb", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-events.md", "file_name": "21-svelte-events.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "42ebe779ddf735bafe0d2f4f1b084d681cc1ddedfc92e0629e121643a6bc82ff", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/events\n---\n\n> MODULE: svelte/events", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 53, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb5a13dd-d377-4665-bbe7-e63fd9b9dd9e": {"__data__": {"id_": "fb5a13dd-d377-4665-bbe7-e63fd9b9dd9e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-legacy.md", "file_name": "21-svelte-legacy.md", "file_size": 273, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2993c21-3fed-4de7-afbd-9be511e534f3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-legacy.md", "file_name": "21-svelte-legacy.md", "file_size": 273, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "044b084cc5e08a75d583fb6678f91e2395e778098a2bbda23d3bbb15d5b0f76f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/legacy\n---\n\nThis module provides various functions for use during the migration, since some features can't be replaced one to one with new features. All imports are marked as deprecated and should be migrated away from over time.\n\n> MODULE: svelte/legacy", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 272, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "004ce44d-48f6-415b-8471-dca9012ad218": {"__data__": {"id_": "004ce44d-48f6-415b-8471-dca9012ad218", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-motion.md", "file_name": "21-svelte-motion.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6a6142c5-8131-4024-96d3-9863b6c08bec", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-motion.md", "file_name": "21-svelte-motion.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "7b8654bcde70d17289d3fbefe53a215ed52ce6fcb069049b4065224dfab10e3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/motion\n---\n\n> MODULE: svelte/motion", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 53, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f6dc7f4-9eeb-4876-a3e3-3c8cd1a63e1b": {"__data__": {"id_": "2f6dc7f4-9eeb-4876-a3e3-3c8cd1a63e1b", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-reactivity-window.md", "file_name": "21-svelte-reactivity-window.md", "file_size": 551, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7558e218-47b8-4b1c-9be0-063616ac6348", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-reactivity-window.md", "file_name": "21-svelte-reactivity-window.md", "file_size": 551, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "6fe19822317683036efd5dff93455d1b3aed9c5714f0bc4eaad5a08c3702e2a1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/reactivity/window\n---\n\nThis module exports reactive versions of various `window` values, each of which has a reactive `current` property that you can reference in reactive contexts (templates, [deriveds]($derived) and [effects]($effect)) without using [`<svelte:window>`](svelte-window) bindings or manually creating your own event listeners.\n\n```svelte\n<script>\n\timport { innerWidth, innerHeight } from 'svelte/reactivity/window';\n</script>\n\n<p>{innerWidth.current}x{innerHeight.current}</p>\n```\n\n> MODULE: svelte/reactivity/window", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 550, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d006e5a2-bf4e-494f-9ffc-7275ef0dabbf": {"__data__": {"id_": "d006e5a2-bf4e-494f-9ffc-7275ef0dabbf", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-reactivity.md", "file_name": "21-svelte-reactivity.md", "file_size": 619, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "545bba30-3ed3-40f2-ac36-d837fceee1ca", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-reactivity.md", "file_name": "21-svelte-reactivity.md", "file_size": 619, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c56c49de49ee63afb9036999d65471497c6801ca0dd704e6c25985228766497b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/reactivity\n---\n\nSvelte provides reactive versions of various built-ins like `SvelteMap`, `SvelteSet` and `SvelteURL`. These can be imported from `svelte/reactivity` and used just like their native counterparts.\n\n```svelte\n<script>\n\timport { SvelteURL } from 'svelte/reactivity';\n\n\tconst url = new SvelteURL('https://example.com/path');\n</script>\n\n<!-- changes to these... -->\n<input bind:value={url.protocol} />\n<input bind:value={url.hostname} />\n<input bind:value={url.pathname} />\n\n<hr />\n\n<!-- will update `href` and vice versa -->\n<input bind:value={url.href} />\n```\n\n> MODULE: svelte/reactivity", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 618, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a29c0eb-034d-458d-acc3-cf4b93ce6ffc": {"__data__": {"id_": "1a29c0eb-034d-458d-acc3-cf4b93ce6ffc", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-server.md", "file_name": "21-svelte-server.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ba3d028-7243-44c9-8ef1-bc76a925dbc6", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-server.md", "file_name": "21-svelte-server.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e453f3283078ff69bc5e686fd1d50cabf5aab2008faa9323b992ab2cf3f7212c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/server\n---\n\n> MODULE: svelte/server", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 53, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "018c3522-e01b-42c5-9dd3-218365b34b45": {"__data__": {"id_": "018c3522-e01b-42c5-9dd3-218365b34b45", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-store.md", "file_name": "21-svelte-store.md", "file_size": 52, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6741340-c853-4b72-a5c4-615aa44aeab9", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-store.md", "file_name": "21-svelte-store.md", "file_size": 52, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b99f9c5281df22ec5b266b08ec354c4ca6a99660ef8770cf46b26d571701549c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/store\n---\n\n> MODULE: svelte/store", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 51, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a0b21ae6-3417-4087-9eb4-69857c3ffb99": {"__data__": {"id_": "a0b21ae6-3417-4087-9eb4-69857c3ffb99", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-transition.md", "file_name": "21-svelte-transition.md", "file_size": 62, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48a6b96b-effb-488d-a8c5-aa815f49bf05", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-transition.md", "file_name": "21-svelte-transition.md", "file_size": 62, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "ceb0a69c044fff6a7c00f736473f34b3ec7660bf245ae2606566e677df8cbde6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: svelte/transition\n---\n\n> MODULE: svelte/transition", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 61, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "929e9223-f8b6-4e7d-a90a-39809cbcb8c0": {"__data__": {"id_": "929e9223-f8b6-4e7d-a90a-39809cbcb8c0", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-compiler-errors.md", "file_name": "30-compiler-errors.md", "file_size": 72, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0968c81a-248f-4fb2-80b2-81c390661417", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-compiler-errors.md", "file_name": "30-compiler-errors.md", "file_size": 72, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "c3a515ba1a32fd69e4098ca303ad5f8984a41e1ebce1b96dec8c2d7f61802108", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: 'Compiler errors'\n---\n\n@include .generated/compile-errors.md", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 71, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "361829a8-9266-42ea-b01a-984eea873335": {"__data__": {"id_": "361829a8-9266-42ea-b01a-984eea873335", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-compiler-warnings.md", "file_name": "30-compiler-warnings.md", "file_size": 738, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1308f019-4225-42b3-94e9-fe8befbc515e", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-compiler-warnings.md", "file_name": "30-compiler-warnings.md", "file_size": 738, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "26bf9a35f0ebaab1fac876c03c362b603ccbf29383cd1c3ea2b27fc846fad7a4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: 'Compiler warnings'\n---\n\nSvelte warns you at compile time if it catches potential mistakes, such as writing inaccessible markup.\n\nSome warnings may be incorrect in your concrete use case. You can disable such false positives by placing a `<!-- svelte-ignore <code> -->` comment above the line that causes the warning. Example:\n\n```svelte\n<!-- svelte-ignore a11y_autofocus -->\n<input autofocus />\n```\n\nYou can list multiple rules in a single comment (separated by commas), and add an explanatory note (in parentheses) alongside them:\n\n```svelte\n<!-- svelte-ignore a11y_click_events_have_key_events, a11y_no_static_element_interactions (because of reasons) -->\n<div onclick>...</div>\n```\n\n@include .generated/compile-warnings.md", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 737, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f65a7b1-8fad-40b3-a99b-42652e0e1c01": {"__data__": {"id_": "7f65a7b1-8fad-40b3-a99b-42652e0e1c01", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-runtime-errors.md", "file_name": "30-runtime-errors.md", "file_size": 200, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d83aec58-70fe-484f-9049-3aa49a98d006", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-runtime-errors.md", "file_name": "30-runtime-errors.md", "file_size": 200, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "85642bc537b8fec6015b114793ce7b44416cd68ba571d36fa36c46b4bb5d4ba6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: 'Runtime errors'\n---\n\n## Client errors\n\n@include .generated/client-errors.md\n\n## Server errors\n\n@include .generated/server-errors.md\n\n## Shared errors\n\n@include .generated/shared-errors.md", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 199, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "986d4480-1a8f-4340-8ae9-a5145a94393e": {"__data__": {"id_": "986d4480-1a8f-4340-8ae9-a5145a94393e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-runtime-warnings.md", "file_name": "30-runtime-warnings.md", "file_size": 154, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ff72e13-0574-403d-b81e-57c53a6bc8d9", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-runtime-warnings.md", "file_name": "30-runtime-warnings.md", "file_size": 154, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "7eff528fea96e4955fce994757a928845a1d60537f48069f698a1182a4b2a1b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: 'Runtime warnings'\n---\n\n## Client warnings\n\n@include .generated/client-warnings.md\n\n## Shared warnings\n\n@include .generated/shared-warnings.md", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 153, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "505fb363-ff87-4d6d-94bf-8f37176971d0": {"__data__": {"id_": "505fb363-ff87-4d6d-94bf-8f37176971d0", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/index.md", "file_name": "index.md", "file_size": 25, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8d24fdb-b9f0-43fa-96da-c46220caa262", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/index.md", "file_name": "index.md", "file_size": 25, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "706de19903219e3169da8fcee775ac75703e8aad90a27facd31d4b6af3f88d11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Reference\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 24, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6c4ac433-49f0-4ffd-b82d-e2ae73782dac": {"__data__": {"id_": "6c4ac433-49f0-4ffd-b82d-e2ae73782dac", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/00-legacy-overview.md", "file_name": "00-legacy-overview.md", "file_size": 975, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22747c5f-473f-43ea-ac41-798562f8c1f6", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/00-legacy-overview.md", "file_name": "00-legacy-overview.md", "file_size": 975, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "78f656daace0190901c22ee35c862de5bdf69d86a79bd8a3d02014a012ee00a4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Overview\n---\n\nSvelte 5 introduced some significant changes to Svelte's API, including [runes](what-are-runes), [snippets](snippet) and event attributes. As a result, some Svelte 3/4 features are deprecated (though supported for now, unless otherwise specified) and will eventually be removed. We recommend that you incrementally [migrate your existing code](v5-migration-guide).\n\nThe following pages document these features for\n\n- people still using Svelte 3/4\n- people using Svelte 5, but with components that haven't yet been migrated\n\nSince Svelte 3/4 syntax still works in Svelte 5, we will distinguish between _legacy mode_ and _runes mode_. Once a component is in runes mode (which you can opt into by using runes, or by explicitly setting the `runes: true` compiler option), legacy mode features are no longer available.\n\nIf you're exclusively interested in the Svelte 3/4 syntax, you can browse its documentation at [v4.svelte.dev](https://v4.svelte.dev).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 974, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "71b70b28-f0f0-4a20-889b-358a60e4b72b": {"__data__": {"id_": "71b70b28-f0f0-4a20-889b-358a60e4b72b", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/01-legacy-let.md", "file_name": "01-legacy-let.md", "file_size": 963, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cef774c6-9dbb-401c-b1dc-70e11384c6ee", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/01-legacy-let.md", "file_name": "01-legacy-let.md", "file_size": 963, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "606483e3f0e09ecc3caee04e253ece68c20a440358df95f24a6062d34069542a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Reactive let/var declarations\n---\n\nIn runes mode, reactive state is explicitly declared with the [`$state` rune]($state).\n\nIn legacy mode, variables declared at the top level of a component are automatically considered _reactive_. Reassigning or mutating these variables (`count += 1` or `object.x = y`) will cause the UI to update.\n\n```svelte\n<script>\n\tlet count = 0;\n</script>\n\n<button on:click={() => count += 1}>\n\tclicks: {count}\n</button>\n```\n\nBecause Svelte's legacy mode reactivity is based on _assignments_, using array methods like `.push()` and `.splice()` won't automatically trigger updates. A subsequent assignment is required to 'tell' the compiler to update the UI:\n\n```svelte\n<script>\n\tlet numbers = [1, 2, 3, 4];\n\n\tfunction addNumber() {\n\t\t// this method call does not trigger an update\n\t\tnumbers.push(numbers.length + 1);\n\n\t\t// this assignment will update anything\n\t\t// that depends on `numbers`\n\t\tnumbers = numbers;\n\t}\n</script>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 962, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1dbf06d6-2242-47ed-9c20-5196541d4836": {"__data__": {"id_": "1dbf06d6-2242-47ed-9c20-5196541d4836", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/02-legacy-reactive-assignments.md", "file_name": "02-legacy-reactive-assignments.md", "file_size": 2501, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb688433-7af5-49d0-9d1c-6640f858276d", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/02-legacy-reactive-assignments.md", "file_name": "02-legacy-reactive-assignments.md", "file_size": 2501, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "5f8d6d1509ffb56bc727f6487ed2bf161be3c3865e0a0a9bae57aacb0d8814cb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Reactive $: statements\n---\n\nIn runes mode, reactions to state updates are handled with the [`$derived`]($derived) and [`$effect`]($effect) runes.\n\nIn legacy mode, any top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with a `$:` [label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label). These statements run after other code in the `<script>` and before the component markup is rendered, then whenever the values that they depend on change.\n\n```svelte\n<script>\n\tlet a = 1;\n\tlet b = 2;\n\n\t// this is a 'reactive statement', and it will re-run\n\t// when `a`, `b` or `sum` change\n\t$: console.log(`${a} + ${b} = ${sum}`);\n\n\t// this is a 'reactive assignment' \u2014 `sum` will be\n\t// recalculated when `a` or `b` change. It is\n\t// not necessary to declare `sum` separately\n\t$: sum = a + b;\n</script>\n```\n\nStatements are ordered _topologically_ by their dependencies and their assignments: since the `console.log` statement depends on `sum`, `sum` is calculated first even though it appears later in the source.\n\nMultiple statements can be combined by putting them in a block:\n\n```js\n// @noErrors\n$: {\n\t// recalculate `total` when `items` changes\n\ttotal = 0;\n\n\tfor (const item of items) {\n\t\ttotal += item.value;\n\t}\n}\n```\n\nThe left-hand side of a reactive assignments can be an identifier, or it can be a destructuring assignment:\n\n```js\n// @noErrors\n$: ({ larry, moe, curly } = stooges);\n```\n\n## Understanding dependencies\n\nThe dependencies of a `$:` statement are determined at compile time \u2014 they are whichever variables are referenced (but not assigned to) inside the statement.\n\nIn other words, a statement like this will _not_ re-run when `count` changes, because the compiler cannot 'see' the dependency:\n\n```js\n// @noErrors\nlet count = 0;\nlet double = () => count * 2;\n\n$: doubled = double();\n```\n\nSimilarly, topological ordering will fail if dependencies are referenced indirectly: `z` will never update, because `y` is not considered 'dirty' when the update occurs. Moving `$: z = y` below `$: setY(x)` will fix it:\n\n```svelte\n<script>\n\tlet x = 0;\n\tlet y = 0;\n\n\t$: z = y;\n\t$: setY(x);\n\n\tfunction setY(value) {\n\t\ty = value;\n\t}\n</script>\n```\n\n## Browser-only code\n\nReactive statements run during server-side rendering as well as in the browser. This means that any code that should only run in the browser must be wrapped in an `if` block:\n\n```js\n// @noErrors\n$: if (browser) {\n\tdocument.title = title;\n}\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33f5f24f-6565-403f-a297-e8a94fb2e7f6": {"__data__": {"id_": "33f5f24f-6565-403f-a297-e8a94fb2e7f6", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/03-legacy-export-let.md", "file_name": "03-legacy-export-let.md", "file_size": 1814, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9b7b290-56c6-4e43-ba15-79cf250330e9", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/03-legacy-export-let.md", "file_name": "03-legacy-export-let.md", "file_size": 1814, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b0a30fde214b969e9d8ba8ee86db0b9deece7a8a47fe4dbaf19afbf1dcaf18ce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: export let\n---\n\nIn runes mode, [component props](basic-markup#Component-props) are declared with the [`$props`]($props) rune, allowing parent components to pass in data.\n\nIn legacy mode, props are marked with the `export` keyword, and can have a default value:\n\n```svelte\n<script>\n\texport let foo;\n\texport let bar = 'default value';\n\n\t// Values that are passed in as props\n\t// are immediately available\n\tconsole.log({ foo });\n</script>\n```\n\nThe default value is used if it would otherwise be `undefined` when the component is created.\n\n> [!NOTE] Unlike in runes mode, if the parent component changes a prop from a defined value to `undefined`, it does not revert to the initial value.\n\nProps without default values are considered _required_, and Svelte will print a warning during development if no value is provided, which you can squelch by specifying `undefined` as the default value:\n\n```js\nexport let foo +++= undefined;+++\n```\n\n## Component exports\n\nAn exported `const`, `class` or `function` declaration is _not_ considered a prop \u2014 instead, it becomes part of the component's API:\n\n```svelte\n<!--- file: Greeter.svelte--->\n<script>\n\texport function greet(name) {\n\t\talert(`hello ${name}!`);\n\t}\n</script>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Greeter from './Greeter.svelte';\n\n\tlet greeter;\n</script>\n\n<Greeter bind:this={greeter} />\n\n<button on:click={() => greeter.greet('world')}>\n\tgreet\n</button>\n```\n\n## Renaming props\n\nThe `export` keyword can appear separately from the declaration. This is useful for renaming props, for example in the case of a reserved word:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {string} */\n\tlet className;\n\n\t// creates a `class` property, even\n\t// though it is a reserved word\n\texport { className as class };\n</script>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1811, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d494ef34-867e-44a8-9eed-9e46a386c43a": {"__data__": {"id_": "d494ef34-867e-44a8-9eed-9e46a386c43a", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/04-legacy-$$props-and-$$restProps.md", "file_name": "04-legacy-$$props-and-$$restProps.md", "file_size": 928, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "207f3aa4-27ec-4b55-b464-7ed2ba286e54", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/04-legacy-$$props-and-$$restProps.md", "file_name": "04-legacy-$$props-and-$$restProps.md", "file_size": 928, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "8649bb348e0f591add745487d3ead37fadb854312d9754a23441d8aacfa52ea3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $$props and $$restProps\n---\n\nIn runes mode, getting an object containing all the props that were passed in is easy, using the [`$props`]($props) rune.\n\nIn legacy mode, we use `$$props` and `$$restProps`:\n\n- `$$props` contains all the props that were passed in, including ones that are not individually declared with the `export` keyword\n- `$$restProps` contains all the props that were passed in _except_ the ones that were individually declared\n\nFor example, a `<Button>` component might need to pass along all its props to its own `<button>` element, except the `variant` prop:\n\n```svelte\n<script>\n\texport let variant;\n</script>\n\n<button {...$$restProps} class=\"variant-{variant} {$$props.class ?? ''}\">\n\tclick me\n</button>\n\n<style>\n\t.variant-danger {\n\t\tbackground: red;\n\t}\n</style>\n```\n\nIn Svelte 3/4 using `$$props` and `$$restProps` creates a modest performance penalty, so they should only be used when needed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 927, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f16f1da-16eb-4941-9aae-76c6d831ba07": {"__data__": {"id_": "3f16f1da-16eb-4941-9aae-76c6d831ba07", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/10-legacy-on.md", "file_name": "10-legacy-on.md", "file_size": 3673, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6861b74-8d75-4938-b604-85765b05dadc", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/10-legacy-on.md", "file_name": "10-legacy-on.md", "file_size": 3673, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "1d5ee42b13112960a9cf764052a149cd4b36af761cbd559a67f1dc2e28299123", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: on:\n---\n\nIn runes mode, event handlers are just like any other attribute or prop.\n\nIn legacy mode, we use the `on:` directive:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tlet count = 0;\n\n\t/** @param {MouseEvent} event */\n\tfunction handleClick(event) {\n\t\tcount += 1;\n\t}\n</script>\n\n<button on:click={handleClick}>\n\tcount: {count}\n</button>\n```\n\nHandlers can be declared inline with no performance penalty:\n\n```svelte\n<button on:click={() => (count += 1)}>\n\tcount: {count}\n</button>\n```\n\nAdd _modifiers_ to element event handlers with the `|` character.\n\n```svelte\n<form on:submit|preventDefault={handleSubmit}>\n\t<!-- the `submit` event's default is prevented,\n\t     so the page won't reload -->\n</form>\n```\n\nThe following modifiers are available:\n\n- `preventDefault` \u2014 calls `event.preventDefault()` before running the handler\n- `stopPropagation` \u2014 calls `event.stopPropagation()`, preventing the event reaching the next element\n- `stopImmediatePropagation` - calls `event.stopImmediatePropagation()`, preventing other listeners of the same event from being fired.\n- `passive` \u2014 improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)\n- `nonpassive` \u2014 explicitly set `passive: false`\n- `capture` \u2014 fires the handler during the _capture_ phase instead of the _bubbling_ phase\n- `once` \u2014 remove the handler after the first time it runs\n- `self` \u2014 only trigger handler if `event.target` is the element itself\n- `trusted` \u2014 only trigger handler if `event.isTrusted` is `true`. I.e. if the event is triggered by a user action.\n\nModifiers can be chained together, e.g. `on:click|once|capture={...}`.\n\nIf the `on:` directive is used without a value, the component will _forward_ the event, meaning that a consumer of the component can listen for it.\n\n```svelte\n<button on:click>\n\tThe component itself will emit the click event\n</button>\n```\n\nIt's possible to have multiple event listeners for the same event:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tlet count = 0;\n\n\tfunction increment() {\n\t\tcount += 1;\n\t}\n\n\t/** @param {MouseEvent} event */\n\tfunction log(event) {\n\t\tconsole.log(event);\n\t}\n</script>\n\n<button on:click={increment} on:click={log}>\n\tclicks: {count}\n</button>\n```\n\n## Component events\n\nComponents can dispatch events by creating a _dispatcher_ when they are initialised:\n\n```svelte\n<!--- file: Stepper.svelte -->\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\tconst dispatch = createEventDispatcher();\n</script>\n\n<button on:click={() => dispatch('decrement')}>decrement</button>\n<button on:click={() => dispatch('increment')}>increment</button>\n```\n\n`dispatch` creates a [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent). If a second argument is provided, it becomes the `detail` property of the event object.\n\nA consumer of this component can listen for the dispatched events:\n\n```svelte\n<script>\n\timport Stepper from './Stepper.svelte';\n\n\tlet n = 0;\n</script>\n\n<Stepper\n\ton:decrement={() => n -= 1}\n\ton:increment={() => n += 1}\n/>\n\n<p>n: {n}</p>\n```\n\nComponent events do not bubble \u2014 a parent component can only listen for events on its immediate children.\n\nOther than `once`, modifiers are not valid on component event handlers.\n\n> [!NOTE]\n> If you're planning an eventual migration to Svelte 5, use callback props instead. This will make upgrading easier as `createEventDispatcher` is deprecated:\n>\n> ```svelte\n> <!--- file: Stepper.svelte --->\n> <script>\n> \texport let decrement;\n> \texport let increment;\n> </script>\n>\n> <button on:click={decrement}>decrement</button>\n> <button on:click={increment}>increment</button>\n> ```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3654, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b5d4400f-1565-4d01-922f-68c062f3b99b": {"__data__": {"id_": "b5d4400f-1565-4d01-922f-68c062f3b99b", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/20-legacy-slots.md", "file_name": "20-legacy-slots.md", "file_size": 2778, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "30d25159-9824-47a6-a476-2bb144e2c4e1", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/20-legacy-slots.md", "file_name": "20-legacy-slots.md", "file_size": 2778, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "e3c5796e0374892f873e32f3beb93770963e3ce9d1733bfb6479c06cf0d520a6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <slot>\n---\n\nIn Svelte 5, content can be passed to components in the form of [snippets](snippet) and rendered using [render tags](@render).\n\nIn legacy mode, content inside component tags is considered _slotted content_, which can be rendered by the component using a `<slot>` element:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Modal from './Modal.svelte';\n</script>\n\n<Modal>This is some slotted content</Modal>\n```\n\n```svelte\n<!--- file: Modal.svelte --->\n<div class=\"modal\">\n\t<slot></slot>\n</div>\n```\n\n> [!NOTE] If you want to render a regular `<slot>` element, you can use `<svelte:element this={'slot'} />`.\n\n## Named slots\n\nA component can have _named_ slots in addition to the default slot. On the parent side, add a `slot=\"...\"` attribute to an element, component or [`<svelte:fragment>`](legacy-svelte-fragment) directly inside the component tags.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Modal from './Modal.svelte';\n\n\tlet open = true;\n</script>\n\n{#if open}\n\t<Modal>\n\t\tThis is some slotted content\n\n\t\t+++<div slot=\"buttons\">+++\n\t\t\t<button on:click={() => open = false}>\n\t\t\t\tclose\n\t\t\t</button>\n\t\t+++</div>+++\n\t</Modal>\n{/if}\n```\n\nOn the child side, add a corresponding `<slot name=\"...\">` element:\n\n```svelte\n<!--- file: Modal.svelte --->\n<div class=\"modal\">\n\t<slot></slot>\n\t<hr>\n\t+++<slot name=\"buttons\"></slot>+++\n</div>\n```\n\n## Fallback content\n\nIf no slotted content is provided, a component can define fallback content by putting it inside the `<slot>` element:\n\n```svelte\n<slot>\n\tThis will be rendered if no slotted content is provided\n</slot>\n```\n\n## Passing data to slotted content\n\nSlots can be rendered zero or more times and can pass values _back_ to the parent using props. The parent exposes the values to the slot template using the `let:` directive.\n\n```svelte\n<!--- file: FancyList.svelte --->\n<ul>\n\t{#each items as data}\n\t\t<li class=\"fancy\">\n\t\t\t<!-- 'item' here... -->\n\t\t\t<slot item={process(data)} />\n\t\t</li>\n\t{/each}\n</ul>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<!-- ...corresponds to 'item' here: -->\n<FancyList {items} let:item={processed}>\n\t<div>{processed.text}</div>\n</FancyList>\n```\n\nThe usual shorthand rules apply \u2014 `let:item` is equivalent to `let:item={item}`, and `<slot {item}>` is equivalent to `<slot item={item}>`.\n\nNamed slots can also expose values. The `let:` directive goes on the element with the `slot` attribute.\n\n```svelte\n<!--- file: FancyList.svelte --->\n<ul>\n\t{#each items as item}\n\t\t<li class=\"fancy\">\n\t\t\t<slot name=\"item\" item={process(data)} />\n\t\t</li>\n\t{/each}\n</ul>\n\n<slot name=\"footer\" />\n```\n\n```svelte\n<!--- file: App.svelte --->\n<FancyList {items}>\n\t<div slot=\"item\" let:item>{item.text}</div>\n\t<p slot=\"footer\">Copyright (c) 2019 Svelte Industries</p>\n</FancyList>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "399126e7-3009-4c3f-8483-ade3941ab380": {"__data__": {"id_": "399126e7-3009-4c3f-8483-ade3941ab380", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/21-legacy-$$slots.md", "file_name": "21-legacy-$$slots.md", "file_size": 744, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ad5005c6-81de-491b-8089-80871a922190", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/21-legacy-$$slots.md", "file_name": "21-legacy-$$slots.md", "file_size": 744, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "7c96de35731f8ce0e331111109e2a32901fef3a7afbba6efa79addacd1ae78cf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: $$slots\n---\n\nIn runes mode, we know which [snippets](snippet) were provided to a component, as they're just normal props.\n\nIn legacy mode, the way to know if content was provided for a given slot is with the `$$slots` object, whose keys are the names of the slots passed into the component by the parent.\n\n```svelte\n<!--- file: Card.svelte --->\n<div>\n\t<slot name=\"title\" />\n\t{#if $$slots.description}\n\t\t<!-- This <hr> and slot will render only if `slot=\"description\"` is provided. -->\n\t\t<hr />\n\t\t<slot name=\"description\" />\n\t{/if}\n</div>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<Card>\n\t<h1 slot=\"title\">Blog Post Title</h1>\n\t<!-- No slot named \"description\" was provided so the optional slot will not be rendered. -->\n</Card>\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 743, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "88f88d54-a619-4822-a9f2-26a904a003d7": {"__data__": {"id_": "88f88d54-a619-4822-a9f2-26a904a003d7", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/22-legacy-svelte-fragment.md", "file_name": "22-legacy-svelte-fragment.md", "file_size": 784, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17e7120b-3188-4f13-841f-7ec72f8998bd", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/22-legacy-svelte-fragment.md", "file_name": "22-legacy-svelte-fragment.md", "file_size": 784, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "705584bb3b12c768f4e4518cad7c14ba9cf604318d5cbc317bad94f0c1efe4be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:fragment>\n---\n\nThe `<svelte:fragment>` element allows you to place content in a [named slot](legacy-slots) without wrapping it in a container DOM element. This keeps the flow layout of your document intact.\n\n```svelte\n<!--- file: Widget.svelte --->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<Widget>\n\t<h1 slot=\"header\">Hello</h1>\n\t<svelte:fragment slot=\"footer\">\n\t\t<p>All rights reserved.</p>\n\t\t<p>Copyright (c) 2019 Svelte Industries</p>\n\t</svelte:fragment>\n</Widget>\n```\n\n> [!NOTE]\n> In Svelte 5+, this concept is obsolete, as snippets don't create a wrapping element", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 783, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "db4232db-ed30-45e9-a035-ec03a92f959e": {"__data__": {"id_": "db4232db-ed30-45e9-a035-ec03a92f959e", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/30-legacy-svelte-component.md", "file_name": "30-legacy-svelte-component.md", "file_size": 511, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f05c25d-af1d-48b6-acf4-e43e8faa6455", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/30-legacy-svelte-component.md", "file_name": "30-legacy-svelte-component.md", "file_size": 511, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "f1c70cbf2047afdf04dcb03dc0933cdf7a13e0491fd07f0fabcfb50d8cf2efa8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:component>\n---\n\nIn runes mode, `<MyComponent>` will re-render if the value of `MyComponent` changes. See the [Svelte 5 migration guide](/docs/svelte/v5-migration-guide#svelte:component-is-no-longer-necessary) for an example.\n\nIn legacy mode, it won't \u2014 we must use `<svelte:component>`, which destroys and recreates the component instance when the value of its `this` expression changes:\n\n```svelte\n<svelte:component this={MyComponent} />\n```\n\nIf `this` is falsy, no component is rendered.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 508, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7a7968a1-7cb4-4111-aef1-8fc69df0ce71": {"__data__": {"id_": "7a7968a1-7cb4-4111-aef1-8fc69df0ce71", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/31-legacy-svelte-self.md", "file_name": "31-legacy-svelte-self.md", "file_size": 755, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "513524c6-b3eb-4f9e-bab1-a867015a1e4b", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/31-legacy-svelte-self.md", "file_name": "31-legacy-svelte-self.md", "file_size": 755, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "0524e239b7ba42141a295869b926421f64dfc23c060bdc4c08e0a7fe3f352d15", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: <svelte:self>\n---\n\nThe `<svelte:self>` element allows a component to include itself, recursively.\n\nIt cannot appear at the top level of your markup; it must be inside an if or each block or passed to a component's slot to prevent an infinite loop.\n\n```svelte\n<script>\n\texport let count;\n</script>\n\n{#if count > 0}\n\t<p>counting down... {count}</p>\n\t<svelte:self count={count - 1} />\n{:else}\n\t<p>lift-off!</p>\n{/if}\n```\n\n> [!NOTE]\n> This concept is obsolete, as components can import themselves:\n> ```svelte\n> <!--- file: App.svelte --->\n> <script>\n> \timport Self from './App.svelte'\n> \texport let count;\n> </script>\n>\n> {#if count > 0}\n> \t<p>counting down... {count}</p>\n> \t<Self count={count - 1} />\n> {:else}\n> \t<p>lift-off!</p>\n> {/if}\n> ```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 754, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "db36f4a8-5d7a-47d2-96af-8a339152268b": {"__data__": {"id_": "db36f4a8-5d7a-47d2-96af-8a339152268b", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/40-legacy-component-api.md", "file_name": "40-legacy-component-api.md", "file_size": 6475, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "70343630-4b8c-437b-85f7-4757c6558ab3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/40-legacy-component-api.md", "file_name": "40-legacy-component-api.md", "file_size": 6475, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a52262117db9f7697ca839cda6abe4e44da693f843ba23f9fded567afebc6d01", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed044614-7a10-40a5-9155-c4b9c90f1e80", "node_type": "1", "metadata": {}, "hash": "1b65b32d973e65685d37c0827c90e593809480c7f4df225117c7e234c451a552", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Imperative component API\n---\n\nIn Svelte 3 and 4, the API for interacting with a component is different than in Svelte 5. Note that this page does _not_ apply to legacy mode components in a Svelte 5 application.\n\n## Creating a component\n\n```ts\n// @noErrors\nconst component = new Component(options);\n```\n\nA client-side component \u2014 that is, a component compiled with `generate: 'dom'` (or the `generate` option left unspecified) is a JavaScript class.\n\n```ts\n// @noErrors\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\t// assuming App.svelte contains something like\n\t\t// `export let answer`:\n\t\tanswer: 42\n\t}\n});\n```\n\nThe following initialisation options can be provided:\n\n| option    | default     | description                                                                                          |\n| --------- | ----------- | ---------------------------------------------------------------------------------------------------- |\n| `target`  | **none**    | An `HTMLElement` or `ShadowRoot` to render to. This option is required                               |\n| `anchor`  | `null`      | A child of `target` to render the component immediately before                                       |\n| `props`   | `{}`        | An object of properties to supply to the component                                                   |\n| `context` | `new Map()` | A `Map` of root-level context key-value pairs to supply to the component                             |\n| `hydrate` | `false`     | See below                                                                                            |\n| `intro`   | `false`     | If `true`, will play transitions on initial render, rather than waiting for subsequent state changes |\n\nExisting children of `target` are left where they are.\n\nThe `hydrate` option instructs Svelte to upgrade existing DOM (usually from server-side rendering) rather than creating new elements. It will only work if the component was compiled with the [`hydratable: true` option](/docs/svelte-compiler#compile). Hydration of `<head>` elements only works properly if the server-side rendering code was also compiled with `hydratable: true`, which adds a marker to each element in the `<head>` so that the component knows which elements it's responsible for removing during hydration.\n\nWhereas children of `target` are normally left alone, `hydrate: true` will cause any children to be removed. For that reason, the `anchor` option cannot be used alongside `hydrate: true`.\n\nThe existing DOM doesn't need to match the component \u2014 Svelte will 'repair' the DOM as it goes.\n\n```ts\n/// file: index.js\n// @noErrors\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.querySelector('#server-rendered-html'),\n\thydrate: true\n});\n```\n\n> [!NOTE]\n> In Svelte 5+, use [`mount`](svelte#mount) instead\n\n## `$set`\n\n```ts\n// @noErrors\ncomponent.$set(props);\n```\n\nProgrammatically sets props on an instance. `component.$set({ x: 1 })` is equivalent to `x = 1` inside the component's `<script>` block.\n\nCalling this method schedules an update for the next microtask \u2014 the DOM is _not_ updated synchronously.\n\n```ts\n// @noErrors\ncomponent.$set({ answer: 42 });\n```\n\n> [!NOTE]\n> In Svelte 5+, use `$state` instead to create a component props and update that\n>\n> ```js\n> // @noErrors\n> let props = $state({ answer: 42 });\n> const component = mount(Component, { props });\n> // ...\n> props.answer = 24;\n> ```\n\n## `$on`\n\n```ts\n// @noErrors\ncomponent.$on(ev, callback);\n```\n\nCauses the `callback` function to be called whenever the component dispatches an `event`.\n\nA function is returned that will remove the event listener when called.\n\n```ts\n// @noErrors\nconst off = component.$on('selected', (event) => {\n\tconsole.log(event.detail.selection);\n});\n\noff();\n```\n\n> [!NOTE]\n> In Svelte 5+, pass callback props instead\n\n## `$destroy`\n\n```js\n// @noErrors\ncomponent.$destroy();\n```\n\nRemoves a component from the DOM and triggers any `onDestroy` handlers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4013, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed044614-7a10-40a5-9155-c4b9c90f1e80": {"__data__": {"id_": "ed044614-7a10-40a5-9155-c4b9c90f1e80", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/40-legacy-component-api.md", "file_name": "40-legacy-component-api.md", "file_size": 6475, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "70343630-4b8c-437b-85f7-4757c6558ab3", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/40-legacy-component-api.md", "file_name": "40-legacy-component-api.md", "file_size": 6475, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "a52262117db9f7697ca839cda6abe4e44da693f843ba23f9fded567afebc6d01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db36f4a8-5d7a-47d2-96af-8a339152268b", "node_type": "1", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/40-legacy-component-api.md", "file_name": "40-legacy-component-api.md", "file_size": 6475, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "3638dad337964c215183aa424c76141ad90f721462dad9fae7f53c35f8050ccb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "A function is returned that will remove the event listener when called.\n\n```ts\n// @noErrors\nconst off = component.$on('selected', (event) => {\n\tconsole.log(event.detail.selection);\n});\n\noff();\n```\n\n> [!NOTE]\n> In Svelte 5+, pass callback props instead\n\n## `$destroy`\n\n```js\n// @noErrors\ncomponent.$destroy();\n```\n\nRemoves a component from the DOM and triggers any `onDestroy` handlers.\n\n> [!NOTE]\n> In Svelte 5+, use [`unmount`](svelte#unmount) instead\n\n## Component props\n\n```js\n// @noErrors\ncomponent.prop;\n```\n\n```js\n// @noErrors\ncomponent.prop = value;\n```\n\nIf a component is compiled with `accessors: true`, each instance will have getters and setters corresponding to each of the component's props. Setting a value will cause a _synchronous_ update, rather than the default async update caused by `component.$set(...)`.\n\nBy default, `accessors` is `false`, unless you're compiling as a custom element.\n\n```js\n// @noErrors\nconsole.log(component.count);\ncomponent.count += 1;\n```\n\n> [!NOTE]\n> In Svelte 5+, this concept is obsolete. If you want to make properties accessible from the outside, `export` them\n\n## Server-side component API\n\n```js\n// @noErrors\nconst result = Component.render(...)\n```\n\nUnlike client-side components, server-side components don't have a lifespan after you render them \u2014 their whole job is to create some HTML and CSS. For that reason, the API is somewhat different.\n\nA server-side component exposes a `render` method that can be called with optional props. It returns an object with `head`, `html`, and `css` properties, where `head` contains the contents of any `<svelte:head>` elements encountered.\n\nYou can import a Svelte component directly into Node using `svelte/register`.\n\n```js\n// @noErrors\nrequire('svelte/register');\n\nconst App = require('./App.svelte').default;\n\nconst { head, html, css } = App.render({\n\tanswer: 42\n});\n```\n\nThe `.render()` method accepts the following parameters:\n\n| parameter | default | description                                        |\n| --------- | ------- | -------------------------------------------------- |\n| `props`   | `{}`    | An object of properties to supply to the component |\n| `options` | `{}`    | An object of options                               |\n\nThe `options` object takes in the following options:\n\n| option    | default     | description                                                              |\n| --------- | ----------- | ------------------------------------------------------------------------ |\n| `context` | `new Map()` | A `Map` of root-level context key-value pairs to supply to the component |\n\n```js\n// @noErrors\nconst { head, html, css } = App.render(\n\t// props\n\t{ answer: 42 },\n\t// options\n\t{\n\t\tcontext: new Map([['context-key', 'context-value']])\n\t}\n);\n```\n\n> [!NOTE]\n> In Svelte 5+, use [`render`](svelte-server#render) instead", "mimetype": "text/plain", "start_char_idx": 3628, "end_char_idx": 6466, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8421860d-d9a1-4c9d-ac33-71d8ab0e01ac": {"__data__": {"id_": "8421860d-d9a1-4c9d-ac33-71d8ab0e01ac", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/index.md", "file_name": "index.md", "file_size": 27, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8d6220e4-1b04-43ea-981c-9f9d2c15cf4e", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/index.md", "file_name": "index.md", "file_size": 27, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "48e95d91c23f6cdcfe19c923702bc56df46ab8c177b41ceb1d98ef2f78a8617b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Legacy APIs\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 26, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "516ec679-13fd-4a3d-a85e-e92fa0b80136": {"__data__": {"id_": "516ec679-13fd-4a3d-a85e-e92fa0b80136", "embedding": null, "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/index.md", "file_name": "index.md", "file_size": 22, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90347410-a2c1-450b-aeef-77213ccc017e", "node_type": "4", "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/index.md", "file_name": "index.md", "file_size": 22, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}, "hash": "b56aaab595a4b0c8cdf96e6ad3ffc8271a9e31379412ebf67e3526d2488bb979", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "---\ntitle: Svelte\n---", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 21, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ffd0d2c2-bac6-43e0-bdf7-b566b5c723bf": {"__data__": {"id_": "ffd0d2c2-bac6-43e0-bdf7-b566b5c723bf", "embedding": null, "metadata": {"page_label": "1", "file_name": "\u82b1\u8bed\u79d8\u5883\u7684\u6545\u4e8b.pdf", "file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/\u82b1\u8bed\u79d8\u5883\u7684\u6545\u4e8b.pdf", "file_type": "application/pdf", "file_size": 291244, "creation_date": "2025-03-06", "last_modified_date": "2025-02-04"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "241cb01c-8235-45f6-b1b6-d04048f7e7e9", "node_type": "4", "metadata": {"page_label": "1", "file_name": "\u82b1\u8bed\u79d8\u5883\u7684\u6545\u4e8b.pdf", "file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/\u82b1\u8bed\u79d8\u5883\u7684\u6545\u4e8b.pdf", "file_type": "application/pdf", "file_size": 291244, "creation_date": "2025-03-06", "last_modified_date": "2025-02-04"}, "hash": "a85b62419f535b3da6afc1d2a5df84125361b0a4abcaf2cd391224603d8fa7d8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\u6b22\u8fce\u52a0\u5165\u82b1\u8bed\u79d8\u5883\uff01 \n\u4eb2\u7231\u7684\u56e2\u961f\u6210\u5458\uff0c \n\u606d\u559c\u60a8\u6210\u4e3a\u82b1\u8bed\u79d8\u5883\u8fd9\u4e2a\u5927\u5bb6\u5ead\u7684\u4e00\u5458\uff01\u4f5c\u4e3a\u4e00\u5bb6\u4e13\u6ce8\u4e8e\u9c9c\u82b1\u7535\u5546\u7684\u521d\u521b\u516c\u53f8\uff0c\u6211\u4eec\u4e0d\u4ec5\u8ffd\u6c42\n\u5353\u8d8a\u3001\u521b\u65b0\uff0c\u8fd8\u81f4\u529b\u4e8e\u6253\u9020\u4e00\u4e2a\u5145\u6ee1\u4e50\u8da3\u548c\u521b\u9020\u529b\u7684\u5de5\u4f5c\u73af\u5883\u3002\u5728\u8fd9\u91cc\uff0c\u6bcf\u4e00\u675f\u82b1\u90fd\u627f\u8f7d\u7740\u60c5\n\u611f\uff0c\u6bcf\u4e00\u6b21\u9001\u82b1\u90fd\u662f\u4e00\u6b21\u5fc3\u7075\u7684\u89e6\u78b0\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4e00\u8d77\u63a2\u7d22\u82b1\u8bed\u79d8\u5883\u7684\u5947\u5e7b\u4e4b\u65c5\u5427\uff01 \n\u6211\u4eec\u7684\u4f7f\u547d \n\u5728\u82b1\u8bed\u79d8\u5883\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u9769\u65b0\u9c9c\u82b1\u8d2d\u4e70\u4f53\u9a8c\uff0c\n\u901a\u8fc7\u9ad8\u8d28\u91cf\u7684\u4ea7\u54c1\u3001\u521b\u65b0\u6280\u672f\u548c\u5353\u8d8a\u670d\u52a1\uff0c\u5c06\u6bcf\n\u4e00\u6b21\u9001\u82b1\u53d8\u6210\u4e00\u4e2a\u96be\u5fd8\u7684\u6545\u4e8b\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u901a\u8fc7\n\u6211\u4eec\u7684\u52aa\u529b\uff0c\u53ef\u4ee5\u8ba9\u4e16\u754c\u53d8\u5f97\u66f4\u52a0\u7f8e\u4e3d\u548c\u6e29\u99a8\u3002 \n\u4f60\u7684\u89d2\u8272\u4e0e\u5192\u9669 \n\u65e0\u8bba\u4f60\u662f\u8425\u9500\u9ad8\u624b\u3001\u6280\u672f\u9b3c\u624d\u8fd8\u662f\u5ba2\u670d\u5929\u4f7f\uff0c\u4f60\n\u90fd\u662f\u8fd9\u573a\u5192\u9669\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u82f1\u96c4\u3002\u4f60\u7684\u6bcf\u4e00\u4e2a\u60f3\n\u6cd5\u3001\u6bcf\u4e00\u4efd\u52aa\u529b\u90fd\u5c06\u76f4\u63a5\u5f71\u54cd\u7740\u82b1\u8bed\u79d8\u5883\u7684\u6210\u957f\n\u548c\u53d1\u5c55\u3002\u6211\u4eec\u9f13\u52b1\u521b\u65b0\u601d\u7ef4\u3001\u56e2\u961f\u534f\u4f5c\uff0c\u4ee5\u53ca\u5bf9\n\u6bcf\u4e00\u6b21\u6311\u6218\u7684\u52c7\u6562\u9762\u5bf9\u3002 \n\u4e0e AI Agent \u5e76\u80a9\u4f5c\u6218 \n\u5728\u82b1\u8bed\u79d8\u5883\uff0c\u4f60\u5c06\u6709\u673a\u4f1a\u4e0e\u6211\u4eec\u7684 AI Agent\u2014\u2014\u667a\u80fd\u52a9\u624b\u4e00\u8d77\u5de5\u4f5c\u3002\u5b83\u4e0d\u4ec5\u80fd\u591f\u81ea\u52a8\u8c03\u914d\u9c9c\u82b1\n\u9012\u9001\u670d\u52a1\uff0c\u8fd8\u80fd\u5e2e\u52a9\u7528\u6237\u9009\u62e9\u6700\u9002\u5408\u7684\u9c9c\u82b1\u3002\u4e0e AI Agent \u5e76\u80a9\u4f5c\u6218\uff0c\u6211\u4eec\u5c06\u5171\u540c\u5f00\u62d3\u9c9c\u82b1\u7535\u5546\n\u7684\u65b0\u7eaa\u5143\uff01 \n\u6211\u4eec\u4e3a\u8fd9\u4e2a Agent \u547d\u540d\u4e3a\u201c\u82b1\u8bed\u7075\u201d\uff0c\u8fd9\u4e2a\u540d\u5b57\u7ed3\u5408\u4e86\u201c\u82b1\u8bed\u201d\u548c\u201c\u7075\u611f\u201d\u4e24\u4e2a\u5143\u7d20\uff0c\u4e0d\u4ec5\u547c\u5e94\u4e86\u516c\n\u53f8\u7684\u540d\u79f0\u548c\u4e1a\u52a1\u9886\u57df\uff0c\u8fd8\u6697\u793a\u4e86\u8fd9\u4e2a AI Agent \u80fd\u591f\u50cf\u4e00\u4f4d\u7075\u611f\u4e4b\u795e\u4e00\u6837\uff0c\u667a\u80fd\u5730\u4e3a\u987e\u5ba2\u63d0\u4f9b\n\u4e2a\u6027\u5316\u7684\u9c9c\u82b1\u63a8\u8350\u3001\u7ba1\u7406\u548c\u9012\u9001\u670d\u52a1\u3002 \n\u6587\u5316\u4e0e\u4e50\u8da3 \n\u5728\u82b1\u8bed\u79d8\u5883\uff0c\u6211\u4eec\u575a\u4fe1\u5de5\u4f5c\u4e0e\u4e50\u8da3\u5e76\u5b58\u3002\u8fd9\u91cc\u6709\u521b\u610f\u601d\u7ef4\u7684\u78b0\u649e\uff0c\u4e5f\u6709\u8f7b\u677e\u6109\u5feb\u7684\u5348\u8336\u65f6\u5149\u3002\n\u6211\u4eec\u9f13\u52b1\u5458\u5de5\u5206\u4eab\u751f\u6d3b\u4e2d\u7684\u5c0f\u8da3\u4e8b\uff0c\u4e3e\u529e\u5b9a\u671f\u7684\u56e2\u961f\u5efa\u8bbe\u6d3b\u52a8\uff0c\u8ba9\u5de5\u4f5c\u6210\u4e3a\u4e00\u79cd\u4eab\u53d7\u3002 \n\u6210\u957f\u4e0e\u53d1\u5c55 \n\u6211\u4eec\u4e3a\u6bcf\u4e00\u4f4d\u5458\u5de5\u63d0\u4f9b\u4e2a\u4eba\u6210\u957f\u548c\u804c\u4e1a\u53d1\u5c55\u7684\u673a\u4f1a\u3002\u901a\u8fc7\u5185\u90e8\u57f9\u8bad\u3001\u5728\u7ebf\u8bfe\u7a0b\u548c\u5b9e\u8df5\u673a\u4f1a\uff0c\u6211\n\u4eec\u5e0c\u671b\u4f60\u80fd\u5728\u82b1\u8bed\u79d8\u5883\u5b9e\u73b0\u81ea\u6211\u8d85\u8d8a\uff0c\u5f00\u82b1\u7ed3\u679c\u3002 \n\u6700\u540e\u7684\u8bdd \n\u52a0\u5165\u82b1\u8bed\u79d8\u5883\uff0c\u5c31\u662f\u52a0\u5165\u4e86\u4e00\u4e2a\u5145\u6ee1\u6fc0\u60c5\u3001\u521b\u610f\u548c\u673a\u9047\u7684\u4e16\u754c\u3002\u6211\u4eec\u671f\u5f85\u4f60\u7684\u52a0\u5165\uff0c\u4e00\u8d77\u521b\u9020\n\u66f4\u591a\u7684\u7f8e\u597d\u6545\u4e8b\uff01 \n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4e00\u8d77\u63ed\u5f00\u82b1\u8bed\u79d8\u5883\u7684\u4e0b\u4e00\u9875\uff0c\u5f00\u542f\u8fd9\u6bb5\u5947\u5999\u7684\u65c5\u7a0b\u5427\uff01 \n\u82b1\u8bed\u79d8\u5883 \u521b\u59cb CEO \u5c0f\u96ea", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 851, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"abefcd14-4f0e-4481-ae18-3ed3a5649ee5": {"node_ids": ["16789de3-0647-404f-962a-4c8fc64b3d2e"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/01-overview.md", "file_name": "01-overview.md", "file_size": 968, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "0621f6db-62c4-4ee2-93c2-5a2f61ea2cdc": {"node_ids": ["55484d02-0725-4420-b96d-5d160c4b938a"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/02-getting-started.md", "file_name": "02-getting-started.md", "file_size": 1582, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "24034607-b07a-4843-8bcc-d164e05ac876": {"node_ids": ["71816b07-5115-4f82-a7fb-7a1b996d40e4"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/03-svelte-files.md", "file_name": "03-svelte-files.md", "file_size": 2289, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "57c9a8ad-e3a5-40cf-8c94-26448ab499d7": {"node_ids": ["5d26632c-ab8c-4f87-9549-ce91a69fde2c"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/04-svelte-js-files.md", "file_name": "04-svelte-js-files.md", "file_size": 382, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "34efe4bc-c057-460d-a4c8-7a3d286c062a": {"node_ids": ["5f3fdb99-7c0e-4077-8b97-78a2ee2093d6"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/index.md", "file_name": "index.md", "file_size": 28, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "37a0a963-8428-43a8-ab00-8e9ecabe34d9": {"node_ids": ["61fc863a-cdf0-4dba-acaf-7bfd0d7887e8"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-props.md", "file_name": "xx-props.md", "file_size": 3267, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "b385ede5-7310-4432-8cd2-3fd5357b51da": {"node_ids": ["0d21569e-bb02-4029-8a82-b1a01ac6bbd9", "d979e5eb-ab3f-4f92-a53b-a77ca8008469", "a8a5729b-503c-4c1f-84e6-7ea719a05ffc"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/01-introduction/xx-reactivity-fundamentals.md", "file_name": "xx-reactivity-fundamentals.md", "file_size": 4411, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "86d9f2df-6f80-4203-95e3-3a929ac9d6d9": {"node_ids": ["4373fa74-bf9c-4083-8313-5beaa19fac5a"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/01-what-are-runes.md", "file_name": "01-what-are-runes.md", "file_size": 854, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "e08fd715-cc2e-4356-95b4-45b2414c29b1": {"node_ids": ["a14fac7f-d818-48e7-875f-973b7fc22ac9", "8f4d0576-5183-4feb-94a6-05f4bead1184", "c7670d9f-a2e0-4910-91ee-a9d50c9a1b79"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/02-$state.md", "file_name": "02-$state.md", "file_size": 6407, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "7ece5be9-5a87-41e9-aaff-b63970861352": {"node_ids": ["cc4882fd-d54f-440d-8484-9a297b917950"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/03-$derived.md", "file_name": "03-$derived.md", "file_size": 2316, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "14004861-d15b-4f7f-a989-c0106154541d": {"node_ids": ["3a6678b0-3124-4e63-be67-8fb101664b0e", "f432e2a7-a0b6-42da-9f97-d240dbaf87d2", "eafbe1c5-c27e-4c78-8a6b-da30ad9f0acd", "61ea78ee-85e8-4893-bfd2-857d27567282", "3bc13870-13a0-4624-b07f-6806c65a2c94", "da12869c-857c-492a-b66a-b6ca39df483c", "702c7f10-5c02-49c1-b0a1-60d4ceebf3ae"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/04-$effect.md", "file_name": "04-$effect.md", "file_size": 13557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "5e802b9b-48b2-482d-a8cc-e7821507ca8c": {"node_ids": ["a1b1197d-9204-46f3-9858-ed402e594c49", "e27b859d-dbb3-4ed0-aa8d-bf41536ca016", "c24a5fa7-9cd7-4ef7-b3d4-8b761ce52eac"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/05-$props.md", "file_name": "05-$props.md", "file_size": 6570, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "7ef3c18d-f0ee-4041-9cc1-31a825a56ad6": {"node_ids": ["65bbe3e1-f38f-4faf-9a33-2b7c35e6bb30"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/06-$bindable.md", "file_name": "06-$bindable.md", "file_size": 1977, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "8bda120f-0c8f-4b6b-9795-06c3c2ce3ad2": {"node_ids": ["ed0ff1f6-8137-42d3-b75e-efb98c908794"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/07-$inspect.md", "file_name": "07-$inspect.md", "file_size": 2573, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "1c633116-1c28-4d4d-97f0-1549351d46b3": {"node_ids": ["52c03147-aded-4f13-8a12-035cfc3029b9"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/08-$host.md", "file_name": "08-$host.md", "file_size": 1240, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "5e1f3a31-5f21-45a3-9889-9d816158e34f": {"node_ids": ["07fb0c9f-7fd5-46a3-9416-d6a1fe6c3ba6"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/02-runes/index.md", "file_name": "index.md", "file_size": 21, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "9719379b-cbb1-4e00-931d-6a4198cb1a30": {"node_ids": ["48fde40a-dfe3-4dfd-8f1a-b20fed1adf9b", "c1f7ff5a-b704-4858-b31c-0f69791f65d4"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/01-basic-markup.md", "file_name": "01-basic-markup.md", "file_size": 7184, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "63f0cf37-7115-4b60-afb2-5c5deeab00cd": {"node_ids": ["ae002899-5245-4f66-b28c-e76b3972000c"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/02-if.md", "file_name": "02-if.md", "file_size": 736, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "3c7da462-df5c-48a6-b6c6-98bbf1743376": {"node_ids": ["a583f4c9-91a9-4c41-adf9-125c60c8e8d3", "502cb41c-dbfd-4bfd-9bce-cd2484905a45"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/03-each.md", "file_name": "03-each.md", "file_size": 3028, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "aec073d2-15e7-48a2-947b-cc1aecff05eb": {"node_ids": ["7acab5f8-3529-4536-8fb5-6bd4e662ff7d"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/04-key.md", "file_name": "04-key.md", "file_size": 469, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "fa515f9a-cf2b-4727-9815-3fddcd2b10cc": {"node_ids": ["cd4cde87-775d-48d2-b2bf-b381e0c0beec"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/05-await.md", "file_name": "05-await.md", "file_size": 2023, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "15d2c7fa-2928-42cc-986e-417f2bf37390": {"node_ids": ["87c55966-30b9-4467-bc80-fd5cef708234", "ad257be9-cfca-4717-8db6-b7a35617d3ca", "a1de2f1c-5ab4-4b03-8df1-56e87a1ca11e", "1557032b-322c-4703-9ffe-a2a8a1c8e14b", "e3c59fbc-1cdb-449a-8d31-1b87fe17a814", "979ea745-271b-4c2c-b7b0-58e4291da2d2"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/06-snippet.md", "file_name": "06-snippet.md", "file_size": 10376, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "929b1115-7cfa-48f9-9092-9cb46741535e": {"node_ids": ["fe09973b-2728-4007-aecc-79ec13e6e9a5"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/07-@render.md", "file_name": "07-@render.md", "file_size": 791, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "b6841699-dcbc-4648-83bd-5f7be325a64c": {"node_ids": ["870aebf5-e064-4a38-bfc5-038dad6663f2"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/08-@html.md", "file_name": "08-@html.md", "file_size": 1174, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "ea5db368-90e2-4118-aff3-fad913ee8fc3": {"node_ids": ["b3790dd6-3f71-4d08-9623-ec1a43c653f2"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/09-@const.md", "file_name": "09-@const.md", "file_size": 367, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "bd5d51a3-749a-4ec4-8a69-454319a98074": {"node_ids": ["5ee2ac89-49ee-49c6-8338-0cf108b8e882"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/10-@debug.md", "file_name": "10-@debug.md", "file_size": 810, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "4cf41afc-92cd-4374-8cb5-d790681ffaa0": {"node_ids": ["7c6ac0d3-930d-496f-bc25-530f6d475980", "f5db5fe6-fbb5-468e-8fa9-aed6c898ef2f", "b19c4805-bda2-4fa7-b071-85162985e9f5", "68aa8df5-fe97-4e72-a8e0-229761a38438"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/11-bind.md", "file_name": "11-bind.md", "file_size": 13029, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "2d9d018c-b3ec-4b0d-b97f-55e63a1d7ae7": {"node_ids": ["2b274951-e74c-4816-916d-1ea733c4339a"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/12-use.md", "file_name": "12-use.md", "file_size": 1880, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "86a577b0-38d1-4ee0-b7fa-75f301920f22": {"node_ids": ["1df33c61-5fe7-4989-9065-b78623dbd533", "5189ff9c-8102-46a0-af66-4f35600d78c4"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/13-transition.md", "file_name": "13-transition.md", "file_size": 5128, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "a24e778b-dc93-4c2e-9eca-3f374743dc10": {"node_ids": ["ba56f1f5-682a-44ff-b6b8-0d476913f944"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/14-in-and-out.md", "file_name": "14-in-and-out.md", "file_size": 678, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "b0257f49-e112-4861-bfb8-474fb390fad4": {"node_ids": ["8babec5a-d8e9-44e1-b6ee-cdd6c71b00b6", "f18ddc0a-a133-4b41-a170-33f5587c1171"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/15-animate.md", "file_name": "15-animate.md", "file_size": 3834, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "a044a92f-441f-428f-9f91-f2da5313204f": {"node_ids": ["29914d3f-acf0-460b-98ab-6d6289165fc8"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/17-style.md", "file_name": "17-style.md", "file_size": 863, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "56d519f2-7c7e-490f-ad44-54a26fe746a4": {"node_ids": ["e11e4038-8737-4dea-ba7d-281a545652d2"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/18-class.md", "file_name": "18-class.md", "file_size": 3067, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "d55f7abd-d443-44cb-803f-5a68e2f6e73b": {"node_ids": ["b2c9e4f1-74af-4476-934f-2bbcf383d9cf"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/index.md", "file_name": "index.md", "file_size": 31, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "90ea49db-900a-4824-aef7-c67a8c34707c": {"node_ids": ["f1f3c0cf-7927-4a75-9a00-83bc4a36e540"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/xx-control-flow.md", "file_name": "xx-control-flow.md", "file_size": 3152, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "cb868661-fd11-4c68-a340-4363e90367a1": {"node_ids": ["7258546d-4e12-450c-b444-4675cc0f79db"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/03-template-syntax/xx-data-fetching.md", "file_name": "xx-data-fetching.md", "file_size": 839, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "84c33698-b790-4977-8f95-6eaee7854d3f": {"node_ids": ["e10437fb-efb5-4524-ad2a-2811bfd84c92"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/01-scoped-styles.md", "file_name": "01-scoped-styles.md", "file_size": 1486, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "05b3e958-994b-41da-8ef5-f29003b413bf": {"node_ids": ["f98b20cb-c04d-4194-a6bf-dae807cd2f4a"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/02-global-styles.md", "file_name": "02-global-styles.md", "file_size": 1563, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "5596d08c-7bde-4e05-8c6a-8da290e67b7a": {"node_ids": ["ce64fd7a-4074-4a8b-b9d1-ed8eb88143d9"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/03-custom-properties.md", "file_name": "03-custom-properties.md", "file_size": 1467, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "4743f1da-433f-4c34-9421-1cf7c3948fa0": {"node_ids": ["2b0186c8-0f93-4824-99cc-14b51bac3cd2"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/04-nested-style-elements.md", "file_name": "04-nested-style-elements.md", "file_size": 506, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "0f21494e-088e-46a1-9c3f-a6029caee0ff": {"node_ids": ["f36338a7-f6f4-483f-b26a-d555d66df974"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/04-styling/index.md", "file_name": "index.md", "file_size": 23, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "4317750e-55c1-4905-9ee3-d570e0e22ee7": {"node_ids": ["27680958-bed1-453d-86d8-073b86cb3433"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/01-svelte-boundary.md", "file_name": "01-svelte-boundary.md", "file_size": 2692, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "9ba135d8-e951-4715-95b9-b467c002e44b": {"node_ids": ["95aaf8d7-cbc2-475d-b4f8-407b54a5f66f"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/02-svelte-window.md", "file_name": "02-svelte-window.md", "file_size": 1243, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "827766e5-4f50-4930-92be-2629414d5325": {"node_ids": ["1be2740c-26fd-4d2d-b00c-45c6294a5a19"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/03-svelte-document.md", "file_name": "03-svelte-document.md", "file_size": 726, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "48de5a68-99fd-4110-b7a0-48cb3cba695d": {"node_ids": ["f74e0455-a4c5-4466-abe0-58ecff1466c6"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/04-svelte-body.md", "file_name": "04-svelte-body.md", "file_size": 580, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "da0c0f2c-5bd3-433e-aa19-674781f651bc": {"node_ids": ["911ba0a3-8f01-4363-ae31-1265450030f4"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/05-svelte-head.md", "file_name": "05-svelte-head.md", "file_size": 576, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "c372b535-fcd1-448e-abd2-a09dfb229797": {"node_ids": ["a2a1b654-143d-4635-b0cb-9b59bbe2de5c"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/06-svelte-element.md", "file_name": "06-svelte-element.md", "file_size": 1199, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "76a4bbe3-94c5-4050-a476-9388ccc8ff90": {"node_ids": ["8f469e2d-460a-418e-8ef7-7f9bcc480a1c"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/07-svelte-options.md", "file_name": "07-svelte-options.md", "file_size": 1557, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "5f8ffbd8-6012-401a-aa72-42b96b933cef": {"node_ids": ["9fdfa0bd-fa34-410a-8504-1cdf1a01d8a0"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/05-special-elements/index.md", "file_name": "index.md", "file_size": 32, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "c8226cc3-0a64-4e0a-b868-5237714438a2": {"node_ids": ["42aef016-adcd-42e2-a5ad-48445154a001", "36778d58-2ea3-4205-bf8b-8326a7e38971", "df18c2f1-f89f-4ad3-b743-2b5933503c4e"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/01-stores.md", "file_name": "01-stores.md", "file_size": 10237, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "22d13e0a-9f7b-4712-a400-737f3bfaf4be": {"node_ids": ["79343434-edd8-4bf0-8f20-b77f4ba8fa30"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/02-context.md", "file_name": "02-context.md", "file_size": 3666, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "25b4ef3e-71cc-4b7a-be67-5abbeeee9005": {"node_ids": ["728850a6-1410-4556-8417-9476e8bc99fe", "f6d92174-0bf4-46e1-bb36-5cbc1fe82507", "804a0f55-e85d-427f-a7a3-4ed40fa0cabd", "983c9aa1-4fa6-4cfd-8d60-5869e01d4ae1"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/03-lifecycle-hooks.md", "file_name": "03-lifecycle-hooks.md", "file_size": 7908, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "f4b7b610-7ef4-4e02-8fca-2470625ba5bc": {"node_ids": ["9f12b27d-29be-4a77-a48b-82ece5eb8816"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/04-imperative-component-api.md", "file_name": "04-imperative-component-api.md", "file_size": 2681, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "c04e1875-a8cf-4d86-a82a-2647e13a4176": {"node_ids": ["6fa5e994-9f8d-4ca1-8ce9-1a02e18b1033"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/06-runtime/index.md", "file_name": "index.md", "file_size": 23, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "d541a4a7-5460-4a1d-8249-0db167b6d95c": {"node_ids": ["77f89aae-4eba-4bf7-8f78-ae7614f409a6", "e5ecbf67-9aae-45f4-a070-012d4e1f310e", "54c2468c-d9e6-41b6-a8ad-28f50fa0e174", "429e9770-629d-40d0-909a-8972c203b513"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/02-testing.md", "file_name": "02-testing.md", "file_size": 8450, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "2644d1c7-6ce9-4d01-af17-ac7b191cd05c": {"node_ids": ["69328b41-9b3e-47f1-9a56-9cc09ad20c9a", "2db521f5-9178-4502-b2db-92681232d208", "31ab483f-0dae-4cf7-885b-2d69876692eb", "3c190d5b-e6ab-48ee-97e0-a6d3428f47cd"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/03-typescript.md", "file_name": "03-typescript.md", "file_size": 10652, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "9917d25f-43a0-4ee1-b5c3-d477d9136d5f": {"node_ids": ["0f1477e7-cadb-4519-ad12-0bc603f243f2", "ec03a0ec-828d-45de-a39a-d847e02b62dd", "398579eb-45ed-449f-8b59-204ac95071bc"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/04-custom-elements.md", "file_name": "04-custom-elements.md", "file_size": 7886, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "a13d9783-402d-4078-b816-4831a1f153f4": {"node_ids": ["c856149a-cc64-4488-beb9-2ee5385dc28e", "b07ded90-5e37-4e46-8b62-8ab6c0c94c2e", "16397f06-5adc-48f1-9ef3-878611fc17cf", "21efd7ab-4966-41c2-8e23-e538f89d41ab", "27ccbc56-b304-4c15-a30f-4735a76b7cfd"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/06-v4-migration-guide.md", "file_name": "06-v4-migration-guide.md", "file_size": 12191, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "f619c683-4114-4e2b-9b27-ca2f455ba6d3": {"node_ids": ["7f5f96e5-bdf5-4b56-bbd8-65578e23e465", "b43ef22e-9919-49b8-b6b1-a9619b9903ef", "503878b1-b78c-4526-bb82-614d22931bf6", "c6f21701-8d6f-426c-9372-10a3d4ce54b1", "08a916ae-e944-47e5-9cf5-2919b7cca590", "a0359406-e71f-429c-bb71-1df0cb80e22f", "f43da00c-d2e2-4c1b-a778-629c8833e404", "2698cf39-50a1-4f80-9795-c1ef1d225c15", "329a9921-9647-4add-8b58-1993b961d2d4", "48247c5b-3f98-4ccf-9982-828858b0daca", "052410bf-11cf-413d-9350-45e100493458", "a0c8717c-5f4a-458e-aa18-bdd230ac377d", "6ff1fc9b-3f26-4966-894b-77dc7310bf83"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/07-v5-migration-guide.md", "file_name": "07-v5-migration-guide.md", "file_size": 43133, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "cec080e9-c8d0-431f-989d-23ec9ea0ae1d": {"node_ids": ["a710c582-a75f-4342-b692-691992df3047", "32e5b683-29ff-4c58-8b18-4558097b8c5a", "47df42bf-63f7-432e-b008-b125aa668eef"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/99-faq.md", "file_name": "99-faq.md", "file_size": 10212, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "0e40ed3c-0e3f-420c-b119-ff19a9e72377": {"node_ids": ["cd661251-9ee7-4a68-88dc-869d86da1bdd"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/index.md", "file_name": "index.md", "file_size": 20, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "d14c07be-ee62-4563-b788-17ba9ca74f16": {"node_ids": ["d192b257-7629-451c-b9df-8923c88e1d2b"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/07-misc/xx-reactivity-indepth.md", "file_name": "xx-reactivity-indepth.md", "file_size": 179, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "05385150-776b-41cc-a760-dfd3b7cc310a": {"node_ids": ["34663da8-a83e-4308-88d0-2424f92ac408"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/20-svelte.md", "file_name": "20-svelte.md", "file_size": 40, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "aedef508-28e9-438e-aab5-99be37412391": {"node_ids": ["751fe680-414f-4359-a8a5-41bd1fd2b263"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-action.md", "file_name": "21-svelte-action.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "0d53d26f-547d-42c8-b117-299aa9143461": {"node_ids": ["0f764df7-ac71-4cf7-91e4-470b6bf3a09e"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-animate.md", "file_name": "21-svelte-animate.md", "file_size": 56, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "708a68d5-984e-4496-8dd0-da43c444d52c": {"node_ids": ["84ce6ea1-7dad-49cc-94f2-3f6800416163"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-compiler.md", "file_name": "21-svelte-compiler.md", "file_size": 58, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "9a8d09c3-d561-43b9-b6ab-34c2160444d9": {"node_ids": ["8e644406-189b-4f4f-9a47-7ab1b064095e"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-easing.md", "file_name": "21-svelte-easing.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "dc2be6b3-8f35-41c8-8b35-befeae7756cb": {"node_ids": ["66a12722-8bfc-4a7d-b824-a0c23537a9ef"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-events.md", "file_name": "21-svelte-events.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "c2993c21-3fed-4de7-afbd-9be511e534f3": {"node_ids": ["fb5a13dd-d377-4665-bbe7-e63fd9b9dd9e"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-legacy.md", "file_name": "21-svelte-legacy.md", "file_size": 273, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "6a6142c5-8131-4024-96d3-9863b6c08bec": {"node_ids": ["004ce44d-48f6-415b-8471-dca9012ad218"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-motion.md", "file_name": "21-svelte-motion.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "7558e218-47b8-4b1c-9be0-063616ac6348": {"node_ids": ["2f6dc7f4-9eeb-4876-a3e3-3c8cd1a63e1b"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-reactivity-window.md", "file_name": "21-svelte-reactivity-window.md", "file_size": 551, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "545bba30-3ed3-40f2-ac36-d837fceee1ca": {"node_ids": ["d006e5a2-bf4e-494f-9ffc-7275ef0dabbf"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-reactivity.md", "file_name": "21-svelte-reactivity.md", "file_size": 619, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "1ba3d028-7243-44c9-8ef1-bc76a925dbc6": {"node_ids": ["1a29c0eb-034d-458d-acc3-cf4b93ce6ffc"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-server.md", "file_name": "21-svelte-server.md", "file_size": 54, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "a6741340-c853-4b72-a5c4-615aa44aeab9": {"node_ids": ["018c3522-e01b-42c5-9dd3-218365b34b45"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-store.md", "file_name": "21-svelte-store.md", "file_size": 52, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "48a6b96b-effb-488d-a8c5-aa815f49bf05": {"node_ids": ["a0b21ae6-3417-4087-9eb4-69857c3ffb99"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/21-svelte-transition.md", "file_name": "21-svelte-transition.md", "file_size": 62, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "0968c81a-248f-4fb2-80b2-81c390661417": {"node_ids": ["929e9223-f8b6-4e7d-a90a-39809cbcb8c0"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-compiler-errors.md", "file_name": "30-compiler-errors.md", "file_size": 72, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "1308f019-4225-42b3-94e9-fe8befbc515e": {"node_ids": ["361829a8-9266-42ea-b01a-984eea873335"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-compiler-warnings.md", "file_name": "30-compiler-warnings.md", "file_size": 738, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "d83aec58-70fe-484f-9049-3aa49a98d006": {"node_ids": ["7f65a7b1-8fad-40b3-a99b-42652e0e1c01"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-runtime-errors.md", "file_name": "30-runtime-errors.md", "file_size": 200, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "2ff72e13-0574-403d-b81e-57c53a6bc8d9": {"node_ids": ["986d4480-1a8f-4340-8ae9-a5145a94393e"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/30-runtime-warnings.md", "file_name": "30-runtime-warnings.md", "file_size": 154, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "f8d24fdb-b9f0-43fa-96da-c46220caa262": {"node_ids": ["505fb363-ff87-4d6d-94bf-8f37176971d0"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/98-reference/index.md", "file_name": "index.md", "file_size": 25, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "22747c5f-473f-43ea-ac41-798562f8c1f6": {"node_ids": ["6c4ac433-49f0-4ffd-b82d-e2ae73782dac"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/00-legacy-overview.md", "file_name": "00-legacy-overview.md", "file_size": 975, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "cef774c6-9dbb-401c-b1dc-70e11384c6ee": {"node_ids": ["71b70b28-f0f0-4a20-889b-358a60e4b72b"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/01-legacy-let.md", "file_name": "01-legacy-let.md", "file_size": 963, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "bb688433-7af5-49d0-9d1c-6640f858276d": {"node_ids": ["1dbf06d6-2242-47ed-9c20-5196541d4836"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/02-legacy-reactive-assignments.md", "file_name": "02-legacy-reactive-assignments.md", "file_size": 2501, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "d9b7b290-56c6-4e43-ba15-79cf250330e9": {"node_ids": ["33f5f24f-6565-403f-a297-e8a94fb2e7f6"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/03-legacy-export-let.md", "file_name": "03-legacy-export-let.md", "file_size": 1814, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "207f3aa4-27ec-4b55-b464-7ed2ba286e54": {"node_ids": ["d494ef34-867e-44a8-9eed-9e46a386c43a"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/04-legacy-$$props-and-$$restProps.md", "file_name": "04-legacy-$$props-and-$$restProps.md", "file_size": 928, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "a6861b74-8d75-4938-b604-85765b05dadc": {"node_ids": ["3f16f1da-16eb-4941-9aae-76c6d831ba07"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/10-legacy-on.md", "file_name": "10-legacy-on.md", "file_size": 3673, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "30d25159-9824-47a6-a476-2bb144e2c4e1": {"node_ids": ["b5d4400f-1565-4d01-922f-68c062f3b99b"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/20-legacy-slots.md", "file_name": "20-legacy-slots.md", "file_size": 2778, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "ad5005c6-81de-491b-8089-80871a922190": {"node_ids": ["399126e7-3009-4c3f-8483-ade3941ab380"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/21-legacy-$$slots.md", "file_name": "21-legacy-$$slots.md", "file_size": 744, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "17e7120b-3188-4f13-841f-7ec72f8998bd": {"node_ids": ["88f88d54-a619-4822-a9f2-26a904a003d7"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/22-legacy-svelte-fragment.md", "file_name": "22-legacy-svelte-fragment.md", "file_size": 784, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "7f05c25d-af1d-48b6-acf4-e43e8faa6455": {"node_ids": ["db4232db-ed30-45e9-a035-ec03a92f959e"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/30-legacy-svelte-component.md", "file_name": "30-legacy-svelte-component.md", "file_size": 511, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "513524c6-b3eb-4f9e-bab1-a867015a1e4b": {"node_ids": ["7a7968a1-7cb4-4111-aef1-8fc69df0ce71"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/31-legacy-svelte-self.md", "file_name": "31-legacy-svelte-self.md", "file_size": 755, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "70343630-4b8c-437b-85f7-4757c6558ab3": {"node_ids": ["db36f4a8-5d7a-47d2-96af-8a339152268b", "ed044614-7a10-40a5-9155-c4b9c90f1e80"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/40-legacy-component-api.md", "file_name": "40-legacy-component-api.md", "file_size": 6475, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "8d6220e4-1b04-43ea-981c-9f9d2c15cf4e": {"node_ids": ["8421860d-d9a1-4c9d-ac33-71d8ab0e01ac"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/99-legacy/index.md", "file_name": "index.md", "file_size": 27, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "90347410-a2c1-450b-aeef-77213ccc017e": {"node_ids": ["516ec679-13fd-4a3d-a85e-e92fa0b80136"], "metadata": {"file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/documentation/docs/index.md", "file_name": "index.md", "file_size": 22, "creation_date": "2025-02-04", "last_modified_date": "2025-02-04"}}, "241cb01c-8235-45f6-b1b6-d04048f7e7e9": {"node_ids": ["ffd0d2c2-bac6-43e0-bdf7-b566b5c723bf"], "metadata": {"page_label": "1", "file_name": "\u82b1\u8bed\u79d8\u5883\u7684\u6545\u4e8b.pdf", "file_path": "/Users/hao/project/py-projects/ai-agent-practice/llama-index-demo/data/\u82b1\u8bed\u79d8\u5883\u7684\u6545\u4e8b.pdf", "file_type": "application/pdf", "file_size": 291244, "creation_date": "2025-03-06", "last_modified_date": "2025-02-04"}}}}